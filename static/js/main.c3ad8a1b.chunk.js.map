{"version":3,"sources":["components/task_modal/InputForm.js","components/task_modal/DescriptionTaskInput.js","components/board_modal/ErrorMessage.js","helpers/ValidateUserBlankInput.js","components/task_modal/ToggleSwitchPriority.js","components/task_modal/ModalPage.js","components/board_modal/OrderInput.js","components/board_modal/InsertionBoardSchema.js","components/board_modal/ModalPage.js","components/main/ButtonGroup.js","components/main/TaskItem.js","components/main/NewKanbanDashboard.js","components/main/PriorityOrderedTasks.js","components/edit_modal/ModalPage.js","components/main/index.js","helpers/EmptyObject.js","helpers/SwapArrayElements.js","helpers/ValidateUserInputChange.js","KanbanBoard.js","App.js","helpers/AlertOptions.js","index.js"],"names":["handleDelegateNameChange","fullname","style","marginBottom","prepend","inputs","noTag","name","value","first","onChange","e","target","getAttribute","type","last","description","descriptionInputChange","className","label","outline","error","color","arr","some","input","SwitchButton","props","state","checked","handleChange","bind","this","setState","switchPriority","md","marginLeft","fontSize","Component","createTask","resetErrors","validateInput","errors","taskTitleError","taskDescriptionError","firstNameError","lastNameError","useState","modalButtonClick","setModalButtonClick","taskTitle","setTaskTitle","taskDescription","setTaskDescription","highTaskPriority","setHighTaskPriority","delegateName","setDelegateName","createNewTask","setCreateNewTask","alert","useAlert","stableDispatch","useCallback","useEffect","handleToggleModal","onClick","zIndex","isOpen","toggle","size","ErrorMessage","DescriptionTaskInput","id","task_priority","InputForm","attribute","disabled","inputStatus","ValidateUserBlankInput","timeout","onOpen","console","log","onClose","task_title","location","task_description","boardOrderChange","order","newBoardPlaceOrder","boardsSchema","isNaN","marginRight","map","block","idx","key","setBoardOrderState","createBoard","boards","boardOrderError","boardTitleError","boardTitle","setBoardTitle","boardOrder","setBoardOrder","createNewBoard","setCreateNewBoard","setNewBoardPlaceOrder","InsertionBoardSchema","OrderInput","title","board","task","priority_level","handleFindForEditTaskModal","boardLength","moveTask","deleteTask","hideTask","boolStr","direction","aria-hidden","index","listLength","swapTasks","editTask","toggleModal","setToggleModal","DescriptionModal","handleToggleDescriptionModal","draggable","onDragStart","dataTransfer","setData","onDragOver","stopPropagation","display","justifyContent","onMouseOver","document","getElementById","querySelector","innerHTML","onMouseLeave","ButtonGroup","swapKanbanTasks","showTask","dragTask","deleteBoard","boardMessage","dropTask","preventDefault","task_id","getData","tasks","visibility","dragTaskOver","handleDeleteBoard","onDrop","length","list","TaskItem","autoFocus","textAlign","priorityTasks","swapPriorityTasks","toUpperCase","priorityTasksList","handleToggleEditTaskModal","submitNewTaskItems","searchEditTask","editTaskItems","setEditTaskItems","toggleTaskPriority","setToggleTaskPriority","changeEvent","setChangeEvent","handleEditTaskItemChange","htmlFor","first_name","last_name","listProps","panelControlButtons","eventProps","filterPriorityTasks","toggleEditModal","findTaskForEdit","resetMainKanbanView","href","kanban_board","priority_board","NewKanbanDashboard","PriorityOrderedTasks","obj","hasOwnProperty","call","a","b","temp","titleFormat","personNameFormat","parseInt","match","initialBoards","uuid","initialPriorityTaskList","initialErrors","URI_heroku","KanbanBoard","note","setNote","setBoards","inputErrors","setInputErrors","setBoardsSchema","setPriorityTasks","editModalButtonClick","setEditModalButtonClick","setSearchEditTask","setPanelControlButtons","boardsRef","useRef","fetch","json","then","data","_id","priority","sort","Array","keys","catch","err","handleSwapTasksWithinPriorityList2","list_priority_level","index1","findIndex","SwapArrayElements","handleShowTaskItem2","visible","split","handleEventProps","isEmpty","method","headers","body","JSON","stringify","toLowerCase","response","createdBoard","slice","Object","assign","current","concat","createdTask","movingTask","isTrueSet","find","filter","priorityList","moveOutBoard","moveInBoard","board_name","task_name","deletedTask","revised_task","new_task","updatedTask","old_task","deletedBoard","elem","ValidateUserInput","forEach","handleStateProps","options","position","positions","TOP_CENTER","offset","containerStyle","transition","transitions","SCALE","ReactDOM","render","template","AlertTemplate"],"mappings":"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","file":"static/js/main.c3ad8a1b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { MDBInputGroup, MDBInput } from \"mdbreact\";\r\nexport default ( { handleDelegateNameChange, fullname } ) => {\r\n\r\n    const handleFirstNameInputChange = e => handleDelegateNameChange(e.target.getAttribute('name'), e.target.value);\r\n    const handleLastNameInputChange  = e => handleDelegateNameChange(e.target.getAttribute('name'), e.target.value);\r\n\r\n    return (\r\n        <MDBInputGroup style={{ marginBottom: 10 }}\r\n            prepend=\"Delegated to: \"\r\n            inputs={\r\n                <>\r\n                    <MDBInput noTag name=\"first\" value={fullname.first} onChange={handleFirstNameInputChange} type=\"text\" />\r\n                    <MDBInput noTag name=\"last\" value={fullname.last} onChange={handleLastNameInputChange} type=\"text\" />\r\n                </>\r\n            }\r\n        />\r\n    );\r\n}","import React from 'react';\r\nimport { MDBInput, MDBContainer } from 'mdbreact';\r\n\r\nexport default ({ description, descriptionInputChange }) =>\r\n    <MDBContainer className='task-description'>\r\n        <MDBInput\r\n            value={description}\r\n            name='task_description'\r\n            onChange={descriptionInputChange}\r\n            type=\"textarea\"\r\n            label=\"Task Description\"\r\n            outline\r\n        />\r\n    </MDBContainer>\r\n","import React from 'react';\r\nimport { MDBContainer, MDBAlert } from 'mdbreact';\r\n\r\nexport default ({ error }) => (\r\n        <MDBContainer>\r\n            <MDBAlert color=\"danger\" >\r\n                {error}\r\n            </MDBAlert>\r\n        </MDBContainer>\r\n    );\r\n\r\n","export default arr => arr.some(input => input === \" \" || input === \"\" || input == null);","import React, { Component } from \"react\";\r\nimport Switch from \"react-switch\";\r\nimport { MDBRow, MDBCol } from \"mdbreact\";\r\n\r\nexport default class SwitchButton extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { checked: false };\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    handleChange(checked) {\r\n        this.setState({ checked });\r\n        this.props.switchPriority(checked);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <label>\r\n                <MDBRow>\r\n                    <MDBCol md=\"2\">\r\n                        <Switch onChange={this.handleChange} checked={this.state.checked} />\r\n                    </MDBCol>\r\n                    <MDBCol md=\"10\">\r\n                        <span style={{ marginLeft: 15, fontSize: 20 }}>Please, select if this task is priority</span>\r\n                    </MDBCol>\r\n                </MDBRow>\r\n            </label>\r\n        );\r\n    }\r\n}","import React, {useState, useEffect, useCallback} from 'react';\r\nimport { MDBBtn, MDBModal, MDBModalBody, MDBModalHeader, MDBModalFooter, MDBInput } from 'mdbreact';\r\nimport InputForm from './InputForm';\r\nimport DescriptionTaskInput from \"./DescriptionTaskInput\";\r\nimport ErrorMessage from \"../board_modal/ErrorMessage\";\r\nimport ValidateUserBlankInput from '../../helpers/ValidateUserBlankInput';\r\nimport {useAlert} from 'react-alert';\r\nimport SwitchButton from \"./ToggleSwitchPriority\";\r\n\r\nexport default ({\r\n                    createTask,\r\n                    resetErrors,\r\n                    validateInput,\r\n                    errors: {\r\n                        taskTitleError,\r\n                        taskDescriptionError,\r\n                        firstNameError,\r\n                        lastNameError\r\n                    }\r\n                }) => {\r\n    const [modalButtonClick, setModalButtonClick] = useState(false);\r\n    const [taskTitle, setTaskTitle] = useState(\"\");\r\n    const [taskDescription, setTaskDescription] = useState(\"\");\r\n    const [highTaskPriority, setHighTaskPriority] = useState(false);\r\n    const [delegateName, setDelegateName] = useState({\r\n        first: \"\",\r\n        last: \"\"\r\n    });\r\n    const [createNewTask, setCreateNewTask] = useState({});\r\n\r\n    const handleTaskTitleChange = e => {\r\n        const {value, name} = e.target;\r\n        validateInput(value, name);\r\n        setTaskTitle(value);\r\n    }\r\n\r\n    const handleHighTaskPrioritySwitch = task_priority => {\r\n        setHighTaskPriority(task_priority);\r\n    }\r\n\r\n    const handleTaskDescriptionChange = e => {\r\n        const {value, name} = e.target;\r\n        validateInput(value, name);\r\n        setTaskDescription(value);\r\n    }\r\n    const handleDelegateNameChange = (attribute, value) => {\r\n        if (attribute === \"first\") {\r\n            validateInput(value, attribute);\r\n            setDelegateName({...delegateName, first: value});\r\n        }\r\n        if (attribute === \"last\") {\r\n            validateInput(value, attribute);\r\n            setDelegateName({...delegateName, last: value});\r\n        }\r\n    }\r\n\r\n    const alert = useAlert();\r\n\r\n    const handleStoreTaskItem = () => {\r\n        if (ValidateUserBlankInput(\r\n            [\r\n                taskTitle,\r\n                taskDescription,\r\n                delegateName.first,\r\n                delegateName.last\r\n            ])) {\r\n            alert.error(<div style={{color: 'red', fontSize: 15}}>Please, Fill Blank Fields...</div>, {\r\n                timeout: 5000,\r\n                onOpen: () => {\r\n                    console.log('hey')\r\n                },\r\n                onClose: () => {\r\n                    console.log('closed')\r\n                }\r\n            });\r\n        } else {\r\n            setCreateNewTask({\r\n                ...createNewTask,\r\n                task_title: taskTitle,\r\n                location: 'kanban_board',\r\n                task_description: taskDescription,\r\n                task_priority: highTaskPriority,\r\n                first: delegateName.first,\r\n                last: delegateName.last\r\n            });\r\n            setModalButtonClick(!modalButtonClick);\r\n            setHighTaskPriority(false);\r\n        }\r\n    };\r\n\r\n    const stableDispatch = useCallback(createTask, []);\r\n\r\n    useEffect(() => {\r\n        stableDispatch(createNewTask);\r\n    }, [stableDispatch, createNewTask]);\r\n\r\n\r\n    const handleToggleModal = () => {\r\n        setTaskTitle('');\r\n        setTaskDescription('');\r\n        setDelegateName({\r\n                first: \"\",\r\n                last: \"\"\r\n            }\r\n        );\r\n        setModalButtonClick(!modalButtonClick);\r\n        resetErrors();\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <MDBBtn className='start-modal-button' onClick={handleToggleModal}>CREATE TASK</MDBBtn>\r\n            <MDBModal style={{zIndex: 1}} isOpen={modalButtonClick} toggle={handleToggleModal}>\r\n                <MDBModalHeader toggle={handleToggleModal}>Task Form</MDBModalHeader>\r\n                <MDBModalBody>\r\n                    <MDBInput label=\"Enter Task Title\" name='task_title' type='text' value={taskTitle}\r\n                              onChange={handleTaskTitleChange} size=\"md\"/>\r\n                    {taskTitleError.errors && <ErrorMessage error={taskTitleError.errors}/>}\r\n                    <DescriptionTaskInput\r\n                        id='textArea'\r\n                        description={taskDescription}\r\n                        descriptionInputChange={handleTaskDescriptionChange}\r\n                    />\r\n                    {taskDescriptionError.errors && <ErrorMessage error={taskDescriptionError.errors}/>}\r\n                    <SwitchButton switchPriority={handleHighTaskPrioritySwitch}/>\r\n                    <InputForm fullname={delegateName} handleDelegateNameChange={handleDelegateNameChange}/>\r\n                    {firstNameError.errors && <ErrorMessage error={firstNameError.errors}/>}\r\n                    {lastNameError.errors && <ErrorMessage error={lastNameError.errors}/>}\r\n                </MDBModalBody>\r\n                <MDBModalFooter>\r\n                    <MDBBtn className='row' color=\"secondary\" onClick={handleToggleModal}>Close</MDBBtn>\r\n                    <MDBBtn\r\n                        disabled={taskTitleError.inputStatus || taskDescriptionError.inputStatus || firstNameError.inputStatus || lastNameError.inputStatus}\r\n                        className='row'\r\n                        color=\"primary\" onClick={handleStoreTaskItem}>Create Task</MDBBtn>\r\n                </MDBModalFooter>\r\n            </MDBModal>\r\n        </>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { MDBInput } from 'mdbreact';\r\nimport \"./style.css\";\r\n\r\nexport default ({ boardOrderChange, order }) => {\r\n    return (\r\n        <MDBInput label=\"Enter Board Order\" name='board_order' type=\"text\" value={order} onChange={boardOrderChange}/>\r\n    );\r\n}\r\n\r\n","import React from 'react';\r\n\r\nexport default ({ newBoardPlaceOrder, boardsSchema }) => {\r\n    const order = isNaN(newBoardPlaceOrder) || newBoardPlaceOrder === 0 ? 1 : newBoardPlaceOrder;\r\n    return (\r\n        <div className='schema-container'>\r\n            <i style={{color: 'red', order: order, marginRight: 7}} className=\"fas fa-level-down-alt fa-3x\"/>\r\n\r\n            {boardsSchema.map((block, idx) => (\r\n                idx + 1 < order\r\n                    ?\r\n                    <div style={{order: idx + 1}} key={idx} className='block-element'>{idx + 1}</div>\r\n                    :\r\n                    <div style={{order: idx + 2}} key={idx} className='block-element'>{idx + 1}</div>\r\n                )\r\n            )}\r\n        </div>\r\n    );\r\n}","import React, {useState, useEffect, useCallback} from 'react';\r\nimport { MDBBtn, MDBModal, MDBModalBody, MDBModalHeader, MDBModalFooter, MDBInput } from 'mdbreact';\r\nimport OrderInput from \"./OrderInput\";\r\nimport ErrorMessage from \"./ErrorMessage\";\r\nimport { useAlert } from 'react-alert';\r\nimport ValidateUserBlankInput from '../../helpers/ValidateUserBlankInput';\r\nimport InsertionBoardSchema from \"./InsertionBoardSchema\";\r\n\r\nexport default ({\r\n                    boardsSchema,\r\n                    setBoardOrderState,\r\n                    createBoard,\r\n                    validateInput,\r\n                    boards,\r\n                    errors: { boardOrderError, boardTitleError }\r\n}) => {\r\n    const [modalButtonClick, setModalButtonClick] = useState(false);\r\n    const [boardTitle, setBoardTitle] = useState(\"\");\r\n    const [boardOrder, setBoardOrder] = useState(0);\r\n    const [createNewBoard, setCreateNewBoard] = useState({});\r\n    const [newBoardPlaceOrder, setNewBoardPlaceOrder] = useState(1);\r\n\r\n    const alert = useAlert();\r\n\r\n    const handleStoreBoardItem = () => {\r\n        if(ValidateUserBlankInput([boardTitle])){\r\n            alert.error(<div style={{ color: 'red', fontSize: 15 }}>Please, Fill Blank Fields...</div>, {\r\n                timeout: 5000,\r\n                onOpen: () => {\r\n                    console.log('hey')\r\n                },\r\n                onClose: () => {\r\n                    console.log('closed')\r\n                }\r\n            });\r\n        }\r\n        else{\r\n            setCreateNewBoard({\r\n                ...createNewBoard,\r\n                title: boardTitle,\r\n                order: boardOrder\r\n            });\r\n            setModalButtonClick(!modalButtonClick);\r\n            setNewBoardPlaceOrder(1);\r\n            setBoardOrderState(boards.map(board => (\r\n                {\r\n                    id: board.id,\r\n                    order: board.order,\r\n                    name: board.name\r\n                }\r\n                ))\r\n            );\r\n        }\r\n    };\r\n    const handleBoardTitleChange = e => {\r\n        const { value, name } = e.target;\r\n        validateInput(value, name);\r\n        setBoardTitle(e.target.value);\r\n    }\r\n\r\n    const handleBoardOrderChange = e => {\r\n        const { value, name } = e.target;\r\n        validateInput(value, name);\r\n        setBoardOrder(value);\r\n        setNewBoardPlaceOrder(value);\r\n    }\r\n\r\n\r\n    const stableDispatch = useCallback(createBoard, []);\r\n\r\n    useEffect(() => {\r\n        stableDispatch(createNewBoard);\r\n    }, [stableDispatch, createNewBoard]);\r\n\r\n\r\n    const handleToggleModal = () => {\r\n        setBoardTitle('');\r\n        setBoardOrder(1);\r\n        setModalButtonClick(!modalButtonClick);\r\n        setNewBoardPlaceOrder(1);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <MDBBtn className='start-modal-button' onClick={handleToggleModal}>CREATE BOARD</MDBBtn>\r\n            <MDBModal isOpen={modalButtonClick} toggle={handleToggleModal}>\r\n                <MDBModalHeader toggle={handleToggleModal}>Board Form</MDBModalHeader>\r\n                <MDBModalBody>\r\n                    <div className=\"form-group\">\r\n                        <MDBInput label=\"Enter Board Title\" name='board_title' type='text' value={boardTitle} onChange={handleBoardTitleChange} size=\"md\" />\r\n                        {boardTitleError.errors && <ErrorMessage error={boardTitleError.errors}/>}\r\n                        <InsertionBoardSchema newBoardPlaceOrder={+newBoardPlaceOrder} boardsSchema={boardsSchema}/>\r\n                        <OrderInput order={boardOrder} boardOrderChange={handleBoardOrderChange}/>\r\n                        {boardOrderError.errors && <ErrorMessage error={boardOrderError.errors}/>}\r\n                    </div>\r\n                </MDBModalBody>\r\n                <MDBModalFooter>\r\n                    <MDBBtn className='row' color=\"secondary\" onClick={handleToggleModal}>Close</MDBBtn>\r\n                    <MDBBtn disabled={boardOrderError.inputStatus || boardTitleError.inputStatus} className='row' color=\"primary\" onClick={handleStoreBoardItem}>Create Board</MDBBtn>\r\n                </MDBModalFooter>\r\n            </MDBModal>\r\n        </>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport {MDBBtn, MDBBtnGroup} from \"mdbreact\";\r\n\r\nexport default ({task: {board, id, location, priority_level, task_priority}, boardOrder, handleFindForEditTaskModal, boardLength, moveTask, deleteTask, hideTask}) => {\r\n    const boolStr = task_priority ? 'true' : 'false';\r\n    return (\r\n        <MDBBtnGroup size=\"sm\" className=\"mb-4\">\r\n            <MDBBtn\r\n                disabled={boardOrder === 0}\r\n                className='task-button'\r\n                color=\"white\"\r\n            >\r\n                <span\r\n                    id={id}\r\n                    onClick={moveTask}\r\n                    direction='left'\r\n                    location={location}\r\n                    priority_level={priority_level}\r\n                    task_priority={boolStr}\r\n                    order={boardOrder}\r\n                    name={`left-${board}`}\r\n                    className=\"fa fa-angle-double-left\"\r\n                    aria-hidden=\"true\"\r\n                >\r\n                </span>\r\n            </MDBBtn>\r\n            <MDBBtn className='task-button' color=\"white\">\r\n                <span id={id} name={board} location={location} priority_level={priority_level} onClick={hideTask}\r\n                      className=\"hide fas fa-eye-slash\" aria-hidden=\"true\"/>\r\n            </MDBBtn>\r\n            {\r\n                location === 'kanban_board'\r\n                    ?\r\n                    <>\r\n                        <MDBBtn className='task-button' color=\"white\">\r\n                            <span id={id} name={board} onClick={handleFindForEditTaskModal} className=\"edit fas fa-edit\"\r\n                                  aria-hidden=\"true\"/>\r\n                        </MDBBtn>\r\n                        <MDBBtn className='task-button' color=\"white\">\r\n                            <span id={id} name={board} onClick={deleteTask} className=\"delete fas fa-trash-alt\"\r\n                                  aria-hidden=\"true\"/>\r\n                        </MDBBtn>\r\n                    </>\r\n                    :\r\n                    null\r\n            }\r\n            <MDBBtn\r\n                className='task-button'\r\n                disabled={boardOrder === boardLength - 1}\r\n                color=\"white\"\r\n            >\r\n                <span\r\n                    id={id}\r\n                    onClick={moveTask}\r\n                    direction='right'\r\n                    location={location}\r\n                    priority_level={priority_level}\r\n                    task_priority={boolStr}\r\n                    order={boardOrder}\r\n                    name={`right-${board}`}\r\n                    className=\"fa fa-angle-double-right\"\r\n                    aria-hidden=\"true\"\r\n                >\r\n                </span>\r\n            </MDBBtn>\r\n        </MDBBtnGroup>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport ButtonGroup from \"./ButtonGroup\";\r\nimport {MDBBtn, MDBRow, MDBCol, MDBContainer, MDBModal, MDBModalBody, MDBModalFooter, MDBModalHeader} from \"mdbreact\";\r\n\r\n\r\nexport default ({task, index, listLength, boardLength, swapTasks, handleFindForEditTaskModal, boardOrder, id, moveTask, editTask, deleteTask, hideTask}) => {\r\n\r\n    const [toggleModal, setToggleModal] = useState(false);\r\n    const dragTaskStart = e => {\r\n        const target = e.target;\r\n        e.dataTransfer.setData('task', target.id);\r\n    };\r\n\r\n    const DescriptionModal = () =>\r\n        <MDBContainer>\r\n            <MDBModal isOpen={toggleModal} toggle={handleToggleDescriptionModal} size=\"fluid\">\r\n                <MDBModalHeader toggle={handleToggleDescriptionModal}>{task.task_title}</MDBModalHeader>\r\n                <MDBModalBody>\r\n                    {task.task_description}\r\n                </MDBModalBody>\r\n                <MDBModalFooter>\r\n                    <MDBBtn color=\"secondary\" onClick={handleToggleDescriptionModal}>Close</MDBBtn>\r\n                </MDBModalFooter>\r\n            </MDBModal>\r\n        </MDBContainer>\r\n\r\n    const dragTaskOver = e => {\r\n        e.stopPropagation();\r\n    };\r\n\r\n    const handleOnMouseOver = e => {\r\n        let id = e.target.id;\r\n        if(id && document.getElementById(id).querySelector(\".task-details\") !== null) document.getElementById(id).querySelector(\".task-details\").innerHTML = 'Click Here...';\r\n\r\n    }\r\n    const handleOnMouseOff = e => {\r\n        let id = e.target.id;\r\n        if(id && document.getElementById(id).querySelector(\".task-details\") !== null) document.getElementById(id).querySelector(\".task-details\").innerHTML = 'Details...';\r\n    }\r\n\r\n    const handleToggleDescriptionModal = () => setToggleModal(!toggleModal)\r\n\r\n    return (\r\n        <MDBContainer\r\n            draggable='true'\r\n            name={task.board}\r\n            id={id}\r\n            onDragStart={dragTaskStart}\r\n            onDragOver={dragTaskOver}\r\n            className=\"d-flex flex-column task-card\"\r\n        >\r\n            <MDBBtn\r\n                disabled={index === 0}\r\n                name='up'\r\n                color='white'\r\n                priority_level={task.priority_level}\r\n                location={task.location}\r\n                board={task.board}\r\n                id={id}\r\n                className='up-button'\r\n                onClick={swapTasks}\r\n            >\r\n                Up\r\n            </MDBBtn>\r\n            <MDBRow>\r\n                <MDBCol size=\"8\" style={{display: 'flex', justifyContent: 'flex-start'}}>\r\n                    <h6 className=\"task-title\">{task.task_title}</h6>\r\n                </MDBCol>\r\n                {task.task_priority && <MDBCol style={{display: 'flex', justifyContent: 'flex-end'}} className=\"priority\"><i className=\"fas fa-exclamation-triangle fa-2x\"/></MDBCol>}\r\n            </MDBRow>\r\n            <span className=\"p-2 col-example text-left task-details\"\r\n                  id={id}\r\n                  onMouseOver={handleOnMouseOver}\r\n                  onMouseLeave={handleOnMouseOff}\r\n                  onClick={handleToggleDescriptionModal}\r\n            >\r\n                <i>Details...</i>\r\n            </span>\r\n            <DescriptionModal/>\r\n            <ButtonGroup\r\n                boardLength={boardLength}\r\n                boardOrder={boardOrder}\r\n                moveTask={moveTask}\r\n                location={task.location}\r\n                editTask={editTask}\r\n                deleteTask={deleteTask}\r\n                hideTask={hideTask}\r\n                task={task}\r\n                handleFindForEditTaskModal={handleFindForEditTaskModal}\r\n            />\r\n            <MDBBtn\r\n                disabled={index === listLength - 1}\r\n                name='down'\r\n                priority_level={task.priority_level}\r\n                location={task.location}\r\n                board={task.board}\r\n                id={id}\r\n                color='white'\r\n                className='down-button'\r\n                onClick={swapTasks}>\r\n                Down\r\n            </MDBBtn>\r\n\r\n        </MDBContainer>\r\n    )\r\n}","import React from 'react';\r\nimport TaskItem from \"./TaskItem\";\r\nimport {MDBCol, MDBContainer, MDBRow} from \"mdbreact\";\r\n\r\nexport default ({\r\n                    boards,\r\n                    moveTask,\r\n                    deleteTask,\r\n                    hideTask,\r\n                    editTask,\r\n                    swapKanbanTasks,\r\n                    showTask,\r\n                    dragTask,\r\n                    deleteBoard,\r\n                    boardMessage,\r\n                    handleFindForEditTaskModal,\r\n                    setBoardOrderState\r\n                }) => {\r\n\r\n    const dropTask = e => {\r\n        e.preventDefault();\r\n        const task_id = e.dataTransfer.getData('task');\r\n        const task = document.getElementById(task_id);\r\n        setBoardOrderState(boards.map(board => (\r\n                {\r\n                    id: board.id,\r\n                    order: board.order,\r\n                    name: board.name,\r\n                    title: board.title,\r\n                    tasks: board.tasks.map(task => ({\r\n                        id: task.id,\r\n                        visibility: true,\r\n                        task_title: task.task_title,\r\n                        location: task.location,\r\n                        task_description: task.task_description,\r\n                        task_priority: task.task_priority,\r\n                        board: task.board,\r\n                        first: task.first,\r\n                        last: task.last\r\n                    }))\r\n                }\r\n            ))\r\n        );\r\n        dragTask(e.target.getAttribute('name'), task.getAttribute('name'), task_id);\r\n    };\r\n\r\n    const dragTaskOver = e => {\r\n        e.preventDefault();\r\n    };\r\n\r\n    const handleDeleteBoard = e => {\r\n        setBoardOrderState(boards.map(board => (\r\n                {\r\n                    id: board.id,\r\n                    order: board.order,\r\n                    name: board.name\r\n                }\r\n            ))\r\n        );\r\n        deleteBoard(e);\r\n    };\r\n\r\n    const boardList = (list, order, length) => list.length\r\n        ? list.map((task, id) => task.visibility\r\n            ? <TaskItem\r\n                boardLength={length}\r\n                boardOrder={order}\r\n                moveTask={moveTask}\r\n                deleteTask={deleteTask}\r\n                hideTask={hideTask}\r\n                editTask={editTask}\r\n                listLength={list.length}\r\n                swapTasks={swapKanbanTasks}\r\n                key={id}\r\n                index={id}\r\n                id={task.id}\r\n                task={task}\r\n                handleFindForEditTaskModal={handleFindForEditTaskModal}\r\n            />\r\n            : <p className='show' key={task.id}>Hidden Task... <span id={task.id} location={task.location} name={task.board} autoFocus\r\n                                                                     onClick={showTask} className='show'>SHOW</span></p>\r\n        )\r\n        : <p style={{color: 'white', textAlign: 'center'}}><i>{boardMessage}</i></p>;\r\n\r\n    return (\r\n        <MDBContainer className=\"dashboard container-fluid\">\r\n            <MDBRow className=\"kanban-row\">\r\n                {boards.map(board => (\r\n                    <MDBCol\r\n                        key={board.id}\r\n                        onDrop={dropTask}\r\n                        name={board.name}\r\n                        onDragOver={dragTaskOver}\r\n                        className=\"kanban-col\"\r\n                        md=\"3\"\r\n                    >\r\n                        <div className='board-header container'>\r\n                            <div className='row'>\r\n\r\n                                <div className='col-10'>\r\n                                    <div className='row'>\r\n                                        <span className=\"task-list-title col-9\">{board.title}</span>\r\n                                        <span className='task-quantity col-2'>{board.tasks.length}</span>\r\n                                    </div>\r\n                                </div>\r\n                                <div className='col-2'>\r\n                                    <i\r\n                                        id={board.id}\r\n                                        onClick={handleDeleteBoard}\r\n                                        className=\"far fa-calendar-times fa-2x\"/>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        {boardList(board.tasks, board.order, boards.length)}\r\n                    </MDBCol>\r\n                ))\r\n                }\r\n            </MDBRow>\r\n        </MDBContainer>\r\n    );\r\n}","import React from 'react';\r\nimport {MDBCol, MDBContainer, MDBRow} from \"mdbreact\";\r\nimport TaskItem from \"./TaskItem\";\r\n\r\nexport default ({\r\n                    priorityTasks,\r\n                    moveTask,\r\n                    deleteTask,\r\n                    hideTask,\r\n                    editTask,\r\n                    swapPriorityTasks,\r\n                    showTask,\r\n                    boardMessage,\r\n                    handleFindForEditTaskModal\r\n                }) => {\r\n\r\n    const priorityTasksList = (list, order, length) => list.length\r\n        ? list.map((task, id) => task.visibility\r\n            ? <TaskItem\r\n                boardLength={length}\r\n                boardOrder={order}\r\n                moveTask={moveTask}\r\n                deleteTask={deleteTask}\r\n                hideTask={hideTask}\r\n                editTask={editTask}\r\n                listLength={list.length}\r\n                swapTasks={swapPriorityTasks}\r\n                key={id}\r\n                index={id}\r\n                id={task.id}\r\n                task={task}\r\n                handleFindForEditTaskModal={handleFindForEditTaskModal}\r\n            />\r\n            : <p className='show' key={task.id}>Hidden Task... <span id={task.id} priority_level={task.priority_level} name={task.board} autoFocus\r\n                                                                     onClick={showTask} className='show'>SHOW</span></p>\r\n        )\r\n        : <p style={{color: 'white', textAlign: 'center'}}><i>{boardMessage}</i></p>;\r\n    return (\r\n        <MDBContainer className=\"dashboard container-fluid\">\r\n            <MDBRow className=\"kanban-row\">\r\n                {priorityTasks.map((list, idx) => (\r\n                    <MDBCol\r\n                        key={idx}\r\n                        name={list.priority_level}\r\n                        className=\"kanban-col\"\r\n                        md=\"6\"\r\n                    >\r\n                        <div className='board-header container'>\r\n                            <div className='row'>\r\n                                <div className='col-12'>\r\n                                    <div className='row'>\r\n                                        <span className=\"task-list-title col-10\">{list.priority_level.toUpperCase()} Priority List</span>\r\n                                        <span className='task-quantity col-1'>{list.tasks.length}</span>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        {priorityTasksList(list.tasks, list.order, priorityTasks.length)}\r\n                    </MDBCol>\r\n                    ))\r\n                }\r\n            </MDBRow>\r\n        </MDBContainer>\r\n    );\r\n}\r\n","import React, {useState} from 'react';\r\nimport {MDBContainer, MDBBtn, MDBModal, MDBInput, MDBModalBody, MDBModalHeader, MDBModalFooter} from 'mdbreact';\r\nimport ErrorMessage from \"../board_modal/ErrorMessage\";\r\n\r\nexport default ({\r\n                    handleToggleEditTaskModal,\r\n                    errors: {\r\n                        taskTitleError,\r\n                        taskDescriptionError,\r\n                        firstNameError,\r\n                        lastNameError\r\n                    },\r\n                    modalButtonClick,\r\n                    validateInput,\r\n                    submitNewTaskItems,\r\n                    searchEditTask\r\n                }) => {\r\n    const [editTaskItems, setEditTaskItems] = useState({\r\n        task_title: \"\",\r\n        task_description: \"\",\r\n        task_priority: false,\r\n        first: \"\",\r\n        last: \"\"\r\n    });\r\n    const [toggleTaskPriority, setToggleTaskPriority] = useState(true);\r\n    const [changeEvent, setChangeEvent] = useState(false);\r\n\r\n    const handleTogglePriorityTaskStatus = () => setToggleTaskPriority(!toggleTaskPriority);\r\n\r\n    const handleEditTaskItemChange = e => {\r\n        if (!changeEvent) setChangeEvent(true);\r\n\r\n        if (e.target.name === \"task_priority\") {\r\n            handleTogglePriorityTaskStatus();\r\n            setEditTaskItems({\r\n                ...editTaskItems,\r\n                id: searchEditTask.id,\r\n                board: searchEditTask.board,\r\n                task_priority: e.target.checked\r\n            });\r\n        } else {\r\n            setEditTaskItems({\r\n                ...editTaskItems,\r\n                id: searchEditTask.id,\r\n                board: searchEditTask.board,\r\n                [e.target.name]: e.target.value\r\n            });\r\n        }\r\n        validateInput(e.target.value, e.target.name);\r\n    };\r\n\r\n    const handleEditTaskItemsSubmit = () => {\r\n        submitNewTaskItems(editTaskItems);\r\n        handleToggleEditTaskModal();\r\n    };\r\n\r\n    return (\r\n        <MDBContainer>\r\n            <MDBModal isOpen={modalButtonClick} toggle={handleToggleEditTaskModal}>\r\n                <MDBModalHeader toggle={handleToggleEditTaskModal}>Task Edit Form</MDBModalHeader>\r\n                <MDBModalBody>\r\n                    <MDBInput type='text' name='task_title' label=\"Edit Task Title\" value={editTaskItems.title}\r\n                              onChange={handleEditTaskItemChange}/>\r\n                    {taskTitleError.errors && <ErrorMessage error={taskTitleError.errors}/>}\r\n                    <MDBContainer className='task-description'>\r\n                        <MDBInput\r\n                            value={editTaskItems.description}\r\n                            name='task_description'\r\n                            onChange={handleEditTaskItemChange}\r\n                            type=\"textarea\"\r\n                            label=\"Task Description\"\r\n                            outline\r\n                        />\r\n                    </MDBContainer>\r\n                    {taskDescriptionError.errors && <ErrorMessage error={taskDescriptionError.errors}/>}\r\n\r\n                    <div className=\"custom-control custom-checkbox\">\r\n                        <input\r\n                            name=\"task_priority\"\r\n                            checked={toggleTaskPriority}\r\n                            type=\"checkbox\"\r\n                            onChange={handleEditTaskItemChange}\r\n                            className=\"custom-control-input\"\r\n                            id=\"priority_task\"\r\n                        />\r\n                        <label className=\"custom-control-label\" htmlFor=\"priority_task\">This is Priority\r\n                            Task\r\n                        </label>\r\n                    </div>\r\n\r\n                    <MDBInput type='text' name='first' label=\"Edit Delegate First Name\"\r\n                              value={editTaskItems.first_name} onChange={handleEditTaskItemChange}/>\r\n                    {firstNameError.errors && <ErrorMessage error={firstNameError.errors}/>}\r\n                    <MDBInput type='text' name='last' label=\"Edit Delegate Last Name\"\r\n                              value={editTaskItems.last_name} onChange={handleEditTaskItemChange}/>\r\n                    {lastNameError.errors && <ErrorMessage error={lastNameError.errors}/>}\r\n                </MDBModalBody>\r\n                <MDBModalFooter>\r\n                    <MDBBtn color=\"secondary\" onClick={handleToggleEditTaskModal}>Close</MDBBtn>\r\n                    <MDBBtn\r\n                        disabled={!changeEvent || taskTitleError.inputStatus || taskDescriptionError.inputStatus || firstNameError.inputStatus || lastNameError.inputStatus}\r\n                        color=\"primary\"\r\n                        onClick={handleEditTaskItemsSubmit}\r\n                    >\r\n                        Save changes\r\n                    </MDBBtn>\r\n                </MDBModalFooter>\r\n            </MDBModal>\r\n        </MDBContainer>\r\n);\r\n}","import React from 'react';\r\nimport TaskModalPage from '../task_modal/ModalPage';\r\nimport BoardModalPage from '../board_modal/ModalPage'\r\nimport NewKanbanDashboard from \"./NewKanbanDashboard\";\r\nimport PriorityOrderedTasks from \"./PriorityOrderedTasks\";\r\nimport EditTaskModalPage from \"../edit_modal/ModalPage\";\r\nimport {MDBBtn, MDBCol, MDBContainer, MDBRow} from \"mdbreact\";\r\n\r\nexport default props => {\r\n\r\n    const listProps = {\r\n        boards: props.boards,\r\n        boardMessage: props.boardMessage,\r\n        errors: props.errors,\r\n        boardsSchema: props.boardsSchema,\r\n        priorityTasks: props.priorityTasks,\r\n        searchEditTask: props.searchEditTask,\r\n        modalButtonClick: props.modalButtonClick,\r\n        panelControlButtons: props.panelControlButtons\r\n    };\r\n    const eventProps = {\r\n        createBoard: props.createBoard,\r\n        createTask: props.createTask,\r\n        swapKanbanTasks: props.swapTasks.swapKanbanTasks,\r\n        swapPriorityTasks: props.swapTasks.swapPriorityTasks,\r\n        moveTask: props.moveTask,\r\n        deleteTask: props.deleteTask,\r\n        deleteBoard: props.deleteBoard,\r\n        filterPriorityTasks: props.filterPriorityTasks,\r\n        hideTask: props.hideTask,\r\n        showTask: props.showTask,\r\n        dragTask: props.dragTask,\r\n        submitNewTaskItems: props.submitNewTaskItems,\r\n        validateInput: props.validateInput,\r\n        resetErrors: props.resetErrors,\r\n        toggleEditModal: props.toggleEditModal,\r\n        findTaskForEdit: props.findTaskForEdit,\r\n        resetMainKanbanView: props.resetMainKanbanView,\r\n        setBoardOrderState: props.setBoardOrderState\r\n    };\r\n    return (\r\n        <div>\r\n            <MDBContainer>\r\n                <MDBRow className='kanban-header'>\r\n                    <h1>Kanban Board</h1>\r\n                </MDBRow>\r\n            </MDBContainer>\r\n            <EditTaskModalPage\r\n                errors={listProps.errors}\r\n                validateInput={eventProps.validateInput}\r\n                modalButtonClick={listProps.modalButtonClick}\r\n                handleToggleEditTaskModal={eventProps.toggleEditModal}\r\n                boards={listProps.boards}\r\n                findTaskForEdit={listProps.findTaskForEdit}\r\n                searchEditTask={listProps.searchEditTask}\r\n                submitNewTaskItems={eventProps.submitNewTaskItems}\r\n            />\r\n            <MDBContainer className=\"main-control-panel\">\r\n                <MDBRow>\r\n                    <MDBCol>\r\n                        <TaskModalPage\r\n                            errors={listProps.errors}\r\n                            validateInput={eventProps.validateInput}\r\n                            createTask={eventProps.createTask}\r\n                            resetErrors={eventProps.resetErrors}\r\n                        />\r\n                    </MDBCol>\r\n                    <MDBCol>\r\n                        <BoardModalPage\r\n                            errors={listProps.errors}\r\n                            boards={listProps.boards}\r\n                            boardsSchema={listProps.boardsSchema}\r\n                            validateInput={eventProps.validateInput}\r\n                            createBoard={eventProps.createBoard}\r\n                            deleteBoard={eventProps.deleteBoard}\r\n                            resetErrors={eventProps.resetErrors}\r\n                            setBoardOrderState={eventProps.setBoardOrderState}\r\n                        />\r\n                    </MDBCol>\r\n\r\n                    <MDBCol>\r\n                        <MDBBtn href=\"https://github.com/likejean/homework-6/issues\" className='report-issues-button' >Report Issues</MDBBtn>\r\n                    </MDBCol>\r\n                </MDBRow>\r\n                <MDBRow>\r\n                    <MDBCol>\r\n                        <MDBBtn\r\n                            disabled={listProps.panelControlButtons.kanban_board}\r\n                            onClick={eventProps.resetMainKanbanView}\r\n                            className='task-priority-button'\r\n                        >Kanban Board\r\n                        </MDBBtn>\r\n                    </MDBCol>\r\n                    <MDBCol>\r\n                        <MDBBtn\r\n                            disabled={listProps.panelControlButtons.priority_board}\r\n                            onClick={eventProps.filterPriorityTasks}\r\n                            className='task-priority-button'\r\n                        >Priority Tasks\r\n                        </MDBBtn>\r\n                    </MDBCol>\r\n                </MDBRow>\r\n\r\n            </MDBContainer>\r\n            {\r\n                listProps.panelControlButtons.kanban_board && !listProps.panelControlButtons.priority_board\r\n                ?\r\n                <NewKanbanDashboard\r\n                    boardMessage={listProps.boardMessage}\r\n                    handleFindForEditTaskModal={eventProps.findTaskForEdit}\r\n                    {...listProps}\r\n                    {...eventProps}\r\n                />\r\n                :\r\n                <PriorityOrderedTasks\r\n                    boardMessage={listProps.boardMessage}\r\n                    handleFindForEditTaskModal={eventProps.findTaskForEdit}\r\n                    {...listProps}\r\n                    {...eventProps}\r\n                />\r\n            }\r\n\r\n        </div>\r\n    )\r\n}","export default (obj) => {\r\n\r\n    // null and undefined are \"empty\"\r\n    if (obj == null) return true;\r\n\r\n    // Assume if it has a length property with a non-zero value\r\n    // that that property is correct.\r\n    if (obj.length > 0)    return false;\r\n    if (obj.length === 0)  return true;\r\n\r\n    // If it isn't an object at this point\r\n    // it is empty, but it can't be anything *but* empty\r\n    // Is it empty?  Depends on your application.\r\n    if (typeof obj !== \"object\") return true;\r\n\r\n    // Otherwise, does it have any properties of its own?\r\n    // Note that this doesn't handle\r\n    // toString and valueOf enumeration bugs in IE < 9\r\n    for (var key in obj) {\r\n        if (hasOwnProperty.call(obj, key)) return false;\r\n    }\r\n\r\n    return true;\r\n}","export default (arr, a, b) => {\r\n    let temp = arr[a];\r\n    arr[a] = arr[b];\r\n    arr[b] = temp;\r\n    return arr;\r\n}","export default (name, value, length) => {\r\n    const titleFormat = /^[0-9A-Za-z\\s]+$/;\r\n    const personNameFormat = /^[a-zA-Z]+$/;\r\n    switch (name) {\r\n        case 'board_order':\r\n            return {\r\n                errors:\r\n                    isNaN(value) || value === \"\"\r\n                        ? 'Input must be an INTEGER!'\r\n                        : parseInt(value) <= 0\r\n                        ? 'Must be greater than zero!'\r\n                        : parseInt(value) > length + 1\r\n                            ? `Must be less or equal ${length + 1}!`\r\n                            : '',\r\n                inputStatus:\r\n                    isNaN(value) || value === \"\" || parseInt(value) <= 0 || parseInt(value) > length + 1\r\n            };\r\n        case 'board_title':\r\n            return {\r\n                errors:\r\n                    !value.match(titleFormat)\r\n                        ? 'Please, input alphanumeric characters only!'\r\n                        : value.length > 10\r\n                            ? 'This title is too long'\r\n                            : '',\r\n                inputStatus:\r\n                    !value.match(titleFormat) || value.length > 10\r\n            };\r\n        case 'task_title':\r\n            return {\r\n                errors:\r\n                    !value.match(titleFormat)\r\n                        ? 'Please, input alphanumeric characters only!'\r\n                        : value.length > 13\r\n                        ? 'This title is too long'\r\n                        : '',\r\n                inputStatus:\r\n                    !value.match(titleFormat) || value.length > 13\r\n            };\r\n        case 'task_description':\r\n            return {\r\n                errors:\r\n                    value.length >= 100\r\n                        ? 'Description must be less than 100 characters'\r\n                        : '',\r\n                inputStatus:\r\n                    value.length >= 100\r\n            };\r\n        case 'first':\r\n            return {\r\n                errors:\r\n                    !value.match(personNameFormat)\r\n                        ? 'Please, input alphabetical characters only!'\r\n                        : value.length < 3\r\n                        ? 'First name is too short'\r\n                        : '',\r\n                inputStatus:\r\n                    !value.match(personNameFormat) || value.length < 3\r\n            };\r\n        case 'last':\r\n            return {\r\n                errors:\r\n                    !value.match(personNameFormat)\r\n                        ? 'Please, input alphabetical characters only!'\r\n                        : value.length < 3\r\n                        ? 'Last name is too short'\r\n                        : '',\r\n                inputStatus:\r\n                    !value.match(personNameFormat) || value.length < 3\r\n            };\r\n        default:\r\n            return {\r\n                errors : '',\r\n                inputStatus: false\r\n            }\r\n    }\r\n}\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport Main from './components/main';\r\nimport '@fortawesome/fontawesome-free/css/all.min.css';\r\nimport 'bootstrap-css-only/css/bootstrap.min.css';\r\nimport 'mdbreact/dist/css/mdb.css';\r\nimport uuid from 'react-uuid';\r\nimport './App.css';\r\nimport isEmpty from './helpers/EmptyObject';\r\nimport SwapArrayElements from \"./helpers/SwapArrayElements\";\r\nimport ValidateUserInput from \"./helpers/ValidateUserInputChange\";\r\n\r\nconst initialBoards = [\r\n    {\r\n        name: 'todo',\r\n        order: 0,\r\n        title: 'To-Do',\r\n        id: uuid(),\r\n        tasks: []\r\n    },\r\n    {\r\n        name: 'in-progress',\r\n        order: 1,\r\n        title: 'In-Progress',\r\n        id: uuid(),\r\n        tasks: []\r\n\r\n    },\r\n    {\r\n        name: 'review',\r\n        order: 2,\r\n        title: 'To-Review',\r\n        id: uuid(),\r\n        tasks: []\r\n\r\n    },\r\n    {\r\n        name: 'done',\r\n        order: 3,\r\n        title: 'Completed',\r\n        id: uuid(),\r\n        tasks: []\r\n    },\r\n    {\r\n        name: 'extra',\r\n        order: 3,\r\n        title: 'Extra',\r\n        id: uuid(),\r\n        tasks: []\r\n    }\r\n];\r\n\r\nconst initialPriorityTaskList = [\r\n    {\r\n        priority_level: 'high',\r\n        id: uuid(),\r\n        tasks: []\r\n    },\r\n    {\r\n        priority_level: 'low',\r\n        id: uuid(),\r\n        tasks: []\r\n    }\r\n]\r\n\r\nconst initialErrors = {\r\n    boardTitleError: {\r\n        errors: '',\r\n        inputStatus: false\r\n    },\r\n    taskTitleError: {\r\n        errors: '',\r\n        inputStatus: false\r\n    },\r\n    boardOrderError: {\r\n        errors: '',\r\n        inputStatus: false\r\n    },\r\n    taskDescriptionError: {\r\n        errors: '',\r\n        inputStatus: false\r\n    },\r\n    firstNameError: {\r\n        errors: '',\r\n        inputStatus: false\r\n    },\r\n    lastNameError: {\r\n        errors: '',\r\n        inputStatus: false\r\n    }\r\n}\r\n\r\nconst URI_local = 'http://localhost:8080';\r\nconst URI_heroku = 'https://rest-api-server-kanban.herokuapp.com';\r\n\r\nfunction KanbanBoard() {\r\n\r\n    const [note, setNote] = useState(\"\");\r\n    const [boards, setBoards] = useState(initialBoards);\r\n    const [inputErrors, setInputErrors] = useState(initialErrors);\r\n    const [boardsSchema, setBoardsSchema] = useState([]);\r\n    const [priorityTasks, setPriorityTasks] = useState(initialPriorityTaskList);\r\n    const [editModalButtonClick, setEditModalButtonClick] = useState(false);\r\n    const [searchEditTask, setSearchEditTask] = useState({});\r\n    const [panelControlButtons, setPanelControlButtons] = useState({\r\n        kanban_board: true,\r\n        priority_board: false\r\n    });\r\n\r\n    //Pull the latest board order from the child component...\r\n    const boardsRef = useRef();\r\n    const setBoardOrderState = data => {\r\n        boardsRef.current = data;\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        async function getData() {\r\n            const res = await fetch(`${URI_heroku}/boards`);\r\n            res.json()\r\n                .then(data => {\r\n                    setBoards(data.boards.map(board => (\r\n                            {\r\n                                id: board._id,\r\n                                order: board.order,\r\n                                name: board.name,\r\n                                title: board.title,\r\n                                tasks: board.tasks.map(task => ({\r\n                                    id: task._id,\r\n                                    visibility: true,\r\n                                    task_title: task.title,\r\n                                    location: task.location,\r\n                                    task_description: task.description,\r\n                                    task_priority: task.priority,\r\n                                    board: task.board,\r\n                                    first: task.first,\r\n                                    last: task.last\r\n                                }))\r\n                            }\r\n                        ))\r\n                    );\r\n                    setBoards(boards => boards.sort((a, b) => a.order - b.order));\r\n                    setBoardsSchema([...Array(data.boards.length).keys()]);\r\n\r\n                })\r\n                .catch(err => console.log(err));\r\n        }\r\n\r\n        getData()\r\n            .then(() => console.log('Successfully rendered!'))\r\n            .catch(() => console.log('Rendering failed'));\r\n    }, []);\r\n\r\n\r\n    const handleFindForEditTaskModal = e => {\r\n        const name = e.target.getAttribute('name');\r\n        const id = e.target.id;\r\n        if (id) setSearchEditTask(boards.find(board => board.name === name).tasks.find(task => task.id === id));\r\n        setEditModalButtonClick(!editModalButtonClick);\r\n    }\r\n\r\n    const handleToggleEditTaskModal = () => setEditModalButtonClick(!editModalButtonClick);\r\n\r\n    const handleCreateNewBoard2 = board => {\r\n        const index = board.order - 1;\r\n\r\n        if (!isEmpty(board)) {\r\n            // setBoards(boards => [\r\n            //     ...boards.slice(0, index),\r\n            //     Object.assign({},\r\n            //         {\r\n            //             ...board,\r\n            //             id: uuid(),\r\n            //             name: board.title.toLowerCase(),\r\n            //             tasks: []\r\n            //         }),\r\n            //     ...boards.slice(index)\r\n            // ]);\r\n            // setBoards(boards => boards.map((board, id) => ({...board, order: id})));\r\n            // setBoardOrder([\r\n            //     ...boardOrder.slice(0, index),\r\n            //     Object.assign({},\r\n            //         {\r\n            //             id: '',\r\n            //             order: index\r\n            //         }),\r\n            //     ...boardOrder.slice(index)\r\n            // ]);\r\n\r\n            fetch(`${URI_heroku}/boards`, {\r\n                method: 'POST',\r\n                headers: {'Content-Type': 'application/json'},\r\n                body: JSON.stringify({\r\n                    ...board,\r\n                    order: index,\r\n                    name: board.title.toLowerCase()\r\n                })\r\n            })\r\n                .then(response => response.json())\r\n                .then(data => {\r\n                    const board = data.createdBoard;\r\n                    console.log(board);\r\n                    setBoards(boards => [\r\n                        ...boards.slice(0, index),\r\n                        Object.assign({},\r\n                            {\r\n                                ...board,\r\n                                order: index\r\n                            }),\r\n                        ...boards.slice(index)\r\n                    ]);\r\n                    setBoards(boards => boards.map((board, id) =>\r\n                        board.order <= id ?\r\n                            {\r\n                                ...board,\r\n                                order: id\r\n                            }\r\n                            :\r\n                            {\r\n                                ...board,\r\n                                order: id + 1\r\n                            }\r\n                    ));\r\n\r\n\r\n                    return [\r\n                        ...boardsRef.current.slice(0, index),\r\n                        Object.assign({},\r\n                            {\r\n                                id: board.id,\r\n                                order: board.order,\r\n                                name: board.name\r\n                            }),\r\n                        ...boardsRef.current.slice(index)\r\n                    ].map((board, id) =>\r\n                        board.order <= id ?\r\n                            {\r\n                                ...board,\r\n                                order: id\r\n                            }\r\n                            :\r\n                            {\r\n                                ...board,\r\n                                order: id + 1\r\n                            }\r\n                    );\r\n                })\r\n                .then(data => {\r\n                    console.log('hey!');\r\n                    console.log('response', data);\r\n                    fetch(`${URI_heroku}/boards`, {\r\n                        method: 'PATCH',\r\n                        headers: {'Content-Type': 'application/json'},\r\n                        body: JSON.stringify(data)\r\n                    })\r\n                        .then(response => console.log(response))\r\n                        .catch(err => {\r\n                            console.log(err)\r\n                        })\r\n                })\r\n                .catch(err => {\r\n                    console.log(err);\r\n                });\r\n        }\r\n        setBoardsSchema(boardsSchema => [...boardsSchema].concat(boardsSchema.length));\r\n    };\r\n\r\n\r\n    const handleValidateUserInput2 = (input, name) => {\r\n        if (name === 'board_order') setInputErrors(inputErrors => ({\r\n            ...inputErrors,\r\n            boardOrderError: ValidateUserInput(name, input, boards.length)\r\n        }));\r\n        if (name === 'board_title') setInputErrors(inputErrors => ({\r\n            ...inputErrors,\r\n            boardTitleError: ValidateUserInput(name, input, boards.length)\r\n        }));\r\n        if (name === 'task_title') setInputErrors(inputErrors => ({\r\n            ...inputErrors,\r\n            taskTitleError: ValidateUserInput(name, input, boards.length)\r\n        }));\r\n        if (name === 'task_description') setInputErrors(inputErrors => ({\r\n            ...inputErrors,\r\n            taskDescriptionError: ValidateUserInput(name, input, boards.length)\r\n        }));\r\n        if (name === 'first') setInputErrors(inputErrors => ({\r\n            ...inputErrors,\r\n            firstNameError: ValidateUserInput(name, input, boards.length)\r\n        }));\r\n        if (name === 'last') setInputErrors(inputErrors => ({\r\n            ...inputErrors,\r\n            lastNameError: ValidateUserInput(name, input, boards.length)\r\n        }));\r\n    };\r\n\r\n    const handleGeneratePriorityTasksList2 = () => {\r\n        setPriorityTasks(initialPriorityTaskList);\r\n        boards.map((board) => (\r\n                board.tasks.forEach(task => {\r\n                    if (task.task_priority) return setPriorityTasks(priorityTasks =>\r\n                        priorityTasks.map(list => list.priority_level === 'high'\r\n                            ?\r\n                            {\r\n                                ...list,\r\n                                tasks: list.tasks.concat({\r\n                                    ...task,\r\n                                    location: 'priority_list',\r\n                                    priority_level: 'high'\r\n                                })\r\n                            }\r\n                            :\r\n                            list\r\n                        ));\r\n                    else return setPriorityTasks(priorityTasks =>\r\n                        priorityTasks.map(list => list.priority_level === 'low'\r\n                            ?\r\n                            {\r\n                                ...list,\r\n                                tasks: list.tasks.concat({\r\n                                    ...task,\r\n                                    location: 'priority_list',\r\n                                    priority_level: 'low'\r\n                                })\r\n                            }\r\n                            :\r\n                            list\r\n                        ));\r\n                })\r\n            )\r\n        );\r\n        setPanelControlButtons({\r\n                kanban_board: false,\r\n                priority_board: true\r\n            }\r\n        );\r\n    };\r\n\r\n    const handleResetMainKanbanView = () => setPanelControlButtons({\r\n            kanban_board: true,\r\n            priority_board: false\r\n        }\r\n    );\r\n\r\n    const handleResetAllErrors2 = () => setInputErrors(initialErrors);\r\n\r\n    const handleSubmitNewTaskItems2 = revised_task => {\r\n        fetch(`${URI_heroku}/tasks/${revised_task.id}`, {\r\n            method: 'PATCH',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify(revised_task)\r\n        })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                console.log(data);\r\n                const new_task = data.updatedTask;\r\n                console.log('task', new_task)\r\n                setBoards(boards => boards.map(board =>\r\n                    board.name === new_task.board\r\n                        ?\r\n                        {\r\n                            ...board,\r\n                            tasks: board.tasks.map(old_task =>\r\n                                old_task.id === new_task.id\r\n                                    ?\r\n                                    {\r\n                                        ...old_task,\r\n                                        ...new_task\r\n                                    }\r\n                                    :\r\n                                    old_task\r\n                            )\r\n                        }\r\n                        :\r\n                        board\r\n                ));\r\n            }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    };\r\n\r\n    const handleDeleteBoard2 = e => {\r\n        const data = boardsRef.current\r\n            .filter(board => board.id !== e.target.id)\r\n            .map((board, id) => ({ ...board, order:id }));\r\n        console.log(data);\r\n        fetch(`${URI_heroku}/boards/${e.target.id}`, {\r\n            method: 'DELETE',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify(data)\r\n        })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                console.log(data);\r\n                const { id } = data.deletedBoard;\r\n                setBoards(boards => boards.filter(board => board.id !== id));\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n        setBoards(boards => boards.map((board, id) => ({...board, order: id})));\r\n        setBoardsSchema(boardsSchema => [...boardsSchema].filter(elem => elem !== boards.length - 1));\r\n\r\n    };\r\n\r\n    const handleCreateNewTask2 = task => {\r\n        if (isEmpty(task) !== true) {\r\n            fetch(`${URI_heroku}/tasks`, {\r\n                method: 'POST',\r\n                headers: {'Content-Type': 'application/json'},\r\n                body: JSON.stringify({...task, board: 'todo'})\r\n            })\r\n                .then(response => response.json())\r\n                .then(data => {\r\n                    const task = data.createdTask;\r\n                    setBoards(boards => boards.map(board =>\r\n                        board.name === task.board\r\n                            ?\r\n                            {\r\n                                ...board,\r\n                                tasks: board.tasks.concat(\r\n                                    {\r\n                                        id: task._id,\r\n                                        visibility: true,\r\n                                        task_title: task.title,\r\n                                        location: task.location,\r\n                                        task_description: task.description,\r\n                                        task_priority: task.priority,\r\n                                        board: task.board,\r\n                                        first: task.first,\r\n                                        last: task.last\r\n                                    }\r\n                                )\r\n                            }\r\n                            :\r\n                            board\r\n                    ));\r\n                })\r\n                .catch(err => {\r\n                    console.log(err);\r\n                });\r\n        } else setNote('This list is empty');\r\n    };\r\n\r\n    const handleSwapTasksWithinKanbanBoard2 = e => {\r\n        const task_id = e.target.id;\r\n        const direction = e.target.getAttribute('name');\r\n        const board_name = e.target.getAttribute('board');\r\n\r\n        setBoards(boards => [...boards].map(board => {\r\n            if (board.name === board_name) {\r\n                const index1 = board.tasks.findIndex(task => task.id === task_id);\r\n                const tasks = direction === 'up'\r\n                    ? SwapArrayElements(board.tasks, index1, index1 - 1)\r\n                    : SwapArrayElements(board.tasks, index1, index1 + 1)\r\n                return {...board, tasks}\r\n            } else {\r\n                return board;\r\n            }\r\n        }));\r\n    };\r\n\r\n    const handleSwapTasksWithinPriorityList2 = e => {\r\n        const task_id = e.target.id;\r\n        const direction = e.target.getAttribute('name');\r\n        const list_priority_level = e.target.getAttribute('priority_level');\r\n\r\n        setPriorityTasks(priorityTasks => [...priorityTasks].map(list => {\r\n            if (list.priority_level === list_priority_level) {\r\n                const index1 = list.tasks.findIndex(task => task.id === task_id);\r\n                const tasks = direction === 'up'\r\n                    ? SwapArrayElements(list.tasks, index1, index1 - 1)\r\n                    : SwapArrayElements(list.tasks, index1, index1 + 1)\r\n                return {...list, tasks}\r\n            } else {\r\n                return list;\r\n            }\r\n        }));\r\n    };\r\n\r\n\r\n    const handleMoveTaskBetweenBoards2 = e => {\r\n        const id = e.target.getAttribute('id');\r\n        const direction = e.target.getAttribute('direction');\r\n        const boardOrder = e.target.getAttribute('order');\r\n        const location = e.target.getAttribute('location');\r\n        const task_priority = e.target.getAttribute('task_priority');\r\n\r\n        let isTrueSet = (task_priority === 'true');\r\n        let movingTask;\r\n        location === 'kanban_board'\r\n            ?\r\n            movingTask = boards.find(board => board.order === parseInt(boardOrder)).tasks.find(task => task.id === id)\r\n            :\r\n            movingTask = priorityTasks.find(list => list.order === parseInt(boardOrder)).tasks.find(task => task.id === id);\r\n\r\n        ///remove a task....\r\n\r\n        location === 'kanban_board'\r\n            ?\r\n            setBoards(boards => boards.map(board =>\r\n                    board.order === parseInt(boardOrder)\r\n                        ?\r\n                        {\r\n                            ...board,\r\n                            tasks: board.tasks.filter(task => task.id !== id)\r\n                        }\r\n                        :\r\n                        board\r\n                )\r\n            )\r\n            :\r\n            setPriorityTasks(priorityTasks => priorityTasks.map(list =>\r\n                    list.order === parseInt(boardOrder)\r\n                        ?\r\n                        {\r\n                            ...list,\r\n                            tasks: list.tasks.filter(task => task.id !== id)\r\n                        }\r\n                        :\r\n                        list\r\n                )\r\n            );\r\n\r\n\r\n        ////Add a task......\r\n\r\n        location === 'kanban_board'\r\n            ?\r\n            direction === 'right'\r\n                ?\r\n                setBoards(boards => boards.map(board =>\r\n                        board.order === parseInt(boardOrder) + 1\r\n                            ?\r\n                            {\r\n                                ...board,\r\n                                tasks: board.tasks.concat({...movingTask, board: board.name})\r\n                            }\r\n                            : board\r\n                    )\r\n                )\r\n                :\r\n                setBoards(boards => boards.map(board =>\r\n                        board.order === parseInt(boardOrder) - 1\r\n                            ?\r\n                            {\r\n                                ...board,\r\n                                tasks: board.tasks.concat({...movingTask, board: board.name})\r\n                            }\r\n                            : board\r\n                    )\r\n                )\r\n            :\r\n            direction === 'right'\r\n                ?\r\n                setPriorityTasks(priorityList => priorityList.map(list =>\r\n                        list.order === parseInt(boardOrder) + 1\r\n                            ?\r\n                            {\r\n                                ...list,\r\n                                tasks: list.tasks.concat({\r\n                                    ...movingTask,\r\n                                    priority_level: list.priority_level,\r\n                                    task_priority: false\r\n                                })\r\n                            }\r\n                            : list\r\n                    )\r\n                )\r\n                :\r\n                setPriorityTasks(priorityList => priorityList.map(list =>\r\n                        list.order === parseInt(boardOrder) - 1\r\n                            ?\r\n                            {\r\n                                ...list,\r\n                                tasks: list.tasks.concat({\r\n                                    ...movingTask,\r\n                                    priority_level: list.priority_level,\r\n                                    task_priority: true\r\n                                })\r\n                            }\r\n                            : list\r\n                    )\r\n                );\r\n        if (movingTask.location === 'priority_list')\r\n            setBoards(boards => [...boards].map(board =>\r\n                board.name === movingTask.board\r\n                    ?\r\n                    {\r\n                        ...board,\r\n                        tasks: board.tasks.map(task =>\r\n                            task.id === movingTask.id\r\n                                ?\r\n                                {\r\n                                    ...task,\r\n                                    task_priority: !isTrueSet\r\n                                }\r\n                                :\r\n                                task\r\n                        )\r\n                    }\r\n                    : board\r\n            ));\r\n        fetch(`${URI_heroku}/boards/${id}`, {\r\n            method: 'PATCH',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({\r\n                moveOutBoard: +boardOrder,\r\n                moveInBoard: direction === 'left' ? +boardOrder - 1 : +boardOrder + 1\r\n            })\r\n        })\r\n            .then(response => console.log(response))\r\n            .catch(err => console.log(err));\r\n    };\r\n\r\n    const handleDragAndDrop2 = (board_name, task_name, id) => {\r\n        const dragTask = boardsRef.current.find(board => board.name === task_name).tasks.find(task => task.id === id);\r\n\r\n        setBoards(boards => boards.map(board =>\r\n                board.name === task_name && board_name !== null\r\n                    ?\r\n                    {\r\n                        ...board,\r\n                        tasks: board.tasks.filter(task => task.id !== id)\r\n                    }\r\n                    :\r\n                    board\r\n            )\r\n        );\r\n        setBoards(boards => boards.map(board =>\r\n                board.name === board_name\r\n                    ?\r\n                    {\r\n                        ...board,\r\n                        tasks: board.tasks.concat({...dragTask, board: board.name})\r\n                    }\r\n                    : board\r\n            )\r\n        );\r\n\r\n        fetch(`${URI_heroku}/boards/${id}`, {\r\n            method: 'PATCH',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({\r\n                moveOutBoard: +boardsRef.current.find(board => board.name === task_name).order,\r\n                moveInBoard: +boardsRef.current.find(board => board.name === board_name).order\r\n            })\r\n        })\r\n            .then(response => console.log(response))\r\n            .catch(err => console.log(err));\r\n\r\n    };\r\n\r\n    const handleDeleteTaskItem2 = e => {\r\n        fetch(`${URI_heroku}/tasks/${e.target.id}`, {\r\n            method: 'DELETE',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({\r\n                id: e.target.id,\r\n                board: e.target.getAttribute('name')\r\n            })\r\n        })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                const {deletedTask: {id, board_name}} = data;\r\n                setBoards(boards => boards.map(board =>\r\n                    board.name === board_name\r\n                        ?\r\n                        {\r\n                            ...board,\r\n                            tasks: board.tasks.filter(task => task.id !== id)\r\n                        }\r\n                        :\r\n                        board\r\n                ));\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n        if (priorityTasks.length > 0) setPriorityTasks(priorityTasks.filter(task => task.id !== e.target.id));\r\n    };\r\n\r\n    const handleShowTaskItem2 = e => {\r\n        let visible;\r\n        const id = e.target.getAttribute('id');\r\n        const name = e.target.getAttribute('name');\r\n        const className = e.target.getAttribute('class').split(\" \")[0];\r\n        const location = e.target.getAttribute('location');\r\n        const priority_level = e.target.getAttribute('priority_level');\r\n        className === 'show' ? visible = true : visible = false;\r\n        location === 'kanban_board'\r\n            ?\r\n            setBoards(boards => boards.map(board =>\r\n                    board.name === name\r\n                        ?\r\n                        {\r\n                            ...board,\r\n                            tasks: board.tasks.map(task => task.id === id\r\n                                ?\r\n                                {\r\n                                    ...task,\r\n                                    visibility: visible\r\n                                }\r\n                                :\r\n                                task\r\n                            )\r\n                        }\r\n                        :\r\n                        board\r\n                )\r\n            )\r\n            :\r\n            setPriorityTasks(priorityTasks => priorityTasks.map(list =>\r\n                    list.priority_level === priority_level\r\n                        ?\r\n                        {\r\n                            ...list,\r\n                            tasks: list.tasks.map(task => task.id === id\r\n                                ?\r\n                                {\r\n                                    ...task,\r\n                                    visibility: visible\r\n                                }\r\n                                :\r\n                                task\r\n                            )\r\n                        }\r\n                        :\r\n                        list\r\n                )\r\n            )\r\n    };\r\n\r\n/////////////////////////////////////////////////////////////////\r\n////////////////////////////////////////////////////////////////////\r\n\r\n\r\n    const handleEventProps = {\r\n        createBoard: handleCreateNewBoard2,\r\n        createTask: handleCreateNewTask2,\r\n        moveTask: handleMoveTaskBetweenBoards2,\r\n        dragTask: handleDragAndDrop2,\r\n        deleteTask: handleDeleteTaskItem2,\r\n        hideTask: handleShowTaskItem2,\r\n        showTask: handleShowTaskItem2,\r\n        submitNewTaskItems: handleSubmitNewTaskItems2,\r\n        deleteBoard: handleDeleteBoard2,\r\n        validateInput: handleValidateUserInput2,\r\n        resetErrors: handleResetAllErrors2,\r\n        setBoardOrderState: setBoardOrderState,\r\n        swapTasks: {\r\n            swapKanbanTasks: handleSwapTasksWithinKanbanBoard2,\r\n            swapPriorityTasks: handleSwapTasksWithinPriorityList2\r\n        },\r\n        swapPriorityTasks: handleSwapTasksWithinPriorityList2,\r\n        filterPriorityTasks: handleGeneratePriorityTasksList2,\r\n        toggleEditModal: handleToggleEditTaskModal,\r\n        findTaskForEdit: handleFindForEditTaskModal,\r\n        resetMainKanbanView: handleResetMainKanbanView\r\n\r\n    };\r\n\r\n    const handleStateProps = {\r\n        boards: boards,\r\n        priorityTasks: priorityTasks,\r\n        boardMessage: note,\r\n        errors: inputErrors,\r\n        boardsSchema: boardsSchema,\r\n        searchEditTask: searchEditTask,\r\n        modalButtonClick: editModalButtonClick,\r\n        panelControlButtons: panelControlButtons\r\n    };\r\n\r\n    return <Main {...handleEventProps} {...handleStateProps} />\r\n\r\n}\r\n\r\nexport default KanbanBoard;","import React from 'react';\nimport KanbanBoard from './KanbanBoard';\n\nexport default () => {\n    return (\n        <div className='container'>\n            <KanbanBoard/>\n        </div>\n    )\n};\n","import { transitions, positions } from 'react-alert';\r\n\r\nexport const options = {\r\n    position: positions.TOP_CENTER,\r\n    timeout: 5000,\r\n    offset: '20px',\r\n    containerStyle: {\r\n        zIndex: 9999,\r\n    },\r\n    transition: transitions.SCALE\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider as AlertProvider} from 'react-alert';\nimport App from './App';\nimport {options} from './helpers/AlertOptions';\nimport AlertTemplate from 'react-alert-template-basic';\n\nReactDOM.render(\n        <AlertProvider template={AlertTemplate} {...options}>\n            <App/>\n        </AlertProvider>,\n    document.getElementById('root'));\n\n"],"sourceRoot":""}