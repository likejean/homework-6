{"version":3,"sources":["components/main/LoadingComponent.js","components/board_modal/OrderInput.js","components/board_modal/ErrorMessage.js","helpers/ValidateUserBlankInput.js","components/board_modal/InsertionBoardSchema.js","components/board_modal/InsertBoardModalPage.js","components/auth/LoginForm.js","components/auth/ModalPage.js","components/main/ButtonGroup.js","components/main/TaskItem.js","components/task_modal/InputForm.js","components/task_modal/DescriptionTaskInput.js","components/task_modal/ToggleSwitchPriority.js","components/task_modal/ModalPage.js","components/board_modal/AddBoardModalPage.js","components/main/NewKanbanDashboard.js","components/main/PriorityOrderedTasks.js","components/edit_modal/ModalPage.js","components/main/ServerNotifications.js","components/main/index.js","helpers/EmptyObject.js","helpers/SwapArrayElements.js","helpers/ValidateUserInputChange.js","KanbanBoard.js","App.js","helpers/AlertOptions.js","index.js"],"names":["type","color","delay","height","width","boardOrderChange","order","label","name","value","onChange","error","arr","some","input","newBoardPlaceOrder","boardsSchema","isNaN","className","style","marginRight","map","block","idx","key","setBoardOrderState","insertBoard","validateInput","boards","errors","boardOrderError","boardTitleError","useState","modalButtonClick","setModalButtonClick","boardTitle","setBoardTitle","boardOrder","setBoardOrder","createNewBoard","setCreateNewBoard","setNewBoardPlaceOrder","alert","useAlert","stableDispatch","useCallback","useEffect","handleToggleModal","onClick","isOpen","toggle","e","target","size","ErrorMessage","InsertionBoardSchema","OrderInput","disabled","inputStatus","ValidateUserBlankInput","fontSize","timeout","onOpen","console","log","onClose","title","board","id","userLoginAuth","email","password","userLoginCredentials","setUserLoginCredentials","handleUserLoginInputs","center","md","htmlFor","LoginForm","task","location","task_title","priority_level","task_priority","login","handleFindForEditTaskModal","boardLength","moveTask","deleteTask","hideTask","boolStr","direction","aria-hidden","index","listLength","swapTasks","editTask","toggleModal","setToggleModal","DescriptionModal","handleToggleDescriptionModal","task_description","draggable","onDragStart","dataTransfer","setData","onDragOver","stopPropagation","display","justifyContent","onMouseOver","document","getElementById","querySelector","innerHTML","onMouseLeave","ButtonGroup","handleDelegateNameChange","fullname","marginBottom","prepend","inputs","noTag","first","getAttribute","last","description","descriptionInputChange","outline","SwitchButton","props","state","checked","handleChange","bind","this","setState","switchPriority","marginLeft","Component","createTask","resetErrors","board_name","taskTitleError","taskDescriptionError","firstNameError","lastNameError","taskTitle","setTaskTitle","taskDescription","setTaskDescription","highTaskPriority","setHighTaskPriority","delegateName","setDelegateName","createNewTask","setCreateNewTask","zIndex","DescriptionTaskInput","InputForm","attribute","addBoard","length","userLogin","swapKanbanTasks","showTask","dragTask","deleteBoard","boardMessage","dropTask","preventDefault","task_id","getData","tasks","visibility","dragTaskOver","handleDeleteBoard","onDrop","list","TaskItem","autoFocus","textAlign","AddBoardModalPage","priorityTasks","swapPriorityTasks","toUpperCase","priorityTasksList","handleToggleEditTaskModal","submitNewTaskItems","searchEditTask","editTaskItems","setEditTaskItems","toggleTaskPriority","setToggleTaskPriority","changeEvent","setChangeEvent","handleEditTaskItemChange","first_name","last_name","serverNote","resetServerNotes","autohide","bodyClassName","closeClassName","fade","icon","iconClassName","message","show","titleClassName","listProps","loading","panelControlButtons","eventProps","filterPriorityTasks","toggleEditModal","findTaskForEdit","resetMainKanbanView","marginTop","InsertBoardModalPage","href","kanban_board","priority_board","ServerNotifications","NewKanbanDashboard","PriorityOrderedTasks","obj","hasOwnProperty","call","a","b","temp","titleFormat","personNameFormat","parseInt","match","initialPriorityTaskList","uuid","initialErrors","URI_heroku","KanbanBoard","note","setNote","setLoading","setBoards","setUserLogin","inputErrors","setInputErrors","setBoardsSchema","setPriorityTasks","editModalButtonClick","setEditModalButtonClick","setSearchEditTask","setPanelControlButtons","serverResponseNote","setServerResponseNote","boardsRef","useRef","fetch","json","then","data","_id","priority","sort","Array","keys","catch","err","store","JSON","parse","localStorage","getItem","token","jwt","decode","now","Date","expiryDate","getTime","isExpired","clear","handleSwapTasksWithinPriorityList2","list_priority_level","index1","findIndex","SwapArrayElements","handleShowTaskItem2","visible","split","handleEventProps","isEmpty","bearer","method","headers","body","stringify","toLowerCase","response","result","createdBoard","slice","Object","assign","concat","current","Error","createdTask","movingTask","isTrueSet","find","filter","priorityList","moveOutBoard","moveInBoard","task_name","deletedTask","revised_task","new_task","updatedTask","old_task","deletedBoard","elem","ValidateUserInput","credentials","warn","setItem","birthDate","tokenLife","exp","forEach","handleStateProps","options","position","positions","TOP_CENTER","offset","containerStyle","transition","transitions","SCALE","ReactDOM","render","template","AlertTemplate"],"mappings":"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","file":"static/js/main.8380abdd.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactLoading from 'react-loading';\r\n\r\nexport default ({ type, color, delay, height, width }) => (\r\n    <ReactLoading\r\n        type={type}\r\n        color={color}\r\n        delay={delay}\r\n        height={height}\r\n        width={width}\r\n    />\r\n);\r\n","import React from \"react\";\r\nimport { MDBInput } from 'mdbreact';\r\nimport \"./style.css\";\r\n\r\nexport default ({ boardOrderChange, order }) => {\r\n    return (\r\n        <MDBInput label=\"Enter Board Order\" name='board_order' type=\"text\" value={order} onChange={boardOrderChange}/>\r\n    );\r\n}\r\n\r\n","import React from 'react';\r\nimport { MDBContainer, MDBAlert } from 'mdbreact';\r\n\r\nexport default ({ error }) => (\r\n        <MDBContainer>\r\n            <MDBAlert color=\"danger\" >\r\n                {error}\r\n            </MDBAlert>\r\n        </MDBContainer>\r\n    );\r\n\r\n","export default arr => arr.some(input => input === \" \" || input === \"\" || input == null);","import React from 'react';\r\n\r\nexport default ({ newBoardPlaceOrder, boardsSchema }) => {\r\n    const order = isNaN(newBoardPlaceOrder) || newBoardPlaceOrder === 0 ? 1 : newBoardPlaceOrder;\r\n    return (\r\n        <div className='schema-container'>\r\n            <i style={{color: 'red', order: order, marginRight: 7}} className=\"fas fa-level-down-alt fa-3x\"/>\r\n\r\n            {boardsSchema.map((block, idx) => (\r\n                idx + 1 < order\r\n                    ?\r\n                    <div style={{order: idx + 1}} key={idx} className='block-element'>{idx + 1}</div>\r\n                    :\r\n                    <div style={{order: idx + 2}} key={idx} className='block-element'>{idx + 1}</div>\r\n                )\r\n            )}\r\n        </div>\r\n    );\r\n}","import React, {useState, useEffect, useCallback} from 'react';\r\nimport { MDBBtn, MDBModal, MDBModalBody, MDBModalHeader, MDBModalFooter, MDBInput } from 'mdbreact';\r\nimport OrderInput from \"./OrderInput\";\r\nimport ErrorMessage from \"./ErrorMessage\";\r\nimport { useAlert } from 'react-alert';\r\nimport '../main/style.css';\r\nimport ValidateUserBlankInput from '../../helpers/ValidateUserBlankInput';\r\nimport InsertionBoardSchema from \"./InsertionBoardSchema\";\r\n\r\nexport default ({\r\n                    boardsSchema,\r\n                    setBoardOrderState,\r\n                    insertBoard,\r\n                    validateInput,\r\n                    boards,\r\n                    errors: { boardOrderError, boardTitleError }\r\n}) => {\r\n    const [modalButtonClick, setModalButtonClick] = useState(false);\r\n    const [boardTitle, setBoardTitle] = useState(\"\");\r\n    const [boardOrder, setBoardOrder] = useState(0);\r\n    const [createNewBoard, setCreateNewBoard] = useState({});\r\n    const [newBoardPlaceOrder, setNewBoardPlaceOrder] = useState(1);\r\n\r\n    const alert = useAlert();\r\n\r\n    const handleStoreBoardItem = () => {\r\n        if(ValidateUserBlankInput([boardTitle])){\r\n            alert.error(<div style={{ color: 'red', fontSize: 15 }}>Please, Fill Blank Fields...</div>, {\r\n                timeout: 5000,\r\n                onOpen: () => {\r\n                    console.log('hey')\r\n                },\r\n                onClose: () => {\r\n                    console.log('closed')\r\n                }\r\n            });\r\n        }\r\n        else{\r\n            setCreateNewBoard({\r\n                ...createNewBoard,\r\n                title: boardTitle,\r\n                order: boardOrder\r\n            });\r\n            setModalButtonClick(!modalButtonClick);\r\n            setNewBoardPlaceOrder(1);\r\n            setBoardOrderState(boards.map(board => (\r\n                {\r\n                    id: board.id,\r\n                    order: board.order,\r\n                    name: board.name\r\n                }\r\n                ))\r\n            );\r\n        }\r\n    };\r\n    const handleBoardTitleChange = e => {\r\n        const { value, name } = e.target;\r\n        validateInput(value, name);\r\n        setBoardTitle(e.target.value);\r\n    }\r\n\r\n    const handleBoardOrderChange = e => {\r\n        const { value, name } = e.target;\r\n        validateInput(value, name);\r\n        setBoardOrder(value);\r\n        setNewBoardPlaceOrder(value);\r\n    }\r\n\r\n\r\n    const stableDispatch = useCallback(insertBoard, []);\r\n\r\n    useEffect(() => {\r\n        stableDispatch(createNewBoard);\r\n    }, [stableDispatch, createNewBoard]);\r\n\r\n\r\n    const handleToggleModal = () => {\r\n        setBoardTitle('');\r\n        setBoardOrder(1);\r\n        setModalButtonClick(!modalButtonClick);\r\n        setNewBoardPlaceOrder(1);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <MDBBtn className=\"start-modal-button\" onClick={handleToggleModal}>INSERT BOARD</MDBBtn>\r\n            <MDBModal isOpen={modalButtonClick} toggle={handleToggleModal}>\r\n                <MDBModalHeader toggle={handleToggleModal}>Board Insertion</MDBModalHeader>\r\n                <MDBModalBody>\r\n                    <div className=\"form-group\">\r\n                        <MDBInput label=\"Enter Board Title\" name='board_title' type='text' value={boardTitle} onChange={handleBoardTitleChange} size=\"md\" />\r\n                        {boardTitleError.errors && <ErrorMessage error={boardTitleError.errors}/>}\r\n                        <InsertionBoardSchema newBoardPlaceOrder={+newBoardPlaceOrder} boardsSchema={boardsSchema}/>\r\n                        <OrderInput order={boardOrder} boardOrderChange={handleBoardOrderChange}/>\r\n                        {boardOrderError.errors && <ErrorMessage error={boardOrderError.errors}/>}\r\n                    </div>\r\n                </MDBModalBody>\r\n                <MDBModalFooter>\r\n                    <MDBBtn className='row' color=\"secondary\" onClick={handleToggleModal}>Close</MDBBtn>\r\n                    <MDBBtn disabled={boardOrderError.inputStatus || boardTitleError.inputStatus}\r\n                            className='row'\r\n                            color=\"primary\"\r\n                            onClick={handleStoreBoardItem}\r\n                    >\r\n                        Insert Board\r\n                    </MDBBtn>\r\n                </MDBModalFooter>\r\n            </MDBModal>\r\n        </>\r\n    );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { MDBContainer, MDBRow, MDBCol, MDBBtn } from 'mdbreact';\r\n\r\nexport default ({ userLoginAuth, handleToggleModal }) => {\r\n\r\n    const [userLoginCredentials, setUserLoginCredentials] = useState({\r\n        email: '',\r\n        password: ''\r\n    });\r\n\r\n    const handleUserLoginInputs = e => {\r\n        const { name, value } = e.target;\r\n        setUserLoginCredentials({\r\n            ...userLoginCredentials,\r\n            [name]: value\r\n        });\r\n    };\r\n\r\n    const handleUserCredentialSubmit = () => {\r\n        userLoginAuth({\r\n            email: userLoginCredentials.email,\r\n            password: userLoginCredentials.password\r\n        });\r\n        handleToggleModal();\r\n    };\r\n\r\n    return (\r\n        <MDBContainer>\r\n            <MDBRow center>\r\n                <MDBCol md=\"6\">\r\n                    <div>\r\n                        <h3 className=\"h4 text-center mb-4\">SIGN IN</h3>\r\n                        <label htmlFor=\"defaultFormLoginEmailEx\" className=\"grey-text\">\r\n                            Your email\r\n                        </label>\r\n                        <input\r\n                            type=\"email\"\r\n                            id=\"defaultFormLoginEmailEx\"\r\n                            name='email'\r\n                            className=\"form-control\"\r\n                            value={userLoginCredentials.email}\r\n                            onChange={handleUserLoginInputs}\r\n                        />\r\n                        <br />\r\n                        <label htmlFor=\"defaultFormLoginPasswordEx\" className=\"grey-text\">\r\n                            Your password\r\n                        </label>\r\n                        <input\r\n                            type=\"password\"\r\n                            id=\"defaultFormLoginPasswordEx\"\r\n                            name='password'\r\n                            className=\"form-control\"\r\n                            value={userLoginCredentials.password}\r\n                            onChange={handleUserLoginInputs}\r\n                        />\r\n                        <div className=\"text-center mt-4\">\r\n                            <MDBBtn\r\n                                onClick={handleUserCredentialSubmit}\r\n                                color=\"indigo\"\r\n                                type=\"submit\"\r\n                            >\r\n                                LOGIN\r\n                            </MDBBtn>\r\n                        </div>\r\n                    </div>\r\n                </MDBCol>\r\n            </MDBRow>\r\n        </MDBContainer>\r\n    );\r\n};\r\n\r\n","import React, { useState } from 'react';\r\nimport { MDBBtn, MDBModal, MDBModalBody, MDBModalHeader } from 'mdbreact';\r\nimport LoginForm from \"./LoginForm\";\r\n\r\nexport default ({ userLoginAuth }) => {\r\n    const [modalButtonClick, setModalButtonClick] = useState(false);\r\n\r\n    const handleToggleModal = () => setModalButtonClick(!modalButtonClick);\r\n    return (\r\n        <>\r\n            <MDBBtn className='login-modal-button' onClick={handleToggleModal}>LOGIN</MDBBtn>\r\n            <MDBModal isOpen={modalButtonClick} toggle={handleToggleModal}>\r\n                <MDBModalHeader\r\n                    toggle={handleToggleModal}\r\n                >\r\n                    Login Form\r\n                </MDBModalHeader>\r\n                <MDBModalBody>\r\n                    <LoginForm\r\n                        userLoginAuth={userLoginAuth}\r\n                        handleToggleModal={handleToggleModal}\r\n                    />\r\n                </MDBModalBody>\r\n            </MDBModal>\r\n        </>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport {MDBBtn, MDBBtnGroup} from \"mdbreact\";\r\n\r\nexport default ({task: {board, id, location, task_title, priority_level, task_priority}, login, boardOrder, handleFindForEditTaskModal, boardLength, moveTask, deleteTask, hideTask}) => {\r\n    const boolStr = task_priority ? 'true' : 'false';\r\n    return (\r\n        <MDBBtnGroup size=\"sm\" className=\"mb-4\">\r\n            <MDBBtn\r\n                disabled={boardOrder === 0}\r\n                className='task-button'\r\n                color=\"white\"\r\n            >\r\n                <span\r\n                    id={id}\r\n                    onClick={moveTask}\r\n                    direction='left'\r\n                    location={location}\r\n                    priority_level={priority_level}\r\n                    task_priority={boolStr}\r\n                    order={boardOrder}\r\n                    name={`left-${board}`}\r\n                    className=\"fa fa-angle-double-left\"\r\n                    aria-hidden=\"true\"\r\n                >\r\n                </span>\r\n            </MDBBtn>\r\n            <MDBBtn className='task-button' color=\"white\">\r\n                <span id={id} name={board} location={location} priority_level={priority_level} onClick={hideTask}\r\n                      className=\"hide fas fa-eye-slash\" aria-hidden=\"true\"/>\r\n            </MDBBtn>\r\n            {\r\n                location === 'kanban_board'\r\n                    ?\r\n                    <>\r\n                        <MDBBtn disabled={!login} className='task-button' color=\"white\">\r\n                            <span id={id} name={board} title={task_title} onClick={handleFindForEditTaskModal} className=\"edit fas fa-edit\"\r\n                                  aria-hidden=\"true\"/>\r\n                        </MDBBtn>\r\n                        <MDBBtn disabled={!login} className='task-button' color=\"white\">\r\n                            <span id={id} name={board} title={task_title} onClick={deleteTask} className=\"delete fas fa-trash-alt\"\r\n                                  aria-hidden=\"true\"/>\r\n                        </MDBBtn>\r\n                    </>\r\n                    :\r\n                    null\r\n            }\r\n            <MDBBtn\r\n                className='task-button'\r\n                disabled={boardOrder === boardLength - 1}\r\n                color=\"white\"\r\n            >\r\n                <span\r\n                    id={id}\r\n                    onClick={moveTask}\r\n                    direction='right'\r\n                    location={location}\r\n                    priority_level={priority_level}\r\n                    task_priority={boolStr}\r\n                    order={boardOrder}\r\n                    name={`right-${board}`}\r\n                    className=\"fa fa-angle-double-right\"\r\n                    aria-hidden=\"true\"\r\n                >\r\n                </span>\r\n            </MDBBtn>\r\n        </MDBBtnGroup>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport ButtonGroup from \"./ButtonGroup\";\r\nimport {MDBBtn, MDBRow, MDBCol, MDBContainer, MDBModal, MDBModalBody, MDBModalFooter, MDBModalHeader} from \"mdbreact\";\r\n\r\n\r\nexport default ({task, index, listLength, login, boardLength, swapTasks, handleFindForEditTaskModal, boardOrder, id, moveTask, editTask, deleteTask, hideTask}) => {\r\n\r\n    const [toggleModal, setToggleModal] = useState(false);\r\n    const dragTaskStart = e => {\r\n        const target = e.target;\r\n        e.dataTransfer.setData('task', target.id);\r\n    };\r\n\r\n    const DescriptionModal = () =>\r\n        <MDBContainer>\r\n            <MDBModal isOpen={toggleModal} toggle={handleToggleDescriptionModal} size=\"fluid\">\r\n                <MDBModalHeader toggle={handleToggleDescriptionModal}>{task.task_title}</MDBModalHeader>\r\n                <MDBModalBody>\r\n                    {task.task_description}\r\n                </MDBModalBody>\r\n                <MDBModalFooter>\r\n                    <MDBBtn color=\"secondary\" onClick={handleToggleDescriptionModal}>Close</MDBBtn>\r\n                </MDBModalFooter>\r\n            </MDBModal>\r\n        </MDBContainer>\r\n\r\n    const dragTaskOver = e => {\r\n        e.stopPropagation();\r\n    };\r\n\r\n    const handleOnMouseOver = e => {\r\n        let id = e.target.id;\r\n        if(id && document.getElementById(id).querySelector(\".task-details\") !== null) document.getElementById(id).querySelector(\".task-details\").innerHTML = 'Click Here...';\r\n\r\n    }\r\n    const handleOnMouseOff = e => {\r\n        let id = e.target.id;\r\n        if(id && document.getElementById(id).querySelector(\".task-details\") !== null) document.getElementById(id).querySelector(\".task-details\").innerHTML = 'Details...';\r\n    }\r\n\r\n    const handleToggleDescriptionModal = () => setToggleModal(!toggleModal)\r\n\r\n    return (\r\n        <MDBContainer\r\n            draggable='true'\r\n            name={task.board}\r\n            id={id}\r\n            onDragStart={dragTaskStart}\r\n            onDragOver={dragTaskOver}\r\n            className=\"d-flex flex-column task-card\"\r\n        >\r\n            <MDBBtn\r\n                disabled={index === 0}\r\n                name='up'\r\n                color='white'\r\n                priority_level={task.priority_level}\r\n                location={task.location}\r\n                board={task.board}\r\n                id={id}\r\n                className='up-button'\r\n                onClick={swapTasks}\r\n            >\r\n                Up\r\n            </MDBBtn>\r\n            <MDBRow>\r\n                <MDBCol size=\"8\" style={{display: 'flex', justifyContent: 'flex-start'}}>\r\n                    <h6 className=\"task-title\">{task.task_title}</h6>\r\n                </MDBCol>\r\n                {task.task_priority && <MDBCol style={{display: 'flex', justifyContent: 'flex-end'}} className=\"priority\"><i className=\"fas fa-exclamation-triangle fa-2x\"/></MDBCol>}\r\n            </MDBRow>\r\n            <span className=\"p-2 col-example text-left task-details\"\r\n                  id={id}\r\n                  onMouseOver={handleOnMouseOver}\r\n                  onMouseLeave={handleOnMouseOff}\r\n                  onClick={handleToggleDescriptionModal}\r\n            >\r\n                <i>Details...</i>\r\n            </span>\r\n            <DescriptionModal/>\r\n            <ButtonGroup\r\n                boardLength={boardLength}\r\n                boardOrder={boardOrder}\r\n                moveTask={moveTask}\r\n                login={login}\r\n                location={task.location}\r\n                editTask={editTask}\r\n                deleteTask={deleteTask}\r\n                hideTask={hideTask}\r\n                task={task}\r\n                handleFindForEditTaskModal={handleFindForEditTaskModal}\r\n            />\r\n            <MDBBtn\r\n                disabled={index === listLength - 1}\r\n                name='down'\r\n                priority_level={task.priority_level}\r\n                location={task.location}\r\n                board={task.board}\r\n                id={id}\r\n                color='white'\r\n                className='down-button'\r\n                onClick={swapTasks}>\r\n                Down\r\n            </MDBBtn>\r\n\r\n        </MDBContainer>\r\n    )\r\n}","import React from \"react\";\r\nimport { MDBInputGroup, MDBInput } from \"mdbreact\";\r\nexport default ( { handleDelegateNameChange, fullname } ) => {\r\n\r\n    const handleFirstNameInputChange = e => handleDelegateNameChange(e.target.getAttribute('name'), e.target.value);\r\n    const handleLastNameInputChange  = e => handleDelegateNameChange(e.target.getAttribute('name'), e.target.value);\r\n\r\n    return (\r\n        <MDBInputGroup style={{ marginBottom: 10 }}\r\n            prepend=\"Delegated to: \"\r\n            inputs={\r\n                <>\r\n                    <MDBInput noTag name=\"first\" value={fullname.first} onChange={handleFirstNameInputChange} type=\"text\" />\r\n                    <MDBInput noTag name=\"last\" value={fullname.last} onChange={handleLastNameInputChange} type=\"text\" />\r\n                </>\r\n            }\r\n        />\r\n    );\r\n}","import React from 'react';\r\nimport { MDBInput, MDBContainer } from 'mdbreact';\r\n\r\nexport default ({ description, descriptionInputChange }) =>\r\n    <MDBContainer className='task-description'>\r\n        <MDBInput\r\n            value={description}\r\n            name='task_description'\r\n            onChange={descriptionInputChange}\r\n            type=\"textarea\"\r\n            label=\"Task Description\"\r\n            outline\r\n        />\r\n    </MDBContainer>\r\n","import React, { Component } from \"react\";\r\nimport Switch from \"react-switch\";\r\nimport { MDBRow, MDBCol } from \"mdbreact\";\r\n\r\nexport default class SwitchButton extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { checked: false };\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    handleChange(checked) {\r\n        this.setState({ checked });\r\n        this.props.switchPriority(checked);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <label>\r\n                <MDBRow>\r\n                    <MDBCol md=\"2\">\r\n                        <Switch onChange={this.handleChange} checked={this.state.checked} />\r\n                    </MDBCol>\r\n                    <MDBCol md=\"10\">\r\n                        <span style={{ marginLeft: 15, fontSize: 20 }}>Please, select if this task is priority</span>\r\n                    </MDBCol>\r\n                </MDBRow>\r\n            </label>\r\n        );\r\n    }\r\n}","import React, {useState, useEffect, useCallback} from 'react';\r\nimport { MDBBtn, MDBModal, MDBContainer, MDBRow, MDBModalBody, MDBModalHeader, MDBModalFooter, MDBInput } from 'mdbreact';\r\nimport InputForm from './InputForm';\r\nimport DescriptionTaskInput from \"./DescriptionTaskInput\";\r\nimport ErrorMessage from \"../board_modal/ErrorMessage\";\r\nimport ValidateUserBlankInput from '../../helpers/ValidateUserBlankInput';\r\nimport {useAlert} from 'react-alert';\r\nimport SwitchButton from \"./ToggleSwitchPriority\";\r\nimport '../main/style.css';\r\n\r\nexport default ({\r\n                    createTask,\r\n                    resetErrors,\r\n                    board_name,\r\n                    validateInput,\r\n                    errors: {\r\n                        taskTitleError,\r\n                        taskDescriptionError,\r\n                        firstNameError,\r\n                        lastNameError\r\n                    }\r\n                }) => {\r\n    const [modalButtonClick, setModalButtonClick] = useState(false);\r\n    const [taskTitle, setTaskTitle] = useState(\"\");\r\n    const [taskDescription, setTaskDescription] = useState(\"\");\r\n    const [highTaskPriority, setHighTaskPriority] = useState(false);\r\n    const [delegateName, setDelegateName] = useState({\r\n        first: \"\",\r\n        last: \"\"\r\n    });\r\n    const [createNewTask, setCreateNewTask] = useState({});\r\n\r\n    const handleTaskTitleChange = e => {\r\n        const {value, name} = e.target;\r\n        validateInput(value, name);\r\n        setTaskTitle(value);\r\n    }\r\n\r\n    const handleHighTaskPrioritySwitch = task_priority => {\r\n        setHighTaskPriority(task_priority);\r\n    }\r\n\r\n    const handleTaskDescriptionChange = e => {\r\n        const {value, name} = e.target;\r\n        validateInput(value, name);\r\n        setTaskDescription(value);\r\n    }\r\n    const handleDelegateNameChange = (attribute, value) => {\r\n        if (attribute === \"first\") {\r\n            validateInput(value, attribute);\r\n            setDelegateName({...delegateName, first: value});\r\n        }\r\n        if (attribute === \"last\") {\r\n            validateInput(value, attribute);\r\n            setDelegateName({...delegateName, last: value});\r\n        }\r\n    }\r\n\r\n    const alert = useAlert();\r\n\r\n    const handleStoreTaskItem = () => {\r\n        if (ValidateUserBlankInput(\r\n            [\r\n                taskTitle,\r\n                taskDescription,\r\n                delegateName.first,\r\n                delegateName.last\r\n            ])) {\r\n            alert.error(<div style={{color: 'red', fontSize: 15}}>Please, Fill Blank Fields...</div>, {\r\n                timeout: 5000,\r\n                onOpen: () => {\r\n                    console.log('hey')\r\n                },\r\n                onClose: () => {\r\n                    console.log('closed')\r\n                }\r\n            });\r\n        } else {\r\n            setCreateNewTask({\r\n                ...createNewTask,\r\n                task_title: taskTitle,\r\n                board_name: board_name,\r\n                location: 'kanban_board',\r\n                task_description: taskDescription,\r\n                task_priority: highTaskPriority,\r\n                first: delegateName.first,\r\n                last: delegateName.last\r\n            });\r\n            setModalButtonClick(!modalButtonClick);\r\n            setHighTaskPriority(false);\r\n        }\r\n    };\r\n\r\n    const stableDispatch = useCallback(createTask, []);\r\n\r\n    useEffect(() => {\r\n        stableDispatch(createNewTask);\r\n    }, [stableDispatch, createNewTask]);\r\n\r\n\r\n    const handleToggleModal = () => {\r\n        setTaskTitle('');\r\n        setTaskDescription('');\r\n        setDelegateName({\r\n                first: \"\",\r\n                last: \"\"\r\n            }\r\n        );\r\n        setModalButtonClick(!modalButtonClick);\r\n        resetErrors();\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <MDBContainer>\r\n                <MDBRow>\r\n                    <MDBBtn className='addTask' onClick={handleToggleModal}>\r\n                        <i className=\"fas fa-plus fa-2x\"/>\r\n                    </MDBBtn>\r\n                </MDBRow>\r\n            </MDBContainer>\r\n            <MDBModal style={{zIndex: 1}} isOpen={modalButtonClick} toggle={handleToggleModal}>\r\n                <MDBModalHeader toggle={handleToggleModal}>Task Form</MDBModalHeader>\r\n                <MDBModalBody>\r\n                    <MDBInput label=\"Enter Task Title\" name='task_title' type='text' value={taskTitle}\r\n                              onChange={handleTaskTitleChange} size=\"md\"/>\r\n                    {taskTitleError.errors && <ErrorMessage error={taskTitleError.errors}/>}\r\n                    <DescriptionTaskInput\r\n                        id='textArea'\r\n                        description={taskDescription}\r\n                        descriptionInputChange={handleTaskDescriptionChange}\r\n                    />\r\n                    {taskDescriptionError.errors && <ErrorMessage error={taskDescriptionError.errors}/>}\r\n                    <SwitchButton switchPriority={handleHighTaskPrioritySwitch}/>\r\n                    <InputForm fullname={delegateName} handleDelegateNameChange={handleDelegateNameChange}/>\r\n                    {firstNameError.errors && <ErrorMessage error={firstNameError.errors}/>}\r\n                    {lastNameError.errors && <ErrorMessage error={lastNameError.errors}/>}\r\n                </MDBModalBody>\r\n                <MDBModalFooter>\r\n                    <MDBBtn className='row' color=\"secondary\" onClick={handleToggleModal}>Close</MDBBtn>\r\n                    <MDBBtn\r\n                        disabled={taskTitleError.inputStatus || taskDescriptionError.inputStatus || firstNameError.inputStatus || lastNameError.inputStatus}\r\n                        className='row'\r\n                        board_name={board_name}\r\n                        color=\"primary\" onClick={handleStoreTaskItem}\r\n                    >\r\n                        Create Task\r\n                    </MDBBtn>\r\n                </MDBModalFooter>\r\n            </MDBModal>\r\n        </>\r\n    );\r\n}\r\n","import React, {useState, useEffect, useCallback} from 'react';\r\nimport { MDBBtn, MDBModal, MDBModalBody, MDBModalHeader, MDBModalFooter, MDBInput, MDBRow, MDBContainer } from 'mdbreact';\r\nimport ErrorMessage from \"./ErrorMessage\";\r\nimport { useAlert } from 'react-alert';\r\nimport '../main/style.css';\r\nimport ValidateUserBlankInput from '../../helpers/ValidateUserBlankInput';\r\n\r\nexport default ({\r\n                    setBoardOrderState,\r\n                    addBoard,\r\n                    validateInput,\r\n                    boards,\r\n                    errors: { boardOrderError, boardTitleError }\r\n                }) => {\r\n    const [modalButtonClick, setModalButtonClick] = useState(false);\r\n    const [boardTitle, setBoardTitle] = useState(\"\");\r\n    const [createNewBoard, setCreateNewBoard] = useState({});\r\n\r\n    const alert = useAlert();\r\n\r\n    const handleStoreBoardItem = () => {\r\n        if(ValidateUserBlankInput([boardTitle])){\r\n            alert.error(<div style={{ color: 'red', fontSize: 15 }}>Please, Fill Blank Fields...</div>, {\r\n                timeout: 5000,\r\n                onOpen: () => {\r\n                    console.log('hey')\r\n                },\r\n                onClose: () => {\r\n                    console.log('closed')\r\n                }\r\n            });\r\n        }\r\n        else{\r\n            setCreateNewBoard({\r\n                ...createNewBoard,\r\n                title: boardTitle,\r\n                order: boards.length\r\n            });\r\n            setModalButtonClick(!modalButtonClick);\r\n            setBoardOrderState(boards.map(board => (\r\n                    {\r\n                        id: board.id,\r\n                        order: board.order,\r\n                        name: board.name\r\n                    }\r\n                ))\r\n            );\r\n        }\r\n    };\r\n    const handleBoardTitleChange = e => {\r\n        const { value, name } = e.target;\r\n        validateInput(value, name);\r\n        setBoardTitle(e.target.value);\r\n    }\r\n\r\n    const stableDispatch = useCallback(addBoard, []);\r\n\r\n    useEffect(() => {\r\n        stableDispatch(createNewBoard);\r\n    }, [stableDispatch, createNewBoard]);\r\n\r\n\r\n    const handleToggleModal = () => {\r\n        setBoardTitle('');\r\n        setModalButtonClick(!modalButtonClick);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <MDBContainer>\r\n                <MDBRow>\r\n                    <MDBBtn className='addBoard' onClick={handleToggleModal}>\r\n                        <i className=\"fas fa-plus fa-2x\"/>\r\n                    </MDBBtn>\r\n                </MDBRow>\r\n            </MDBContainer>\r\n            <MDBModal isOpen={modalButtonClick} toggle={handleToggleModal}>\r\n                <MDBModalHeader toggle={handleToggleModal}>Add Board</MDBModalHeader>\r\n                <MDBModalBody>\r\n                    <div className=\"form-group\">\r\n                        <MDBInput label=\"Enter Board Title\" name='board_title' type='text' value={boardTitle} onChange={handleBoardTitleChange} size=\"md\" />\r\n                        {boardTitleError.errors && <ErrorMessage error={boardTitleError.errors}/>}\r\n                    </div>\r\n                </MDBModalBody>\r\n                <MDBModalFooter>\r\n                    <MDBBtn className='row' color=\"secondary\" onClick={handleToggleModal}>Close</MDBBtn>\r\n                    <MDBBtn\r\n                        disabled={boardOrderError.inputStatus || boardTitleError.inputStatus}\r\n                        className='row' color=\"primary\"\r\n                        onClick={handleStoreBoardItem}\r\n                    >\r\n                        Add Board\r\n                    </MDBBtn>\r\n                </MDBModalFooter>\r\n            </MDBModal>\r\n        </>\r\n    );\r\n}","import React from 'react';\r\nimport TaskItem from \"./TaskItem\";\r\nimport './style.css';\r\nimport {MDBBtn, MDBCol, MDBContainer, MDBRow} from \"mdbreact\";\r\nimport TaskModalPage from \"../task_modal/ModalPage\";\r\nimport AddBoardModalPage from \"../board_modal/AddBoardModalPage\";\r\n\r\nexport default ({\r\n                    boards,\r\n                    moveTask,\r\n                    deleteTask,\r\n                    hideTask,\r\n                    createTask,\r\n                    userLogin,\r\n                    boardsSchema,\r\n                    resetErrors,\r\n                    editTask,\r\n                    swapKanbanTasks,\r\n                    validateInput,\r\n                    insertBoard,\r\n                    addBoard,\r\n                    showTask,\r\n                    dragTask,\r\n                    errors,\r\n                    deleteBoard,\r\n                    boardMessage,\r\n                    handleFindForEditTaskModal,\r\n                    setBoardOrderState\r\n                }) => {\r\n\r\n    const dropTask = e => {\r\n        e.preventDefault();\r\n        const task_id = e.dataTransfer.getData('task');\r\n        const task = document.getElementById(task_id);\r\n        setBoardOrderState(boards.map(board => (\r\n                {\r\n                    id: board.id,\r\n                    order: board.order,\r\n                    name: board.name,\r\n                    title: board.title,\r\n                    tasks: board.tasks.map(task => ({\r\n                        id: task.id,\r\n                        visibility: true,\r\n                        task_title: task.task_title,\r\n                        location: task.location,\r\n                        task_description: task.task_description,\r\n                        task_priority: task.task_priority,\r\n                        board: task.board,\r\n                        first: task.first,\r\n                        last: task.last\r\n                    }))\r\n                }\r\n            ))\r\n        );\r\n        dragTask(e.target.getAttribute('name'), task.getAttribute('name'), task_id);\r\n    };\r\n\r\n    const dragTaskOver = e => {\r\n        e.preventDefault();\r\n    };\r\n\r\n    const handleDeleteBoard = e => {\r\n        setBoardOrderState(boards.map(board => (\r\n                {\r\n                    id: board.id,\r\n                    order: board.order,\r\n                    name: board.name\r\n                }\r\n            ))\r\n        );\r\n        deleteBoard(e);\r\n    };\r\n\r\n    const boardList = (list, order, login, length) => list.length\r\n        ? list.map((task, id) => task.visibility\r\n            ? <TaskItem\r\n                boardLength={length}\r\n                boardOrder={order}\r\n                moveTask={moveTask}\r\n                deleteTask={deleteTask}\r\n                hideTask={hideTask}\r\n                editTask={editTask}\r\n                listLength={list.length}\r\n                swapTasks={swapKanbanTasks}\r\n                login={login}\r\n                key={id}\r\n                index={id}\r\n                id={task.id}\r\n                task={task}\r\n                handleFindForEditTaskModal={handleFindForEditTaskModal}\r\n            />\r\n            : <p className='show' key={task.id}>Hidden Task... <span id={task.id} location={task.location}\r\n                                                                     name={task.board} autoFocus\r\n                                                                     onClick={showTask} className='show'>SHOW</span></p>\r\n        )\r\n        : <p style={{color: 'white', textAlign: 'center'}}><i>{boardMessage}</i></p>;\r\n\r\n    return (\r\n        <MDBContainer className=\"dashboard container-fluid\">\r\n            <MDBRow className=\"kanban-row\">\r\n                {boards.map(board => (\r\n                    <MDBCol\r\n                        key={board.id}\r\n                        onDrop={dropTask}\r\n                        name={board.name}\r\n                        onDragOver={dragTaskOver}\r\n                        className=\"kanban-col\"\r\n                        md=\"3\"\r\n                    >\r\n                        <div className='board-header container'>\r\n                            <div className='row'>\r\n\r\n                                <div className='col-10'>\r\n                                    <div className='row'>\r\n                                        <span className=\"task-list-title col-9\">{board.title}</span>\r\n                                        <span className='task-quantity col-2'>{board.tasks.length}</span>\r\n                                    </div>\r\n                                </div>\r\n                                {\r\n                                    userLogin ?\r\n                                        <div className='col-2'>\r\n                                            <i\r\n                                                id={board.id}\r\n                                                onClick={handleDeleteBoard}\r\n                                                className=\"far fa-calendar-times fa-3x\"/>\r\n                                        </div>\r\n                                        :\r\n                                        <div className='col-2'>\r\n                                            <i\r\n                                                id={board.id}\r\n                                                className=\"far fa-calendar-times fa-3x\"/>\r\n                                        </div>\r\n                                }\r\n\r\n                            </div>\r\n                        </div>\r\n                        {boardList(board.tasks, board.order, userLogin, boards.length)}\r\n                        {\r\n                        userLogin ?\r\n                            <TaskModalPage\r\n                                errors={errors}\r\n                                board_name={board.name}\r\n                                validateInput={validateInput}\r\n                                createTask={createTask}\r\n                                resetErrors={resetErrors}\r\n                            />\r\n                        :\r\n                            <MDBContainer>\r\n                                <MDBRow>\r\n                                    <MDBBtn className='addTask'>\r\n                                        <i className=\"fas fa-plus fa-2x\"/>\r\n                                    </MDBBtn>\r\n                                </MDBRow>\r\n                            </MDBContainer>\r\n                        }\r\n                    </MDBCol>\r\n                ))\r\n                }\r\n                {\r\n                    userLogin ?\r\n                    <MDBCol md=\"3\" className=\"btn-col\">\r\n                        <AddBoardModalPage\r\n                            errors={errors}\r\n                            boards={boards}\r\n                            boardsSchema={boardsSchema}\r\n                            validateInput={validateInput}\r\n                            addBoard={addBoard}\r\n                            deleteBoard={deleteBoard}\r\n                            resetErrors={resetErrors}\r\n                            setBoardOrderState={setBoardOrderState}\r\n                        />\r\n                    </MDBCol>\r\n                    :\r\n                    <MDBCol md=\"3\" className=\"btn-col\">\r\n                        <MDBBtn className='addBoard'>\r\n                            <i className=\"fas fa-plus fa-2x\"/>\r\n                        </MDBBtn>\r\n                    </MDBCol>\r\n                }\r\n            </MDBRow>\r\n        </MDBContainer>\r\n    );\r\n}","import React from 'react';\r\nimport {MDBCol, MDBContainer, MDBRow} from \"mdbreact\";\r\nimport TaskItem from \"./TaskItem\";\r\n\r\nexport default ({\r\n                    priorityTasks,\r\n                    moveTask,\r\n                    deleteTask,\r\n                    hideTask,\r\n                    editTask,\r\n                    swapPriorityTasks,\r\n                    showTask,\r\n                    boardMessage,\r\n                    handleFindForEditTaskModal\r\n                }) => {\r\n\r\n    const priorityTasksList = (list, order, length) => list.length\r\n        ? list.map((task, id) => task.visibility\r\n            ? <TaskItem\r\n                boardLength={length}\r\n                boardOrder={order}\r\n                moveTask={moveTask}\r\n                deleteTask={deleteTask}\r\n                hideTask={hideTask}\r\n                editTask={editTask}\r\n                listLength={list.length}\r\n                swapTasks={swapPriorityTasks}\r\n                key={id}\r\n                index={id}\r\n                id={task.id}\r\n                task={task}\r\n                handleFindForEditTaskModal={handleFindForEditTaskModal}\r\n            />\r\n            : <p className='show' key={task.id}>Hidden Task... <span id={task.id} priority_level={task.priority_level} name={task.board} autoFocus\r\n                                                                     onClick={showTask} className='show'>SHOW</span></p>\r\n        )\r\n        : <p style={{color: 'white', textAlign: 'center'}}><i>{boardMessage}</i></p>;\r\n    return (\r\n        <MDBContainer className=\"dashboard container-fluid\">\r\n            <MDBRow className=\"kanban-row\">\r\n                {priorityTasks.map((list, idx) => (\r\n                    <MDBCol\r\n                        key={idx}\r\n                        name={list.priority_level}\r\n                        className=\"kanban-col\"\r\n                        md=\"6\"\r\n                    >\r\n                        <div className='board-header container'>\r\n                            <div className='row'>\r\n                                <div className='col-12'>\r\n                                    <div className='row'>\r\n                                        <span className=\"task-list-title col-10\">{list.priority_level.toUpperCase()} Priority List</span>\r\n                                        <span className='task-quantity col-1'>{list.tasks.length}</span>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        {priorityTasksList(list.tasks, list.order, priorityTasks.length)}\r\n                    </MDBCol>\r\n                    ))\r\n                }\r\n            </MDBRow>\r\n        </MDBContainer>\r\n    );\r\n}\r\n","import React, {useState} from 'react';\r\nimport {MDBContainer, MDBBtn, MDBModal, MDBInput, MDBModalBody, MDBModalHeader, MDBModalFooter} from 'mdbreact';\r\nimport ErrorMessage from \"../board_modal/ErrorMessage\";\r\n\r\nexport default ({\r\n                    handleToggleEditTaskModal,\r\n                    errors: {\r\n                        taskTitleError,\r\n                        taskDescriptionError,\r\n                        firstNameError,\r\n                        lastNameError\r\n                    },\r\n                    modalButtonClick,\r\n                    validateInput,\r\n                    submitNewTaskItems,\r\n                    searchEditTask\r\n                }) => {\r\n    const [editTaskItems, setEditTaskItems] = useState({\r\n        task_title: \"\",\r\n        task_description: \"\",\r\n        task_priority: false,\r\n        first: \"\",\r\n        last: \"\"\r\n    });\r\n    const [toggleTaskPriority, setToggleTaskPriority] = useState(true);\r\n    const [changeEvent, setChangeEvent] = useState(false);\r\n\r\n    const handleTogglePriorityTaskStatus = () => setToggleTaskPriority(!toggleTaskPriority);\r\n\r\n    const handleEditTaskItemChange = e => {\r\n        if (!changeEvent) setChangeEvent(true);\r\n\r\n        if (e.target.name === \"task_priority\") {\r\n            handleTogglePriorityTaskStatus();\r\n            setEditTaskItems({\r\n                ...editTaskItems,\r\n                id: searchEditTask.id,\r\n                board: searchEditTask.board,\r\n                task_priority: e.target.checked\r\n            });\r\n        } else {\r\n            setEditTaskItems({\r\n                ...editTaskItems,\r\n                id: searchEditTask.id,\r\n                board: searchEditTask.board,\r\n                [e.target.name]: e.target.value\r\n            });\r\n        }\r\n        validateInput(e.target.value, e.target.name);\r\n    };\r\n\r\n    const handleEditTaskItemsSubmit = () => {\r\n        submitNewTaskItems(editTaskItems);\r\n        handleToggleEditTaskModal();\r\n    };\r\n\r\n    return (\r\n        <MDBContainer>\r\n            <MDBModal isOpen={modalButtonClick} toggle={handleToggleEditTaskModal}>\r\n                <MDBModalHeader toggle={handleToggleEditTaskModal}>Task Edit Form</MDBModalHeader>\r\n                <MDBModalBody>\r\n                    <MDBInput type='text'\r\n                              name='task_title'\r\n                              label=\"Edit Task Title\"\r\n                              value={editTaskItems.title}\r\n                              onChange={handleEditTaskItemChange}\r\n                    />\r\n                    {taskTitleError.errors && <ErrorMessage error={taskTitleError.errors}/>}\r\n                    <MDBContainer className='task-description'>\r\n                        <MDBInput\r\n                            value={editTaskItems.description}\r\n                            name='task_description'\r\n                            onChange={handleEditTaskItemChange}\r\n                            type=\"textarea\"\r\n                            label=\"Task Description\"\r\n                            outline\r\n                        />\r\n                    </MDBContainer>\r\n                    {taskDescriptionError.errors && <ErrorMessage error={taskDescriptionError.errors}/>}\r\n\r\n                    <div className=\"custom-control custom-checkbox\">\r\n                        <input\r\n                            name=\"task_priority\"\r\n                            checked={toggleTaskPriority}\r\n                            type=\"checkbox\"\r\n                            onChange={handleEditTaskItemChange}\r\n                            className=\"custom-control-input\"\r\n                            id=\"priority_task\"\r\n                        />\r\n                        <label className=\"custom-control-label\" htmlFor=\"priority_task\">This is Priority\r\n                            Task\r\n                        </label>\r\n                    </div>\r\n\r\n                    <MDBInput type='text' name='first' label=\"Edit Delegate First Name\"\r\n                              value={editTaskItems.first_name} onChange={handleEditTaskItemChange}/>\r\n                    {firstNameError.errors && <ErrorMessage error={firstNameError.errors}/>}\r\n                    <MDBInput type='text' name='last' label=\"Edit Delegate Last Name\"\r\n                              value={editTaskItems.last_name} onChange={handleEditTaskItemChange}/>\r\n                    {lastNameError.errors && <ErrorMessage error={lastNameError.errors}/>}\r\n                </MDBModalBody>\r\n                <MDBModalFooter>\r\n                    <MDBBtn color=\"secondary\" onClick={handleToggleEditTaskModal}>Close</MDBBtn>\r\n                    <MDBBtn\r\n                        disabled={!changeEvent || taskTitleError.inputStatus || taskDescriptionError.inputStatus || firstNameError.inputStatus || lastNameError.inputStatus}\r\n                        color=\"primary\"\r\n                        onClick={handleEditTaskItemsSubmit}\r\n                    >\r\n                        Save changes\r\n                    </MDBBtn>\r\n                </MDBModalFooter>\r\n            </MDBModal>\r\n        </MDBContainer>\r\n);\r\n}","import {MDBNotification} from 'mdbreact';\r\nimport React from \"react\";\r\n\r\nexport default ({ serverNote, resetServerNotes }) => {\r\n\r\n    return (\r\n        <MDBNotification\r\n            autohide={8000}\r\n            onClick={() => resetServerNotes()}\r\n            bodyClassName=\"p-5 font-weight-bold white-text\"\r\n            className=\"stylish-color-dark\"\r\n            closeClassName=\"blue-grey-text\"\r\n            fade\r\n            icon=\"bell\"\r\n            iconClassName=\"blue-grey-text\"\r\n            message={serverNote}\r\n            show\r\n            title=\"Server Notification\"\r\n            titleClassName=\"elegant-color-dark white-text\"\r\n        />\r\n    )\r\n}\r\n","import React from 'react';\r\nimport Loading from './LoadingComponent';\r\nimport InsertBoardModalPage from '../board_modal/InsertBoardModalPage';\r\nimport LoginModalPage from '../auth/ModalPage';\r\nimport NewKanbanDashboard from './NewKanbanDashboard';\r\nimport PriorityOrderedTasks from './PriorityOrderedTasks';\r\nimport EditTaskModalPage from '../edit_modal/ModalPage';\r\nimport ServerNotifications from \"./ServerNotifications\";\r\nimport {MDBBtn, MDBCol, MDBContainer, MDBRow} from 'mdbreact';\r\n\r\n\r\nexport default props => {\r\n\r\n    const listProps = {\r\n        boards: props.boards,\r\n        loading: props.loading,\r\n        serverNote: props.serverNote,\r\n        boardMessage: props.boardMessage,\r\n        errors: props.errors,\r\n        userLogin: props.userLogin,\r\n        boardsSchema: props.boardsSchema,\r\n        priorityTasks: props.priorityTasks,\r\n        searchEditTask: props.searchEditTask,\r\n        modalButtonClick: props.modalButtonClick,\r\n        panelControlButtons: props.panelControlButtons\r\n    };\r\n    const eventProps = {\r\n        insertBoard: props.insertBoard,\r\n        addBoard: props.addBoard,\r\n        createTask: props.createTask,\r\n        resetServerNotes: props.resetServerNotes,\r\n        swapKanbanTasks: props.swapTasks.swapKanbanTasks,\r\n        swapPriorityTasks: props.swapTasks.swapPriorityTasks,\r\n        moveTask: props.moveTask,\r\n        deleteTask: props.deleteTask,\r\n        deleteBoard: props.deleteBoard,\r\n        userLoginAuth: props.userLoginAuth,\r\n        filterPriorityTasks: props.filterPriorityTasks,\r\n        hideTask: props.hideTask,\r\n        showTask: props.showTask,\r\n        dragTask: props.dragTask,\r\n        submitNewTaskItems: props.submitNewTaskItems,\r\n        validateInput: props.validateInput,\r\n        resetErrors: props.resetErrors,\r\n        toggleEditModal: props.toggleEditModal,\r\n        findTaskForEdit: props.findTaskForEdit,\r\n        resetMainKanbanView: props.resetMainKanbanView,\r\n        setBoardOrderState: props.setBoardOrderState\r\n    };\r\n\r\n    if (listProps.loading) {\r\n        return (\r\n            <MDBContainer>\r\n                <MDBRow className='kanban-header'>\r\n                    <h1>Kanban Board</h1>\r\n                </MDBRow>\r\n                <MDBRow center style={{marginTop: 250}}>\r\n                    <Loading\r\n                        type='spin'\r\n                        color='grey'\r\n                        height='10%'\r\n                        width='10%'\r\n                        delay={0}\r\n                    />\r\n                </MDBRow>\r\n                <MDBRow center style={{ marginTop: 45 }}>\r\n                    <h2>Retrieving data from database... Please, wait</h2>\r\n                </MDBRow>\r\n            </MDBContainer>\r\n        )\r\n    } else {\r\n        return (\r\n            <div>\r\n                <MDBContainer>\r\n                    <MDBRow className='kanban-header'>\r\n                        <h1>Kanban Board</h1>\r\n                    </MDBRow>\r\n                </MDBContainer>\r\n                <EditTaskModalPage\r\n                    errors={listProps.errors}\r\n                    validateInput={eventProps.validateInput}\r\n                    modalButtonClick={listProps.modalButtonClick}\r\n                    handleToggleEditTaskModal={eventProps.toggleEditModal}\r\n                    boards={listProps.boards}\r\n                    findTaskForEdit={listProps.findTaskForEdit}\r\n                    searchEditTask={listProps.searchEditTask}\r\n                    submitNewTaskItems={eventProps.submitNewTaskItems}\r\n                />\r\n                <MDBContainer className=\"main-control-panel\">\r\n                    {listProps.userLogin &&\r\n                        <MDBRow>\r\n                            <MDBCol>\r\n                                <InsertBoardModalPage\r\n                                    errors={listProps.errors}\r\n                                    boards={listProps.boards}\r\n                                    boardsSchema={listProps.boardsSchema}\r\n                                    validateInput={eventProps.validateInput}\r\n                                    insertBoard={eventProps.insertBoard}\r\n                                    deleteBoard={eventProps.deleteBoard}\r\n                                    resetErrors={eventProps.resetErrors}\r\n                                    setBoardOrderState={eventProps.setBoardOrderState}\r\n                                />\r\n                            </MDBCol>\r\n                            <MDBCol>\r\n                                <MDBBtn href=\"https://github.com/likejean/homework-6/issues\"\r\n                                        className='report-issues-button'>Report Issues</MDBBtn>\r\n                            </MDBCol>\r\n                        </MDBRow>\r\n                    }\r\n                    <MDBRow>\r\n\r\n                        <MDBCol>\r\n                            <LoginModalPage userLoginAuth={eventProps.userLoginAuth}/>\r\n                        </MDBCol>\r\n                        <MDBCol>\r\n                            <MDBBtn\r\n                                disabled={listProps.panelControlButtons.kanban_board}\r\n                                onClick={eventProps.resetMainKanbanView}\r\n                                className='task-priority-button'\r\n                            >Kanban Board\r\n                            </MDBBtn>\r\n                        </MDBCol>\r\n                        <MDBCol>\r\n                            <MDBBtn\r\n                                disabled={listProps.panelControlButtons.priority_board}\r\n                                onClick={eventProps.filterPriorityTasks}\r\n                                className='task-priority-button'\r\n                            >Priority Tasks\r\n                            </MDBBtn>\r\n                        </MDBCol>\r\n                    </MDBRow>\r\n\r\n                </MDBContainer>\r\n                {listProps.serverNote\r\n                    ?\r\n                    <MDBContainer className='server-notification'>\r\n                        <MDBRow center>\r\n                            <MDBCol>\r\n                                <ServerNotifications\r\n                                    serverNote={listProps.serverNote}\r\n                                    resetServerNotes={eventProps.resetServerNotes}\r\n                                />\r\n                            </MDBCol>\r\n                        </MDBRow>\r\n                    </MDBContainer>\r\n                    : null\r\n                }\r\n                {\r\n                    listProps.panelControlButtons.kanban_board && !listProps.panelControlButtons.priority_board\r\n                        ?\r\n                        <NewKanbanDashboard\r\n                            boardMessage={listProps.boardMessage}\r\n                            handleFindForEditTaskModal={eventProps.findTaskForEdit}\r\n                            {...listProps}\r\n                            {...eventProps}\r\n                        />\r\n                        :\r\n                        <PriorityOrderedTasks\r\n                            boardMessage={listProps.boardMessage}\r\n                            handleFindForEditTaskModal={eventProps.findTaskForEdit}\r\n                            {...listProps}\r\n                            {...eventProps}\r\n                        />\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}","export default (obj) => {\r\n\r\n    // null and undefined are \"empty\"\r\n    if (obj == null) return true;\r\n\r\n    // Assume if it has a length property with a non-zero value\r\n    // that that property is correct.\r\n    if (obj.length > 0)    return false;\r\n    if (obj.length === 0)  return true;\r\n\r\n    // If it isn't an object at this point\r\n    // it is empty, but it can't be anything *but* empty\r\n    // Is it empty?  Depends on your application.\r\n    if (typeof obj !== \"object\") return true;\r\n\r\n    // Otherwise, does it have any properties of its own?\r\n    // Note that this doesn't handle\r\n    // toString and valueOf enumeration bugs in IE < 9\r\n    for (var key in obj) {\r\n        if (hasOwnProperty.call(obj, key)) return false;\r\n    }\r\n\r\n    return true;\r\n}","export default (arr, a, b) => {\r\n    let temp = arr[a];\r\n    arr[a] = arr[b];\r\n    arr[b] = temp;\r\n    return arr;\r\n}","export default (name, value, length) => {\r\n    const titleFormat = /^[0-9A-Za-z\\s]+$/;\r\n    const personNameFormat = /^[a-zA-Z]+$/;\r\n    switch (name) {\r\n        case 'board_order':\r\n            return {\r\n                errors:\r\n                    isNaN(value) || value === \"\"\r\n                        ? 'Input must be an INTEGER!'\r\n                        : parseInt(value) <= 0\r\n                        ? 'Must be greater than zero!'\r\n                        : parseInt(value) > length + 1\r\n                            ? `Must be less or equal ${length + 1}!`\r\n                            : '',\r\n                inputStatus:\r\n                    isNaN(value) || value === \"\" || parseInt(value) <= 0 || parseInt(value) > length + 1\r\n            };\r\n        case 'board_title':\r\n            return {\r\n                errors:\r\n                    !value.match(titleFormat)\r\n                        ? 'Please, input alphanumeric characters only!'\r\n                        : value.length > 10\r\n                            ? 'This title is too long'\r\n                            : '',\r\n                inputStatus:\r\n                    !value.match(titleFormat) || value.length > 10\r\n            };\r\n        case 'task_title':\r\n            return {\r\n                errors:\r\n                    !value.match(titleFormat)\r\n                        ? 'Please, input alphanumeric characters only!'\r\n                        : value.length > 13\r\n                        ? 'This title is too long'\r\n                        : '',\r\n                inputStatus:\r\n                    !value.match(titleFormat) || value.length > 13\r\n            };\r\n        case 'task_description':\r\n            return {\r\n                errors:\r\n                    value.length >= 100\r\n                        ? 'Description must be less than 100 characters'\r\n                        : '',\r\n                inputStatus:\r\n                    value.length >= 100\r\n            };\r\n        case 'first':\r\n            return {\r\n                errors:\r\n                    !value.match(personNameFormat)\r\n                        ? 'Please, input alphabetical characters only!'\r\n                        : value.length < 3\r\n                        ? 'First name is too short'\r\n                        : '',\r\n                inputStatus:\r\n                    !value.match(personNameFormat) || value.length < 3\r\n            };\r\n        case 'last':\r\n            return {\r\n                errors:\r\n                    !value.match(personNameFormat)\r\n                        ? 'Please, input alphabetical characters only!'\r\n                        : value.length < 3\r\n                        ? 'Last name is too short'\r\n                        : '',\r\n                inputStatus:\r\n                    !value.match(personNameFormat) || value.length < 3\r\n            };\r\n        default:\r\n            return {\r\n                errors : '',\r\n                inputStatus: false\r\n            }\r\n    }\r\n}\r\n","import React, {useState, useEffect, useRef} from 'react';\r\nimport Main from './components/main';\r\nimport '@fortawesome/fontawesome-free/css/all.min.css';\r\nimport 'bootstrap-css-only/css/bootstrap.min.css';\r\nimport 'mdbreact/dist/css/mdb.css';\r\nimport uuid from 'react-uuid';\r\nimport jwt from 'jsonwebtoken';\r\nimport './App.css';\r\nimport isEmpty from './helpers/EmptyObject';\r\nimport SwapArrayElements from \"./helpers/SwapArrayElements\";\r\nimport ValidateUserInput from \"./helpers/ValidateUserInputChange\";\r\n\r\n\r\nconst initialPriorityTaskList = [\r\n    {\r\n        priority_level: 'high',\r\n        id: uuid(),\r\n        order: 0,\r\n        tasks: []\r\n    },\r\n    {\r\n        priority_level: 'low',\r\n        order: 1,\r\n        id: uuid(),\r\n        tasks: []\r\n    }\r\n];\r\n\r\nconst initialErrors = {\r\n    boardTitleError: {\r\n        errors: '',\r\n        inputStatus: false\r\n    },\r\n    taskTitleError: {\r\n        errors: '',\r\n        inputStatus: false\r\n    },\r\n    boardOrderError: {\r\n        errors: '',\r\n        inputStatus: false\r\n    },\r\n    taskDescriptionError: {\r\n        errors: '',\r\n        inputStatus: false\r\n    },\r\n    firstNameError: {\r\n        errors: '',\r\n        inputStatus: false\r\n    },\r\n    lastNameError: {\r\n        errors: '',\r\n        inputStatus: false\r\n    }\r\n};\r\n\r\n//const URI_local = 'http://localhost:8080';\r\nconst URI_heroku = 'https://rest-api-server-kanban.herokuapp.com';\r\n\r\nfunction KanbanBoard() {\r\n\r\n    const [note, setNote] = useState(\"\");\r\n    const [loading, setLoading] = useState(true);\r\n    const [boards, setBoards] = useState([]);\r\n    const [userLogin, setUserLogin] = useState(false);\r\n    const [inputErrors, setInputErrors] = useState(initialErrors);\r\n    const [boardsSchema, setBoardsSchema] = useState([]);\r\n    const [priorityTasks, setPriorityTasks] = useState(initialPriorityTaskList);\r\n    const [editModalButtonClick, setEditModalButtonClick] = useState(false);\r\n    const [searchEditTask, setSearchEditTask] = useState({});\r\n    const [panelControlButtons, setPanelControlButtons] = useState({\r\n        kanban_board: true,\r\n        priority_board: false\r\n    });\r\n    const [serverResponseNote, setServerResponseNote] = useState('');\r\n\r\n    //Pull the latest board order from the child component...\r\n    const boardsRef = useRef();\r\n    const setBoardOrderState = data => {\r\n        boardsRef.current = data;\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        async function getData() {\r\n            const res = await fetch(\r\n                `${URI_heroku}/boards`);\r\n            res.json()\r\n                .then(data => {\r\n                    setBoards(data.boards.map(board => (\r\n                            {\r\n                                id: board._id,\r\n                                order: board.order,\r\n                                name: board.name,\r\n                                title: board.title,\r\n                                tasks: board.tasks.map(task => ({\r\n                                    id: task._id,\r\n                                    visibility: true,\r\n                                    task_title: task.title,\r\n                                    location: task.location,\r\n                                    task_description: task.description,\r\n                                    task_priority: task.priority,\r\n                                    board: task.board,\r\n                                    first: task.first,\r\n                                    last: task.last\r\n                                }))\r\n                            }\r\n                        ))\r\n                    );\r\n                    setLoading(false);\r\n                    setBoards(boards => boards.sort((a, b) => a.order - b.order));\r\n                    setBoardsSchema([...Array(data.boards.length).keys()]);\r\n                })\r\n                .catch(err => console.log(err));\r\n            setServerResponseNote('');\r\n        };\r\n\r\n        getData()\r\n            .then(() => console.log('Successfully rendered!'))\r\n            .catch(() => console.log('Rendering failed'));\r\n\r\n        let store = JSON.parse(localStorage.getItem('login'));\r\n\r\n        const isExpired = store => {\r\n            if (store.token && jwt.decode(store.token)) {\r\n                const now = new Date();\r\n                return store.expiryDate < now.getTime();\r\n            }\r\n            return false;\r\n        }\r\n        if (store && store.token) {\r\n            if(isExpired(store)) {\r\n                console.log('Your login session expired!')\r\n                setUserLogin(false);\r\n                localStorage.clear();\r\n            }\r\n            else {\r\n                setUserLogin(true);\r\n            }\r\n        }\r\n    }, []);\r\n\r\n\r\n    const handleUserLoginAuth = credentials => {\r\n        fetch(`${URI_heroku}/users/login`,\r\n            {\r\n                method: 'POST',\r\n                headers: {'Content-Type': 'application/json'},\r\n                body: JSON.stringify(credentials)\r\n            })\r\n            .then(response =>\r\n                response.json()\r\n                    .then(result => {\r\n                    console.warn('result', result);\r\n                    if (result.token) {\r\n                        const now = new Date();\r\n                        localStorage.setItem('login', JSON.stringify({\r\n                                login: true,\r\n                                token: result.token,\r\n                                birthDate: now.getTime(),\r\n                                tokenLife: jwt.decode(result.token).exp * 1000 - now.getTime(),\r\n                                expiryDate: jwt.decode(result.token).exp * 1000\r\n                            }\r\n                        ));\r\n                    } else {\r\n                        localStorage.setItem('login', JSON.stringify({\r\n                                login: false,\r\n                                error: {\r\n                                    message: result.message,\r\n                                    description: result.description\r\n                                }\r\n                            }\r\n                        ));\r\n                    }\r\n                    let store = JSON.parse(localStorage.getItem('login'));\r\n                    if (store && store.token) {\r\n                        setUserLogin(true);\r\n                    }\r\n                }))\r\n            .catch(() => console.log('error occurred'))\r\n    };\r\n\r\n    const handleFindForEditTaskModal = e => {\r\n        const name = e.target.getAttribute('name');\r\n        const id = e.target.id;\r\n        if (id) setSearchEditTask(boards.find(board => board.name === name).tasks.find(task => task.id === id));\r\n        setEditModalButtonClick(!editModalButtonClick);\r\n    }\r\n\r\n    const handleToggleEditTaskModal = () => setEditModalButtonClick(!editModalButtonClick);\r\n\r\n    const handleAddNewBoard2 = board => {\r\n        console.log(board)\r\n        if (!isEmpty(board)) {\r\n            const bearer = 'Bearer ' + JSON.parse(localStorage.getItem('login')).token;\r\n            fetch(`${URI_heroku}/boards`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': bearer\r\n                },\r\n                body: JSON.stringify({\r\n                    ...board,\r\n                    order: board.order,\r\n                    name: board.title.toLowerCase()\r\n                })\r\n            })\r\n                .then(response => response.json())\r\n                .then(result => {\r\n                    const board = result.createdBoard;\r\n                    if(board) {\r\n                        console.log('NOTE: ', result.message);\r\n                        setServerResponseNote(result.message);\r\n                        setBoards(boards => [\r\n                            ...boards.slice(0, board.order),\r\n                            Object.assign({},\r\n                                {\r\n                                    ...board,\r\n                                    order: board.order\r\n                                }),\r\n                            ...boards.slice(board.order)\r\n                        ]);\r\n                        setBoards(boards => boards.map((board, id) =>\r\n                            board.order <= id ?\r\n                                {\r\n                                    ...board,\r\n                                    order: id\r\n                                }\r\n                                :\r\n                                {\r\n                                    ...board,\r\n                                    order: id + 1\r\n                                }\r\n                        ));\r\n                        setBoardsSchema(boardsSchema => [...boardsSchema].concat(boardsSchema.length));\r\n\r\n                        return [\r\n                            ...boardsRef.current.slice(0, board.order),\r\n                            Object.assign({},\r\n                                {\r\n                                    id: board.id,\r\n                                    order: board.order,\r\n                                    name: board.name\r\n                                }),\r\n                            ...boardsRef.current.slice(board.order)\r\n                        ].map((board, id) =>\r\n                            board.order <= id ?\r\n                                {\r\n                                    ...board,\r\n                                    order: id\r\n                                }\r\n                                :\r\n                                {\r\n                                    ...board,\r\n                                    order: id + 1\r\n                                }\r\n                        );\r\n                    }else{\r\n                        throw new Error('Your login session is expired or you do not have a permission to perform this operation!');\r\n                    }\r\n                })\r\n                .then(data => {\r\n                    fetch(`${URI_heroku}/boards`, {\r\n                        method: 'PATCH',\r\n                        headers: {'Content-Type': 'application/json'},\r\n                        body: JSON.stringify(data)\r\n                    })\r\n                        .then(response => response.json())\r\n                        .then(result => {\r\n                            console.log('NOTE: ', result.message);\r\n                        })\r\n                        .catch(err => {\r\n                            console.log(err)\r\n                        })\r\n                })\r\n                .catch(err => {\r\n                    console.log(err);\r\n                });\r\n        };\r\n    }\r\n\r\n    const handleInsertNewBoard2 = board => {\r\n        const index = board.order - 1;\r\n        console.log(board)\r\n        if (!isEmpty(board)) {\r\n            const bearer = 'Bearer ' + JSON.parse(localStorage.getItem('login')).token;\r\n            fetch(`${URI_heroku}/boards`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': bearer\r\n                },\r\n                body: JSON.stringify({\r\n                    ...board,\r\n                    order: index,\r\n                    name: board.title.toLowerCase()\r\n                })\r\n            })\r\n                .then(response => response.json())\r\n                .then(result => {\r\n                    const board = result.createdBoard;\r\n                    if(board) {\r\n                        console.log('NOTE: ', result.message);\r\n                        setBoards(boards => [\r\n                            ...boards.slice(0, index),\r\n                            Object.assign({},\r\n                                {\r\n                                    ...board,\r\n                                    order: index\r\n                                }),\r\n                            ...boards.slice(index)\r\n                        ]);\r\n                        setBoards(boards => boards.map((board, id) =>\r\n                            board.order <= id ?\r\n                                {\r\n                                    ...board,\r\n                                    order: id\r\n                                }\r\n                                :\r\n                                {\r\n                                    ...board,\r\n                                    order: id + 1\r\n                                }\r\n                        ));\r\n                        setBoardsSchema(boardsSchema => [...boardsSchema].concat(boardsSchema.length));\r\n\r\n                        return [\r\n                            ...boardsRef.current.slice(0, index),\r\n                            Object.assign({},\r\n                                {\r\n                                    id: board.id,\r\n                                    order: board.order,\r\n                                    name: board.name\r\n                                }),\r\n                            ...boardsRef.current.slice(index)\r\n                        ].map((board, id) =>\r\n                            board.order <= id ?\r\n                                {\r\n                                    ...board,\r\n                                    order: id\r\n                                }\r\n                                :\r\n                                {\r\n                                    ...board,\r\n                                    order: id + 1\r\n                                }\r\n                        );\r\n                    }else{\r\n                        throw new Error('Your login session is expired or you do not have a permission to perform this operation!');\r\n                    }\r\n                })\r\n                .then(data => {\r\n                    fetch(`${URI_heroku}/boards`, {\r\n                        method: 'PATCH',\r\n                        headers: {'Content-Type': 'application/json'},\r\n                        body: JSON.stringify(data)\r\n                    })\r\n                        .then(response => response.json())\r\n                        .then(result => {\r\n                            console.log('NOTE: ', result.message);\r\n                        })\r\n                        .catch(err => {\r\n                            console.log(err)\r\n                        })\r\n                })\r\n                .catch(err => {\r\n                    console.log(err);\r\n                });\r\n        };\r\n    };\r\n\r\n\r\n    const handleValidateUserInput2 = (input, name) => {\r\n        if (name === 'board_order') setInputErrors(inputErrors => ({\r\n            ...inputErrors,\r\n            boardOrderError: ValidateUserInput(name, input, boards.length)\r\n        }));\r\n        if (name === 'board_title') setInputErrors(inputErrors => ({\r\n            ...inputErrors,\r\n            boardTitleError: ValidateUserInput(name, input, boards.length)\r\n        }));\r\n        if (name === 'task_title') setInputErrors(inputErrors => ({\r\n            ...inputErrors,\r\n            taskTitleError: ValidateUserInput(name, input, boards.length)\r\n        }));\r\n        if (name === 'task_description') setInputErrors(inputErrors => ({\r\n            ...inputErrors,\r\n            taskDescriptionError: ValidateUserInput(name, input, boards.length)\r\n        }));\r\n        if (name === 'first') setInputErrors(inputErrors => ({\r\n            ...inputErrors,\r\n            firstNameError: ValidateUserInput(name, input, boards.length)\r\n        }));\r\n        if (name === 'last') setInputErrors(inputErrors => ({\r\n            ...inputErrors,\r\n            lastNameError: ValidateUserInput(name, input, boards.length)\r\n        }));\r\n    };\r\n\r\n    const handleGeneratePriorityTasksList2 = () => {\r\n        setPriorityTasks(initialPriorityTaskList);\r\n        boards.map(board => (\r\n                board.tasks.forEach(task => {\r\n                    if (task.task_priority) return setPriorityTasks(priorityTasks =>\r\n                        priorityTasks.map(list => list.priority_level === 'high'\r\n                            ?\r\n                            {\r\n                                ...list,\r\n                                tasks: list.tasks.concat({\r\n                                    ...task,\r\n                                    location: 'priority_list',\r\n                                    priority_level: 'high'\r\n                                })\r\n                            }\r\n                            :\r\n                            list\r\n                        ));\r\n                    else return setPriorityTasks(priorityTasks =>\r\n                        priorityTasks.map(list => list.priority_level === 'low'\r\n                            ?\r\n                            {\r\n                                ...list,\r\n                                tasks: list.tasks.concat({\r\n                                    ...task,\r\n                                    location: 'priority_list',\r\n                                    priority_level: 'low'\r\n                                })\r\n                            }\r\n                            :\r\n                            list\r\n                        ));\r\n                })\r\n            )\r\n        );\r\n        setPanelControlButtons({\r\n                kanban_board: false,\r\n                priority_board: true\r\n            }\r\n        );\r\n    };\r\n\r\n    const handleResetMainKanbanView = () => setPanelControlButtons({\r\n            kanban_board: true,\r\n            priority_board: false\r\n        }\r\n    );\r\n\r\n    const handleResetAllErrors2 = () => setInputErrors(initialErrors);\r\n\r\n    const handleSubmitNewTaskItems2 = revised_task => {\r\n        fetch(`${URI_heroku}/tasks/${revised_task.id}`, {\r\n            method: 'PATCH',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify(revised_task)\r\n        })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                const new_task = data.updatedTask;\r\n                setBoards(boards => boards.map(board =>\r\n                    board.name === new_task.board\r\n                        ?\r\n                        {\r\n                            ...board,\r\n                            tasks: board.tasks.map(old_task =>\r\n                                old_task.id === new_task.id\r\n                                    ?\r\n                                    {\r\n                                        ...old_task,\r\n                                        ...new_task\r\n                                    }\r\n                                    :\r\n                                    old_task\r\n                            )\r\n                        }\r\n                        :\r\n                        board\r\n                ));\r\n            }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    };\r\n\r\n    const handleDeleteBoard2 = e => {\r\n        const bearer = 'Bearer ' + JSON.parse(localStorage.getItem('login')).token;\r\n        const data = boardsRef.current\r\n            .filter(board => board.id !== e.target.id)\r\n            .map((board, id) => ({...board, order: id}));\r\n        fetch(`${URI_heroku}/boards/${e.target.id}`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': bearer\r\n            },\r\n            body: JSON.stringify(data)\r\n        })\r\n            .then(response => response.json())\r\n            .then((result, err) => {\r\n                console.log('NOTE: ', result.message);\r\n                if (err) throw new Error('Your login session is expired or you do not have a permission to perform this operation!')\r\n                else {\r\n                    const id = result.deletedBoard;\r\n                    setBoards(boards => boards.filter(board => board.id !== id));\r\n                }\r\n\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n        setBoards(boards => boards.map((board, id) => ({...board, order: id})));\r\n        setBoardsSchema(boardsSchema => [...boardsSchema].filter(elem => elem !== boards.length - 1));\r\n\r\n    };\r\n\r\n    const handleCreateNewTask2 = task => {\r\n\r\n        const bearer = 'Bearer ' + JSON.parse(localStorage.getItem('login')).token;\r\n\r\n        if (isEmpty(task) !== true) {\r\n            fetch(`${URI_heroku}/tasks`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Authorization': bearer,\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({...task, board: 'todo'})\r\n            })\r\n                .then(response => response.json())\r\n                .then(result => {\r\n                    if (result.err) throw new Error('Your login session is expired or you do not have a permission to perform this action...');\r\n                    else {\r\n                        const task = result.createdTask;\r\n                        console.log('NOTE: ', result.message);\r\n                        setBoards(boards => boards.map(board =>\r\n                            board.name === task.board\r\n                                ?\r\n                                {\r\n                                    ...board,\r\n                                    tasks: board.tasks.concat(\r\n                                        {\r\n                                            id: task._id,\r\n                                            visibility: true,\r\n                                            task_title: task.title,\r\n                                            location: task.location,\r\n                                            task_description: task.description,\r\n                                            task_priority: task.priority,\r\n                                            board: task.board,\r\n                                            first: task.first,\r\n                                            last: task.last\r\n                                        }\r\n                                    )\r\n                                }\r\n                                :\r\n                                board\r\n                        ));\r\n                    }\r\n                })\r\n                .catch(err => console.log(err));\r\n        } else setNote('This list is empty');\r\n    };\r\n\r\n    const handleSwapTasksWithinKanbanBoard2 = e => {\r\n        const task_id = e.target.id;\r\n        const direction = e.target.getAttribute('name');\r\n        const board_name = e.target.getAttribute('board');\r\n        setBoards(boards => [...boards].map(board => {\r\n            if (board.name === board_name) {\r\n                const index1 = board.tasks.findIndex(task => task.id === task_id);\r\n                const tasks = direction === 'up'\r\n                    ? SwapArrayElements(board.tasks, index1, index1 - 1)\r\n                    : SwapArrayElements(board.tasks, index1, index1 + 1)\r\n                return {...board, tasks}\r\n            } else {\r\n                return board;\r\n            }\r\n        }));\r\n    };\r\n\r\n    const handleSwapTasksWithinPriorityList2 = e => {\r\n        const task_id = e.target.id;\r\n        const direction = e.target.getAttribute('name');\r\n        const list_priority_level = e.target.getAttribute('priority_level');\r\n\r\n        setPriorityTasks(priorityTasks => [...priorityTasks].map(list => {\r\n            if (list.priority_level === list_priority_level) {\r\n                const index1 = list.tasks.findIndex(task => task.id === task_id);\r\n                const tasks = direction === 'up'\r\n                    ? SwapArrayElements(list.tasks, index1, index1 - 1)\r\n                    : SwapArrayElements(list.tasks, index1, index1 + 1)\r\n                return {...list, tasks}\r\n            } else {\r\n                return list;\r\n            }\r\n        }));\r\n    };\r\n\r\n\r\n    const handleMoveTaskBetweenBoards2 = e => {\r\n        const id = e.target.getAttribute('id');\r\n        const direction = e.target.getAttribute('direction');\r\n        const boardOrder = e.target.getAttribute('order');\r\n        const location = e.target.getAttribute('location');\r\n        const task_priority = e.target.getAttribute('task_priority');\r\n        let isTrueSet = (task_priority === 'true');\r\n        let movingTask;\r\n        location === 'kanban_board'\r\n            ?\r\n            movingTask = boards.find(board => board.order === parseInt(boardOrder)).tasks.find(task => task.id === id)\r\n            :\r\n            movingTask = priorityTasks.find(list => list.order === parseInt(boardOrder)).tasks.find(task => task.id === id);\r\n\r\n        ///remove a task....\r\n\r\n        location === 'kanban_board'\r\n            ?\r\n            setBoards(boards => boards.map(board =>\r\n                    board.order === parseInt(boardOrder)\r\n                        ?\r\n                        {\r\n                            ...board,\r\n                            tasks: board.tasks.filter(task => task.id !== id)\r\n                        }\r\n                        :\r\n                        board\r\n                )\r\n            )\r\n            :\r\n            setPriorityTasks(priorityTasks => priorityTasks.map(list =>\r\n                    list.order === parseInt(boardOrder)\r\n                        ?\r\n                        {\r\n                            ...list,\r\n                            tasks: list.tasks.filter(task => task.id !== id)\r\n                        }\r\n                        :\r\n                        list\r\n                )\r\n            );\r\n        ////Add a task......\r\n\r\n        location === 'kanban_board'\r\n            ?\r\n            direction === 'right'\r\n                ?\r\n                setBoards(boards => boards.map(board =>\r\n                        board.order === parseInt(boardOrder) + 1\r\n                            ?\r\n                            {\r\n                                ...board,\r\n                                tasks: board.tasks.concat({...movingTask, board: board.name})\r\n                            }\r\n                            : board\r\n                    )\r\n                )\r\n                :\r\n                setBoards(boards => boards.map(board =>\r\n                        board.order === parseInt(boardOrder) - 1\r\n                            ?\r\n                            {\r\n                                ...board,\r\n                                tasks: board.tasks.concat({...movingTask, board: board.name})\r\n                            }\r\n                            : board\r\n                    )\r\n                )\r\n            :\r\n            direction === 'right'\r\n                ?\r\n                setPriorityTasks(priorityList => priorityList.map(list =>\r\n                        list.order === parseInt(boardOrder) + 1\r\n                            ?\r\n                            {\r\n                                ...list,\r\n                                tasks: list.tasks.concat({\r\n                                    ...movingTask,\r\n                                    priority_level: list.priority_level,\r\n                                    task_priority: false\r\n                                })\r\n                            }\r\n                            : list\r\n                    )\r\n                )\r\n                :\r\n                setPriorityTasks(priorityList => priorityList.map(list =>\r\n                        list.order === parseInt(boardOrder) - 1\r\n                            ?\r\n                            {\r\n                                ...list,\r\n                                tasks: list.tasks.concat({\r\n                                    ...movingTask,\r\n                                    priority_level: list.priority_level,\r\n                                    task_priority: true\r\n                                })\r\n                            }\r\n                            : list\r\n                    )\r\n                );\r\n        if (movingTask.location === 'priority_list')\r\n            setBoards(boards => [...boards].map(board =>\r\n                board.name === movingTask.board\r\n                    ?\r\n                    {\r\n                        ...board,\r\n                        tasks: board.tasks.map(task =>\r\n                            task.id === movingTask.id\r\n                                ?\r\n                                {\r\n                                    ...task,\r\n                                    task_priority: !isTrueSet\r\n                                }\r\n                                :\r\n                                task\r\n                        )\r\n                    }\r\n                    : board\r\n            ));\r\n        if (location === 'kanban_board') fetch(`${URI_heroku}/boards/${id}`, {\r\n            method: 'PATCH',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({\r\n                moveOutBoard: +boardOrder,\r\n                moveInBoard: direction === 'left' ? +boardOrder - 1 : +boardOrder + 1\r\n            })\r\n        })\r\n            .then(response => response.json())\r\n            .then(result => {\r\n                console.log(result);\r\n            })\r\n            .catch(err => console.log(err));\r\n    };\r\n\r\n    const handleDragAndDrop2 = (board_name, task_name, id) => {\r\n        const dragTask = boardsRef.current.find(board => board.name === task_name).tasks.find(task => task.id === id);\r\n\r\n        setBoards(boards => boards.map(board =>\r\n                board.name === task_name && board_name !== null\r\n                    ?\r\n                    {\r\n                        ...board,\r\n                        tasks: board.tasks.filter(task => task.id !== id)\r\n                    }\r\n                    :\r\n                    board\r\n            )\r\n        );\r\n        setBoards(boards => boards.map(board =>\r\n                board.name === board_name\r\n                    ?\r\n                    {\r\n                        ...board,\r\n                        tasks: board.tasks.concat({...dragTask, board: board.name})\r\n                    }\r\n                    : board\r\n            )\r\n        );\r\n        fetch(`${URI_heroku}/boards/${id}`, {\r\n            method: 'PATCH',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                moveOutBoard: +boardsRef.current.find(board => board.name === task_name).order,\r\n                moveInBoard: +boardsRef.current.find(board => board.name === board_name).order\r\n            })\r\n        })\r\n            .then(response => response.json())\r\n            .then(result => {\r\n                console.log(result);\r\n            })\r\n            .catch(err => console.log(err));\r\n\r\n    };\r\n\r\n    const handleDeleteTaskItem2 = e => {\r\n        const bearer = 'Bearer ' + JSON.parse(localStorage.getItem('login')).token;\r\n        fetch(`${URI_heroku}/tasks/${e.target.id}`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Authorization': bearer,\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                id: e.target.id,\r\n                board: e.target.getAttribute('name'),\r\n                title: e.target.getAttribute('title')\r\n            })\r\n        })\r\n            .then(response => response.json())\r\n            .then(result => {\r\n                console.log(result.message);\r\n                if (result.err) throw new Error('Your login session is expired or you do not have a permission to perform this operation!')\r\n                else {\r\n                    const { deletedTask: {id, board_name} } = result;\r\n                    setBoards(boards => boards.map(board =>\r\n                        board.name === board_name\r\n                            ?\r\n                            {\r\n                                ...board,\r\n                                tasks: board.tasks.filter(task => task.id !== id)\r\n                            }\r\n                            :\r\n                            board\r\n                    ));\r\n                }\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n        if (priorityTasks.length > 0) setPriorityTasks(priorityTasks.filter(task => task.id !== e.target.id));\r\n    };\r\n\r\n    const handleShowTaskItem2 = e => {\r\n        let visible;\r\n        const id = e.target.getAttribute('id');\r\n        const name = e.target.getAttribute('name');\r\n        const className = e.target.getAttribute('class').split(\" \")[0];\r\n        const location = e.target.getAttribute('location');\r\n        const priority_level = e.target.getAttribute('priority_level');\r\n        className === 'show' ? visible = true : visible = false;\r\n        location === 'kanban_board'\r\n            ?\r\n            setBoards(boards => boards.map(board =>\r\n                    board.name === name\r\n                        ?\r\n                        {\r\n                            ...board,\r\n                            tasks: board.tasks.map(task => task.id === id\r\n                                ?\r\n                                {\r\n                                    ...task,\r\n                                    visibility: visible\r\n                                }\r\n                                :\r\n                                task\r\n                            )\r\n                        }\r\n                        :\r\n                        board\r\n                )\r\n            )\r\n            :\r\n            setPriorityTasks(priorityTasks => priorityTasks.map(list =>\r\n                    list.priority_level === priority_level\r\n                        ?\r\n                        {\r\n                            ...list,\r\n                            tasks: list.tasks.map(task => task.id === id\r\n                                ?\r\n                                {\r\n                                    ...task,\r\n                                    visibility: visible\r\n                                }\r\n                                :\r\n                                task\r\n                            )\r\n                        }\r\n                        :\r\n                        list\r\n                )\r\n            )\r\n    };\r\n\r\n    const handleResetServerNotes = () => {\r\n        console.log('Reset');\r\n    }\r\n\r\n////////////////////////////////////////////////////////////////////\r\n////////////////////////////////////////////////////////////////////\r\n////////////////////////////////////////////////////////////////////\r\n\r\n    const handleEventProps = {\r\n        insertBoard: handleInsertNewBoard2,\r\n        addBoard: handleAddNewBoard2,\r\n        createTask: handleCreateNewTask2,\r\n        moveTask: handleMoveTaskBetweenBoards2,\r\n        dragTask: handleDragAndDrop2,\r\n        deleteTask: handleDeleteTaskItem2,\r\n        hideTask: handleShowTaskItem2,\r\n        showTask: handleShowTaskItem2,\r\n        submitNewTaskItems: handleSubmitNewTaskItems2,\r\n        deleteBoard: handleDeleteBoard2,\r\n        validateInput: handleValidateUserInput2,\r\n        resetErrors: handleResetAllErrors2,\r\n        setBoardOrderState: setBoardOrderState,\r\n        userLoginAuth: handleUserLoginAuth,\r\n        resetServerNotes: handleResetServerNotes,\r\n        swapTasks: {\r\n            swapKanbanTasks: handleSwapTasksWithinKanbanBoard2,\r\n            swapPriorityTasks: handleSwapTasksWithinPriorityList2\r\n        },\r\n        swapPriorityTasks: handleSwapTasksWithinPriorityList2,\r\n        filterPriorityTasks: handleGeneratePriorityTasksList2,\r\n        toggleEditModal: handleToggleEditTaskModal,\r\n        findTaskForEdit: handleFindForEditTaskModal,\r\n        resetMainKanbanView: handleResetMainKanbanView\r\n\r\n    };\r\n\r\n    const handleStateProps = {\r\n        userLogin: userLogin,\r\n        serverNote: serverResponseNote,\r\n        boards: boards,\r\n        loading: loading,\r\n        priorityTasks: priorityTasks,\r\n        boardMessage: note,\r\n        errors: inputErrors,\r\n        boardsSchema: boardsSchema,\r\n        searchEditTask: searchEditTask,\r\n        modalButtonClick: editModalButtonClick,\r\n        panelControlButtons: panelControlButtons\r\n    };\r\n\r\n    return <Main {...handleEventProps} {...handleStateProps} />\r\n\r\n}\r\n\r\nexport default KanbanBoard;","import React from 'react';\nimport KanbanBoard from './KanbanBoard';\n\nexport default () => {\n    return (\n        <div className='container'>\n            <KanbanBoard/>\n        </div>\n    )\n};\n","import { transitions, positions } from 'react-alert';\r\n\r\nexport const options = {\r\n    position: positions.TOP_CENTER,\r\n    timeout: 5000,\r\n    offset: '20px',\r\n    containerStyle: {\r\n        zIndex: 9999,\r\n    },\r\n    transition: transitions.SCALE\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider as AlertProvider} from 'react-alert';\nimport App from './App';\nimport {options} from './helpers/AlertOptions';\nimport AlertTemplate from 'react-alert-template-basic';\n\nReactDOM.render(\n        <AlertProvider template={AlertTemplate} {...options}>\n            <App/>\n        </AlertProvider>,\n    document.getElementById('root'));\n\n"],"sourceRoot":""}