{"version":3,"sources":["components/task_modal/InputForm.js","components/task_modal/DescriptionTaskInput.js","components/board_modal/ErrorMessage.js","helpers/ValidateUserBlankInput.js","components/task_modal/ToggleSwitchPriority.js","components/task_modal/ModalPage.js","components/board_modal/OrderInput.js","components/board_modal/InsertionBoardSchema.js","components/board_modal/ModalPage.js","components/main/ButtonGroup.js","components/main/TaskItem.js","components/main/NewKanbanDashboard.js","components/main/PriorityOrderedTasks.js","components/edit_modal/ModalPage.js","components/main/index.js","helpers/EmptyObject.js","helpers/SwapArrayElements.js","helpers/ValidateUserInputChange.js","App.js","helpers/AlertOptions.js","index.js"],"names":["handleDelegateNameChange","fullname","style","marginBottom","prepend","inputs","noTag","name","value","first","onChange","e","target","getAttribute","type","last","description","descriptionInputChange","className","label","outline","error","color","arr","some","input","SwitchButton","props","state","checked","handleChange","bind","this","setState","switchPriority","md","marginLeft","fontSize","Component","createTask","resetErrors","validateInput","errors","taskTitleError","taskDescriptionError","firstNameError","lastNameError","useState","modalButtonClick","setModalButtonClick","taskTitle","setTaskTitle","taskDescription","setTaskDescription","highTaskPriority","setHighTaskPriority","delegateName","setDelegateName","createNewTask","setCreateNewTask","alert","useAlert","stableDispatch","useCallback","useEffect","handleToggleModal","onClick","zIndex","isOpen","toggle","size","ErrorMessage","DescriptionTaskInput","id","task_priority","InputForm","attribute","disabled","inputStatus","ValidateUserBlankInput","timeout","onOpen","console","log","onClose","task_title","location","task_description","boardOrderChange","order","newBoardPlaceOrder","boardsSchema","isNaN","marginRight","map","block","idx","key","createBoard","boardOrderError","boardTitleError","boardTitle","setBoardTitle","boardOrder","setBoardOrder","createNewBoard","setCreateNewBoard","setNewBoardPlaceOrder","InsertionBoardSchema","OrderInput","title","task","board","priority_level","handleFindForEditTaskModal","boardLength","moveTask","deleteTask","hideTask","boolStr","direction","aria-hidden","index","listLength","swapTasks","editTask","toggleModal","setToggleModal","DescriptionModal","handleToggleDescriptionModal","draggable","onDragStart","dataTransfer","setData","onDragOver","stopPropagation","display","justifyContent","onMouseOver","document","getElementById","querySelector","innerHTML","onMouseLeave","ButtonGroup","boards","swapKanbanTasks","showTask","dragTask","deleteBoard","boardMessage","dropTask","preventDefault","task_id","getData","dragTaskOver","onDrop","tasks","length","list","visibility","TaskItem","autoFocus","textAlign","priorityTasks","swapPriorityTasks","toUpperCase","priorityTasksList","handleToggleEditTaskModal","submitNewTaskItems","searchEditTask","editTaskItems","setEditTaskItems","handleEditTaskItemChange","htmlFor","first_name","last_name","listProps","panelControlButtons","eventProps","filterPriorityTasks","toggleEditModal","findTaskForEdit","resetMainKanbanView","href","kanban_board","priority_board","NewKanbanDashboard","PriorityOrderedTasks","obj","hasOwnProperty","call","a","b","temp","titleFormat","personNameFormat","parseInt","match","initialBoards","uuid","initialPriorityTaskList","initialErrors","App","note","setNote","setBoards","inputErrors","setInputErrors","Array","keys","setBoardsSchema","setPriorityTasks","editModalButtonClick","setEditModalButtonClick","setSearchEditTask","setPanelControlButtons","handleSwapTasksWithinPriorityList2","list_priority_level","index1","findIndex","SwapArrayElements","handleShowTaskItem2","visible","split","handleEventProps","isEmpty","slice","Object","assign","toLowerCase","concat","movingTask","isTrueSet","find","filter","priorityList","board_name","task_name","revised_task","old_task","elem","ValidateUserInput","forEach","handleStateProps","options","position","positions","TOP_CENTER","offset","containerStyle","transition","transitions","SCALE","ReactDOM","render","template","AlertTemplate"],"mappings":"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","file":"static/js/main.39fc03a2.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { MDBInputGroup, MDBInput } from \"mdbreact\";\r\nexport default ( { handleDelegateNameChange, fullname } ) => {\r\n\r\n    const handleFirstNameInputChange = e => handleDelegateNameChange(e.target.getAttribute('name'), e.target.value);\r\n    const handleLastNameInputChange  = e => handleDelegateNameChange(e.target.getAttribute('name'), e.target.value);\r\n\r\n    return (\r\n        <MDBInputGroup style={{ marginBottom: 10 }}\r\n            prepend=\"Delegated to: \"\r\n            inputs={\r\n                <>\r\n                    <MDBInput noTag name=\"first\" value={fullname.first} onChange={handleFirstNameInputChange} type=\"text\" />\r\n                    <MDBInput noTag name=\"last\" value={fullname.last} onChange={handleLastNameInputChange} type=\"text\" />\r\n                </>\r\n            }\r\n        />\r\n    );\r\n}","import React from 'react';\r\nimport { MDBInput, MDBContainer } from 'mdbreact';\r\n\r\nexport default ({ description, descriptionInputChange }) =>\r\n    <MDBContainer className='task-description'>\r\n        <MDBInput\r\n            value={description}\r\n            name='task_description'\r\n            onChange={descriptionInputChange}\r\n            type=\"textarea\"\r\n            label=\"Task Description\"\r\n            outline\r\n        />\r\n    </MDBContainer>\r\n","import React from 'react';\r\nimport { MDBContainer, MDBAlert } from 'mdbreact';\r\n\r\nexport default ({ error }) => (\r\n        <MDBContainer>\r\n            <MDBAlert color=\"danger\" >\r\n                {error}\r\n            </MDBAlert>\r\n        </MDBContainer>\r\n    );\r\n\r\n","export default arr => arr.some(input => input === \" \" || input === \"\" || input == null);","import React, { Component } from \"react\";\r\nimport Switch from \"react-switch\";\r\nimport { MDBRow, MDBCol } from \"mdbreact\";\r\n\r\nexport default class SwitchButton extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { checked: false };\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    handleChange(checked) {\r\n        this.setState({ checked });\r\n        this.props.switchPriority(checked);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <label>\r\n                <MDBRow>\r\n                    <MDBCol md=\"2\">\r\n                        <Switch onChange={this.handleChange} checked={this.state.checked} />\r\n                    </MDBCol>\r\n                    <MDBCol md=\"10\">\r\n                        <span style={{ marginLeft: 15, fontSize: 20 }}>Please, select if this task is priority</span>\r\n                    </MDBCol>\r\n                </MDBRow>\r\n            </label>\r\n        );\r\n    }\r\n}","import React, {useState, useEffect, useCallback} from 'react';\r\nimport { MDBBtn, MDBModal, MDBModalBody, MDBModalHeader, MDBModalFooter, MDBInput } from 'mdbreact';\r\nimport InputForm from './InputForm';\r\nimport DescriptionTaskInput from \"./DescriptionTaskInput\";\r\nimport ErrorMessage from \"../board_modal/ErrorMessage\";\r\nimport ValidateUserBlankInput from '../../helpers/ValidateUserBlankInput';\r\nimport {useAlert} from 'react-alert';\r\nimport SwitchButton from \"./ToggleSwitchPriority\";\r\n\r\nexport default ({\r\n                    createTask,\r\n                    resetErrors,\r\n                    validateInput,\r\n                    errors: {\r\n                        taskTitleError,\r\n                        taskDescriptionError,\r\n                        firstNameError,\r\n                        lastNameError\r\n                    }\r\n                }) => {\r\n    const [modalButtonClick, setModalButtonClick] = useState(false);\r\n    const [taskTitle, setTaskTitle] = useState(\"\");\r\n    const [taskDescription, setTaskDescription] = useState(\"\");\r\n    const [highTaskPriority, setHighTaskPriority] = useState(false);\r\n    const [delegateName, setDelegateName] = useState({\r\n        first: \"\",\r\n        last: \"\"\r\n    });\r\n    const [createNewTask, setCreateNewTask] = useState({});\r\n\r\n    const handleTaskTitleChange = e => {\r\n        const {value, name} = e.target;\r\n        validateInput(value, name);\r\n        setTaskTitle(value);\r\n    }\r\n\r\n    const handleHighTaskPrioritySwitch = task_priority => {\r\n        setHighTaskPriority(task_priority);\r\n    }\r\n\r\n    const handleTaskDescriptionChange = e => {\r\n        const {value, name} = e.target;\r\n        validateInput(value, name);\r\n        setTaskDescription(value);\r\n    }\r\n    const handleDelegateNameChange = (attribute, value) => {\r\n        if (attribute === \"first\") {\r\n            validateInput(value, attribute);\r\n            setDelegateName({...delegateName, first: value});\r\n        }\r\n        if (attribute === \"last\") {\r\n            validateInput(value, attribute);\r\n            setDelegateName({...delegateName, last: value});\r\n        }\r\n    }\r\n\r\n    const alert = useAlert();\r\n\r\n    const handleStoreTaskItem = () => {\r\n        if (ValidateUserBlankInput(\r\n            [\r\n                taskTitle,\r\n                taskDescription,\r\n                delegateName.first,\r\n                delegateName.last\r\n            ])) {\r\n            alert.error(<div style={{color: 'red', fontSize: 15}}>Please, Fill Blank Fields...</div>, {\r\n                timeout: 5000,\r\n                onOpen: () => {\r\n                    console.log('hey')\r\n                },\r\n                onClose: () => {\r\n                    console.log('closed')\r\n                }\r\n            });\r\n        } else {\r\n            setCreateNewTask({\r\n                ...createNewTask,\r\n                task_title: taskTitle,\r\n                location: 'kanban_board',\r\n                task_description: taskDescription,\r\n                task_priority: highTaskPriority,\r\n                first: delegateName.first,\r\n                last: delegateName.last\r\n            });\r\n            setModalButtonClick(!modalButtonClick);\r\n            setHighTaskPriority(false);\r\n        }\r\n    };\r\n\r\n    const stableDispatch = useCallback(createTask, []);\r\n\r\n    useEffect(() => {\r\n        stableDispatch(createNewTask);\r\n    }, [stableDispatch, createNewTask]);\r\n\r\n\r\n    const handleToggleModal = () => {\r\n        setTaskTitle('');\r\n        setTaskDescription('');\r\n        setDelegateName({\r\n                first: \"\",\r\n                last: \"\"\r\n            }\r\n        );\r\n        setModalButtonClick(!modalButtonClick);\r\n        resetErrors();\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <MDBBtn className='start-modal-button' onClick={handleToggleModal}>CREATE TASK</MDBBtn>\r\n            <MDBModal style={{zIndex: 1}} isOpen={modalButtonClick} toggle={handleToggleModal}>\r\n                <MDBModalHeader toggle={handleToggleModal}>Task Form</MDBModalHeader>\r\n                <MDBModalBody>\r\n                    <MDBInput label=\"Enter Task Title\" name='task_title' type='text' value={taskTitle}\r\n                              onChange={handleTaskTitleChange} size=\"md\"/>\r\n                    {taskTitleError.errors && <ErrorMessage error={taskTitleError.errors}/>}\r\n                    <DescriptionTaskInput\r\n                        id='textArea'\r\n                        description={taskDescription}\r\n                        descriptionInputChange={handleTaskDescriptionChange}\r\n                    />\r\n                    {taskDescriptionError.errors && <ErrorMessage error={taskDescriptionError.errors}/>}\r\n                    <SwitchButton switchPriority={handleHighTaskPrioritySwitch}/>\r\n                    <InputForm fullname={delegateName} handleDelegateNameChange={handleDelegateNameChange}/>\r\n                    {firstNameError.errors && <ErrorMessage error={firstNameError.errors}/>}\r\n                    {lastNameError.errors && <ErrorMessage error={lastNameError.errors}/>}\r\n                </MDBModalBody>\r\n                <MDBModalFooter>\r\n                    <MDBBtn className='row' color=\"secondary\" onClick={handleToggleModal}>Close</MDBBtn>\r\n                    <MDBBtn\r\n                        disabled={taskTitleError.inputStatus || taskDescriptionError.inputStatus || firstNameError.inputStatus || lastNameError.inputStatus}\r\n                        className='row'\r\n                        color=\"primary\" onClick={handleStoreTaskItem}>Create Task</MDBBtn>\r\n                </MDBModalFooter>\r\n            </MDBModal>\r\n        </>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { MDBInput } from 'mdbreact';\r\nimport \"./style.css\";\r\n\r\nexport default ({ boardOrderChange, order }) => {\r\n    return (\r\n        <MDBInput label=\"Enter Board Order\" name='board_order' type=\"text\" value={order} onChange={boardOrderChange}/>\r\n    );\r\n}\r\n\r\n","import React from 'react';\r\n\r\nexport default ({ newBoardPlaceOrder, boardsSchema }) => {\r\n    const order = isNaN(newBoardPlaceOrder) || newBoardPlaceOrder === 0 ? 1 : newBoardPlaceOrder;\r\n    return (\r\n        <div className='schema-container'>\r\n            <i style={{color: 'red', order: order, marginRight: 7}} className=\"fas fa-level-down-alt fa-3x\"/>\r\n\r\n            {boardsSchema.map((block, idx) => (\r\n                idx + 1 < order\r\n                    ?\r\n                    <div style={{order: idx + 1}} key={idx} className='block-element'>{idx + 1}</div>\r\n                    :\r\n                    <div style={{order: idx + 2}} key={idx} className='block-element'>{idx + 1}</div>\r\n                )\r\n            )}\r\n        </div>\r\n    );\r\n}","import React, {useState, useEffect, useCallback} from 'react';\r\nimport { MDBBtn, MDBModal, MDBModalBody, MDBModalHeader, MDBModalFooter, MDBInput } from 'mdbreact';\r\nimport OrderInput from \"./OrderInput\";\r\nimport ErrorMessage from \"./ErrorMessage\";\r\nimport { useAlert } from 'react-alert';\r\nimport ValidateUserBlankInput from '../../helpers/ValidateUserBlankInput';\r\nimport InsertionBoardSchema from \"./InsertionBoardSchema\";\r\n\r\nexport default ({ boardsSchema, createBoard, validateInput, errors: { boardOrderError, boardTitleError } }) => {\r\n    const [modalButtonClick, setModalButtonClick] = useState(false);\r\n    const [boardTitle, setBoardTitle] = useState(\"\");\r\n    const [boardOrder, setBoardOrder] = useState(0);\r\n    const [createNewBoard, setCreateNewBoard] = useState({});\r\n    const [newBoardPlaceOrder, setNewBoardPlaceOrder] = useState(1);\r\n\r\n    const alert = useAlert();\r\n\r\n    const handleStoreBoardItem = () => {\r\n        if(ValidateUserBlankInput([boardTitle])){\r\n            alert.error(<div style={{ color: 'red', fontSize: 15 }}>Please, Fill Blank Fields...</div>, {\r\n                timeout: 5000,\r\n                onOpen: () => {\r\n                    console.log('hey')\r\n                },\r\n                onClose: () => {\r\n                    console.log('closed')\r\n                }\r\n            });\r\n        }\r\n        else{\r\n            setCreateNewBoard({\r\n                ...createNewBoard,\r\n                title: boardTitle,\r\n                order: boardOrder\r\n            });\r\n            setModalButtonClick(!modalButtonClick);\r\n            setNewBoardPlaceOrder(1);\r\n        }\r\n    };\r\n    const handleBoardTitleChange = e => {\r\n        const { value, name } = e.target;\r\n        validateInput(value, name);\r\n        setBoardTitle(e.target.value);\r\n    }\r\n\r\n    const handleBoardOrderChange = e => {\r\n        const { value, name } = e.target;\r\n        validateInput(value, name);\r\n        setBoardOrder(value);\r\n        setNewBoardPlaceOrder(value);\r\n    }\r\n\r\n\r\n    const stableDispatch = useCallback(createBoard, []);\r\n\r\n    useEffect(() => {\r\n        stableDispatch(createNewBoard);\r\n    }, [stableDispatch, createNewBoard]);\r\n\r\n\r\n    const handleToggleModal = () => {\r\n        setBoardTitle('');\r\n        setBoardOrder(1);\r\n        setModalButtonClick(!modalButtonClick);\r\n        setNewBoardPlaceOrder(1);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <MDBBtn className='start-modal-button' onClick={handleToggleModal}>CREATE BOARD</MDBBtn>\r\n            <MDBModal isOpen={modalButtonClick} toggle={handleToggleModal}>\r\n                <MDBModalHeader toggle={handleToggleModal}>Board Form</MDBModalHeader>\r\n                <MDBModalBody>\r\n                    <div className=\"form-group\">\r\n                        <MDBInput label=\"Enter Board Title\" name='board_title' type='text' value={boardTitle} onChange={handleBoardTitleChange} size=\"md\" />\r\n                        {boardTitleError.errors && <ErrorMessage error={boardTitleError.errors}/>}\r\n                        <InsertionBoardSchema newBoardPlaceOrder={+newBoardPlaceOrder} boardsSchema={boardsSchema}/>\r\n                        <OrderInput order={boardOrder} boardOrderChange={handleBoardOrderChange}/>\r\n                        {boardOrderError.errors && <ErrorMessage error={boardOrderError.errors}/>}\r\n                    </div>\r\n                </MDBModalBody>\r\n                <MDBModalFooter>\r\n                    <MDBBtn className='row' color=\"secondary\" onClick={handleToggleModal}>Close</MDBBtn>\r\n                    <MDBBtn disabled={boardOrderError.inputStatus || boardTitleError.inputStatus} className='row' color=\"primary\" onClick={handleStoreBoardItem}>Create Board</MDBBtn>\r\n                </MDBModalFooter>\r\n            </MDBModal>\r\n        </>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport {MDBBtn, MDBBtnGroup} from \"mdbreact\";\r\n\r\nexport default ({task: {board, id, location, priority_level, task_priority}, boardOrder, handleFindForEditTaskModal, boardLength, moveTask, deleteTask, hideTask}) => {\r\n    const boolStr = task_priority ? 'true' : 'false';\r\n    return (\r\n        <MDBBtnGroup size=\"sm\" className=\"mb-4\">\r\n            <MDBBtn\r\n                disabled={boardOrder === 0}\r\n                className='task-button'\r\n                color=\"white\"\r\n            >\r\n                <span\r\n                    id={id}\r\n                    onClick={moveTask}\r\n                    direction='left'\r\n                    location={location}\r\n                    priority_level={priority_level}\r\n                    task_priority={boolStr}\r\n                    order={boardOrder}\r\n                    name={`left-${board}`}\r\n                    className=\"fa fa-angle-double-left\"\r\n                    aria-hidden=\"true\"\r\n                >\r\n                </span>\r\n            </MDBBtn>\r\n            <MDBBtn className='task-button' color=\"white\">\r\n                <span id={id} name={board} location={location} priority_level={priority_level} onClick={hideTask}\r\n                      className=\"hide fas fa-eye-slash\" aria-hidden=\"true\"/>\r\n            </MDBBtn>\r\n            {\r\n                location === 'kanban_board'\r\n                    ?\r\n                    <>\r\n                        <MDBBtn className='task-button' color=\"white\">\r\n                            <span id={id} name={board} onClick={handleFindForEditTaskModal} className=\"edit fas fa-edit\"\r\n                                  aria-hidden=\"true\"/>\r\n                        </MDBBtn>\r\n                        <MDBBtn className='task-button' color=\"white\">\r\n                            <span id={id} name={board} onClick={deleteTask} className=\"delete fas fa-trash-alt\"\r\n                                  aria-hidden=\"true\"/>\r\n                        </MDBBtn>\r\n                    </>\r\n                    :\r\n                    null\r\n            }\r\n            <MDBBtn\r\n                className='task-button'\r\n                disabled={boardOrder === boardLength - 1}\r\n                color=\"white\"\r\n            >\r\n                <span\r\n                    id={id}\r\n                    onClick={moveTask}\r\n                    direction='right'\r\n                    location={location}\r\n                    priority_level={priority_level}\r\n                    task_priority={boolStr}\r\n                    order={boardOrder}\r\n                    name={`right-${board}`}\r\n                    className=\"fa fa-angle-double-right\"\r\n                    aria-hidden=\"true\"\r\n                >\r\n                </span>\r\n            </MDBBtn>\r\n        </MDBBtnGroup>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport ButtonGroup from \"./ButtonGroup\";\r\nimport {MDBBtn, MDBRow, MDBCol, MDBContainer, MDBModal, MDBModalBody, MDBModalFooter, MDBModalHeader} from \"mdbreact\";\r\n\r\n\r\nexport default ({task, index, listLength, boardLength, swapTasks, handleFindForEditTaskModal, boardOrder, id, moveTask, editTask, deleteTask, hideTask}) => {\r\n\r\n    const [toggleModal, setToggleModal] = useState(false);\r\n    const dragTaskStart = e => {\r\n        const target = e.target;\r\n        e.dataTransfer.setData('task', target.id);\r\n    };\r\n\r\n    const DescriptionModal = () =>\r\n        <MDBContainer>\r\n            <MDBModal isOpen={toggleModal} toggle={handleToggleDescriptionModal} size=\"fluid\">\r\n                <MDBModalHeader toggle={handleToggleDescriptionModal}>{task.task_title}</MDBModalHeader>\r\n                <MDBModalBody>\r\n                    {task.task_description}\r\n                </MDBModalBody>\r\n                <MDBModalFooter>\r\n                    <MDBBtn color=\"secondary\" onClick={handleToggleDescriptionModal}>Close</MDBBtn>\r\n                </MDBModalFooter>\r\n            </MDBModal>\r\n        </MDBContainer>\r\n\r\n    const dragTaskOver = e => {\r\n        e.stopPropagation();\r\n    };\r\n\r\n    const handleOnMouseOver = e => {\r\n        let id = e.target.id;\r\n        if(id && document.getElementById(id).querySelector(\".task-details\") !== null) document.getElementById(id).querySelector(\".task-details\").innerHTML = 'Click Here...';\r\n\r\n    }\r\n    const handleOnMouseOff = e => {\r\n        let id = e.target.id;\r\n        if(id && document.getElementById(id).querySelector(\".task-details\") !== null) document.getElementById(id).querySelector(\".task-details\").innerHTML = 'Details...';\r\n    }\r\n\r\n    const handleToggleDescriptionModal = () => setToggleModal(!toggleModal)\r\n\r\n    return (\r\n        <MDBContainer\r\n            draggable='true'\r\n            name={task.board}\r\n            id={id}\r\n            onDragStart={dragTaskStart}\r\n            onDragOver={dragTaskOver}\r\n            className=\"d-flex flex-column task-card\"\r\n        >\r\n            <MDBBtn\r\n                disabled={index === 0}\r\n                name='up'\r\n                color='white'\r\n                priority_level={task.priority_level}\r\n                location={task.location}\r\n                board={task.board}\r\n                id={id}\r\n                className='up-button'\r\n                onClick={swapTasks}\r\n            >\r\n                Up\r\n            </MDBBtn>\r\n            <MDBRow>\r\n                <MDBCol size=\"8\" style={{display: 'flex', justifyContent: 'flex-start'}}>\r\n                    <h6 className=\"task-title\">{task.task_title}</h6>\r\n                </MDBCol>\r\n                {task.task_priority && <MDBCol style={{display: 'flex', justifyContent: 'flex-end'}} className=\"priority\"><i className=\"fas fa-exclamation-triangle fa-2x\"/></MDBCol>}\r\n            </MDBRow>\r\n            <span className=\"p-2 col-example text-left task-details\"\r\n                  id={id}\r\n                  onMouseOver={handleOnMouseOver}\r\n                  onMouseLeave={handleOnMouseOff}\r\n                  onClick={handleToggleDescriptionModal}\r\n            >\r\n                <i>Details...</i>\r\n            </span>\r\n            <DescriptionModal/>\r\n            <ButtonGroup\r\n                boardLength={boardLength}\r\n                boardOrder={boardOrder}\r\n                moveTask={moveTask}\r\n                location={task.location}\r\n                editTask={editTask}\r\n                deleteTask={deleteTask}\r\n                hideTask={hideTask}\r\n                task={task}\r\n                handleFindForEditTaskModal={handleFindForEditTaskModal}\r\n            />\r\n            <MDBBtn\r\n                disabled={index === listLength - 1}\r\n                name='down'\r\n                priority_level={task.priority_level}\r\n                location={task.location}\r\n                board={task.board}\r\n                id={id}\r\n                color='white'\r\n                className='down-button'\r\n                onClick={swapTasks}>\r\n                Down\r\n            </MDBBtn>\r\n\r\n        </MDBContainer>\r\n    )\r\n}","import React from 'react';\r\nimport TaskItem from \"./TaskItem\";\r\nimport {MDBCol, MDBContainer, MDBRow} from \"mdbreact\";\r\n\r\nexport default ({\r\n                    boards,\r\n                    moveTask,\r\n                    deleteTask,\r\n                    hideTask,\r\n                    editTask,\r\n                    swapKanbanTasks,\r\n                    showTask,\r\n                    dragTask,\r\n                    deleteBoard,\r\n                    boardMessage,\r\n                    handleFindForEditTaskModal\r\n                }) => {\r\n\r\n    const dropTask = e => {\r\n        e.preventDefault();\r\n        const task_id = e.dataTransfer.getData('task');\r\n        const task = document.getElementById(task_id);\r\n        dragTask(e.target.getAttribute('name'), task.getAttribute('name'), task_id);\r\n    };\r\n\r\n    const dragTaskOver = e => {\r\n        e.preventDefault();\r\n    };\r\n\r\n    const boardList = (list, order, length) => list.length\r\n        ? list.map((task, id) => task.visibility\r\n            ? <TaskItem\r\n                boardLength={length}\r\n                boardOrder={order}\r\n                moveTask={moveTask}\r\n                deleteTask={deleteTask}\r\n                hideTask={hideTask}\r\n                editTask={editTask}\r\n                listLength={list.length}\r\n                swapTasks={swapKanbanTasks}\r\n                key={id}\r\n                index={id}\r\n                id={task.id}\r\n                task={task}\r\n                handleFindForEditTaskModal={handleFindForEditTaskModal}\r\n            />\r\n            : <p className='show' key={task.id}>Hidden Task... <span id={task.id} location={task.location} name={task.board} autoFocus\r\n                                                                     onClick={showTask} className='show'>SHOW</span></p>\r\n        )\r\n        : <p style={{color: 'white', textAlign: 'center'}}><i>{boardMessage}</i></p>;\r\n\r\n    return (\r\n        <MDBContainer className=\"dashboard container-fluid\">\r\n            <MDBRow className=\"kanban-row\">\r\n                {boards.map(board => (\r\n                    <MDBCol\r\n                        key={board.id}\r\n                        onDrop={dropTask}\r\n                        name={board.name}\r\n                        onDragOver={dragTaskOver}\r\n                        className=\"kanban-col\"\r\n                        md=\"3\"\r\n                    >\r\n                        <div className='board-header container'>\r\n                            <div className='row'>\r\n\r\n                                <div className='col-10'>\r\n                                    <div className='row'>\r\n                                        <span className=\"task-list-title col-9\">{board.title}</span>\r\n                                        <span className='task-quantity col-2'>{board.tasks.length}</span>\r\n                                    </div>\r\n                                </div>\r\n                                <div className='col-2'>\r\n                                    <i\r\n                                        id={board.id}\r\n                                        onClick={deleteBoard}\r\n                                        className=\"far fa-calendar-times fa-2x\"/>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        {boardList(board.tasks, board.order, boards.length)}\r\n                    </MDBCol>\r\n                ))\r\n                }\r\n            </MDBRow>\r\n        </MDBContainer>\r\n    );\r\n}","import React from 'react';\r\nimport {MDBCol, MDBContainer, MDBRow} from \"mdbreact\";\r\nimport TaskItem from \"./TaskItem\";\r\n\r\nexport default ({\r\n                    priorityTasks,\r\n                    moveTask,\r\n                    deleteTask,\r\n                    hideTask,\r\n                    editTask,\r\n                    swapPriorityTasks,\r\n                    showTask,\r\n                    boardMessage,\r\n                    handleFindForEditTaskModal\r\n                }) => {\r\n\r\n    const priorityTasksList = (list, order, length) => list.length\r\n        ? list.map((task, id) => task.visibility\r\n            ? <TaskItem\r\n                boardLength={length}\r\n                boardOrder={order}\r\n                moveTask={moveTask}\r\n                deleteTask={deleteTask}\r\n                hideTask={hideTask}\r\n                editTask={editTask}\r\n                listLength={list.length}\r\n                swapTasks={swapPriorityTasks}\r\n                key={id}\r\n                index={id}\r\n                id={task.id}\r\n                task={task}\r\n                handleFindForEditTaskModal={handleFindForEditTaskModal}\r\n            />\r\n            : <p className='show' key={task.id}>Hidden Task... <span id={task.id} priority_level={task.priority_level} name={task.board} autoFocus\r\n                                                                     onClick={showTask} className='show'>SHOW</span></p>\r\n        )\r\n        : <p style={{color: 'white', textAlign: 'center'}}><i>{boardMessage}</i></p>;\r\n    return (\r\n        <MDBContainer className=\"dashboard container-fluid\">\r\n            <MDBRow className=\"kanban-row\">\r\n                {priorityTasks.map((list, idx) => (\r\n                    <MDBCol\r\n                        key={idx}\r\n                        name={list.priority_level}\r\n                        className=\"kanban-col\"\r\n                        md=\"6\"\r\n                    >\r\n                        <div className='board-header container'>\r\n                            <div className='row'>\r\n                                <div className='col-12'>\r\n                                    <div className='row'>\r\n                                        <span className=\"task-list-title col-10\">{list.priority_level.toUpperCase()} Priority List</span>\r\n                                        <span className='task-quantity col-1'>{list.tasks.length}</span>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        {priorityTasksList(list.tasks, list.order, priorityTasks.length)}\r\n                    </MDBCol>\r\n                    ))\r\n                }\r\n            </MDBRow>\r\n        </MDBContainer>\r\n    );\r\n}\r\n","import React, {useState} from 'react';\r\nimport {MDBContainer, MDBBtn, MDBModal, MDBInput, MDBModalBody, MDBModalHeader, MDBModalFooter} from 'mdbreact';\r\nimport ErrorMessage from \"../board_modal/ErrorMessage\";\r\n\r\nexport default ({\r\n                    handleToggleEditTaskModal,\r\n                    errors: {\r\n                        taskTitleError,\r\n                        taskDescriptionError,\r\n                        firstNameError,\r\n                        lastNameError\r\n                    },\r\n                    modalButtonClick,\r\n                    validateInput,\r\n                    submitNewTaskItems,\r\n                    searchEditTask\r\n                }) => {\r\n    const [editTaskItems, setEditTaskItems] = useState({\r\n        task_title: \"\",\r\n        task_description: \"\",\r\n        task_priority: 'true',\r\n        first: \"\",\r\n        last: \"\"\r\n    })\r\n\r\n    const handleEditTaskItemChange = e => {\r\n        setEditTaskItems({\r\n            ...editTaskItems,\r\n            id: searchEditTask.id,\r\n            board: searchEditTask.board,\r\n            [e.target.name]: e.target.value\r\n        });\r\n        validateInput(e.target.value, e.target.name);\r\n    }\r\n    const handleEditTaskItemsSubmit = () => {\r\n        submitNewTaskItems(editTaskItems);\r\n        handleToggleEditTaskModal();\r\n    }\r\n\r\n    return (\r\n        <MDBContainer>\r\n            <MDBModal isOpen={modalButtonClick} toggle={handleToggleEditTaskModal}>\r\n                <MDBModalHeader toggle={handleToggleEditTaskModal}>Task Edit Form</MDBModalHeader>\r\n                <MDBModalBody>\r\n                    <MDBInput type='text' name='task_title' label=\"Edit Task Title\" value={editTaskItems.title}\r\n                              onChange={handleEditTaskItemChange}/>\r\n                    {taskTitleError.errors && <ErrorMessage error={taskTitleError.errors}/>}\r\n                    <MDBContainer className='task-description'>\r\n                        <MDBInput\r\n                            value={editTaskItems.description}\r\n                            name='task_description'\r\n                            onChange={handleEditTaskItemChange}\r\n                            type=\"textarea\"\r\n                            label=\"Task Description\"\r\n                            outline\r\n                        />\r\n                    </MDBContainer>\r\n                    {taskDescriptionError.errors && <ErrorMessage error={taskDescriptionError.errors}/>}\r\n\r\n                    <div className=\"custom-control custom-checkbox\">\r\n                        <input name=\"task_priority\" value={editTaskItems.task_priority} type=\"checkbox\" onChange={handleEditTaskItemChange} className=\"custom-control-input\" id=\"priority_task\"/>\r\n                        <label className=\"custom-control-label\" htmlFor=\"priority_task\">This is Priority\r\n                            Task\r\n                        </label>\r\n                    </div>\r\n\r\n                    <MDBInput type='text' name='first' label=\"Edit Delegate First Name\"\r\n                              value={editTaskItems.first_name} onChange={handleEditTaskItemChange}/>\r\n                    {firstNameError.errors && <ErrorMessage error={firstNameError.errors}/>}\r\n                    <MDBInput type='text' name='last' label=\"Edit Delegate Last Name\"\r\n                              value={editTaskItems.last_name} onChange={handleEditTaskItemChange}/>\r\n                    {lastNameError.errors && <ErrorMessage error={lastNameError.errors}/>}\r\n                </MDBModalBody>\r\n                <MDBModalFooter>\r\n                    <MDBBtn color=\"secondary\" onClick={handleToggleEditTaskModal}>Close</MDBBtn>\r\n                    <MDBBtn\r\n                        disabled={taskTitleError.inputStatus || taskDescriptionError.inputStatus || firstNameError.inputStatus || lastNameError.inputStatus}\r\n                        color=\"primary\"\r\n                        onClick={handleEditTaskItemsSubmit}\r\n                    >\r\n                        Save changes\r\n                    </MDBBtn>\r\n                </MDBModalFooter>\r\n            </MDBModal>\r\n        </MDBContainer>\r\n);\r\n}","import React from 'react';\r\nimport TaskModalPage from '../task_modal/ModalPage';\r\nimport BoardModalPage from '../board_modal/ModalPage'\r\nimport NewKanbanDashboard from \"./NewKanbanDashboard\";\r\nimport PriorityOrderedTasks from \"./PriorityOrderedTasks\";\r\nimport EditTaskModalPage from \"../edit_modal/ModalPage\";\r\nimport {MDBBtn, MDBCol, MDBContainer, MDBRow} from \"mdbreact\";\r\n\r\nexport default props => {\r\n\r\n    const listProps = {\r\n        boards: props.boards,\r\n        boardMessage: props.boardMessage,\r\n        errors: props.errors,\r\n        boardsSchema: props.boardsSchema,\r\n        priorityTasks: props.priorityTasks,\r\n        searchEditTask: props.searchEditTask,\r\n        modalButtonClick: props.modalButtonClick,\r\n        panelControlButtons: props.panelControlButtons\r\n    };\r\n    const eventProps = {\r\n        createBoard: props.createBoard,\r\n        createTask: props.createTask,\r\n        swapKanbanTasks: props.swapTasks.swapKanbanTasks,\r\n        swapPriorityTasks: props.swapTasks.swapPriorityTasks,\r\n        moveTask: props.moveTask,\r\n        deleteTask: props.deleteTask,\r\n        deleteBoard: props.deleteBoard,\r\n        filterPriorityTasks: props.filterPriorityTasks,\r\n        hideTask: props.hideTask,\r\n        showTask: props.showTask,\r\n        dragTask: props.dragTask,\r\n        submitNewTaskItems: props.submitNewTaskItems,\r\n        validateInput: props.validateInput,\r\n        resetErrors: props.resetErrors,\r\n        toggleEditModal: props.toggleEditModal,\r\n        findTaskForEdit: props.findTaskForEdit,\r\n        resetMainKanbanView: props.resetMainKanbanView\r\n    };\r\n    return (\r\n        <div>\r\n            <MDBContainer>\r\n                <MDBRow className='kanban-header'>\r\n                    <h1>Kanban Board</h1>\r\n                </MDBRow>\r\n            </MDBContainer>\r\n            <EditTaskModalPage\r\n                errors={listProps.errors}\r\n                validateInput={eventProps.validateInput}\r\n                modalButtonClick={listProps.modalButtonClick}\r\n                handleToggleEditTaskModal={eventProps.toggleEditModal}\r\n                boards={listProps.boards}\r\n                searchEditTask={listProps.searchEditTask}\r\n                submitNewTaskItems={eventProps.submitNewTaskItems}\r\n            />\r\n            <MDBContainer className=\"main-control-panel\">\r\n                <MDBRow>\r\n                    <MDBCol>\r\n                        <TaskModalPage\r\n                            errors={listProps.errors}\r\n                            validateInput={eventProps.validateInput}\r\n                            createTask={eventProps.createTask}\r\n                            resetErrors={eventProps.resetErrors}\r\n                        />\r\n                    </MDBCol>\r\n                    <MDBCol>\r\n                        <BoardModalPage\r\n                            errors={listProps.errors}\r\n                            boardsSchema={listProps.boardsSchema}\r\n                            validateInput={eventProps.validateInput}\r\n                            createBoard={eventProps.createBoard}\r\n                            deleteBoard={eventProps.deleteBoard}\r\n                            resetErrors={eventProps.resetErrors}\r\n                        />\r\n                    </MDBCol>\r\n\r\n                    <MDBCol>\r\n                        <MDBBtn href=\"https://github.com/likejean/homework-6/issues\" className='report-issues-button' >Report Issues</MDBBtn>\r\n                    </MDBCol>\r\n                </MDBRow>\r\n                <MDBRow>\r\n                    <MDBCol>\r\n                        <MDBBtn\r\n                            disabled={listProps.panelControlButtons.kanban_board}\r\n                            onClick={eventProps.resetMainKanbanView}\r\n                            className='task-priority-button'\r\n                        >Kanban Board\r\n                        </MDBBtn>\r\n                    </MDBCol>\r\n                    <MDBCol>\r\n                        <MDBBtn\r\n                            disabled={listProps.panelControlButtons.priority_board}\r\n                            onClick={eventProps.filterPriorityTasks}\r\n                            className='task-priority-button'\r\n                        >Priority Tasks\r\n                        </MDBBtn>\r\n                    </MDBCol>\r\n                </MDBRow>\r\n\r\n            </MDBContainer>\r\n            {\r\n                listProps.panelControlButtons.kanban_board && !listProps.panelControlButtons.priority_board\r\n                ?\r\n                <NewKanbanDashboard\r\n                    boardMessage={listProps.boardMessage}\r\n                    handleFindForEditTaskModal={eventProps.findTaskForEdit}\r\n                    {...listProps}\r\n                    {...eventProps}\r\n                />\r\n                :\r\n                <PriorityOrderedTasks\r\n                    boardMessage={listProps.boardMessage}\r\n                    handleFindForEditTaskModal={eventProps.findTaskForEdit}\r\n                    {...listProps}\r\n                    {...eventProps}\r\n                />\r\n            }\r\n\r\n        </div>\r\n    )\r\n}","export default (obj) => {\r\n\r\n    // null and undefined are \"empty\"\r\n    if (obj == null) return true;\r\n\r\n    // Assume if it has a length property with a non-zero value\r\n    // that that property is correct.\r\n    if (obj.length > 0)    return false;\r\n    if (obj.length === 0)  return true;\r\n\r\n    // If it isn't an object at this point\r\n    // it is empty, but it can't be anything *but* empty\r\n    // Is it empty?  Depends on your application.\r\n    if (typeof obj !== \"object\") return true;\r\n\r\n    // Otherwise, does it have any properties of its own?\r\n    // Note that this doesn't handle\r\n    // toString and valueOf enumeration bugs in IE < 9\r\n    for (var key in obj) {\r\n        if (hasOwnProperty.call(obj, key)) return false;\r\n    }\r\n\r\n    return true;\r\n}","export default (arr, a, b) => {\r\n    let temp = arr[a];\r\n    arr[a] = arr[b];\r\n    arr[b] = temp;\r\n    return arr;\r\n}","export default (name, value, length) => {\r\n    const titleFormat = /^[0-9A-Za-z\\s]+$/;\r\n    const personNameFormat = /^[a-zA-Z]+$/;\r\n    switch (name) {\r\n        case 'board_order':\r\n            return {\r\n                errors:\r\n                    isNaN(value) || value === \"\"\r\n                        ? 'Input must be an INTEGER!'\r\n                        : parseInt(value) <= 0\r\n                        ? 'Must be greater than zero!'\r\n                        : parseInt(value) > length + 1\r\n                            ? `Must be less or equal ${length + 1}!`\r\n                            : '',\r\n                inputStatus:\r\n                    isNaN(value) || value === \"\" || parseInt(value) <= 0 || parseInt(value) > length + 1\r\n            };\r\n        case 'board_title':\r\n            return {\r\n                errors:\r\n                    !value.match(titleFormat)\r\n                        ? 'Please, input alphanumeric characters only!'\r\n                        : value.length > 10\r\n                            ? 'This title is too long'\r\n                            : '',\r\n                inputStatus:\r\n                    !value.match(titleFormat) || value.length > 10\r\n            };\r\n        case 'task_title':\r\n            return {\r\n                errors:\r\n                    !value.match(titleFormat)\r\n                        ? 'Please, input alphanumeric characters only!'\r\n                        : value.length > 13\r\n                        ? 'This title is too long'\r\n                        : '',\r\n                inputStatus:\r\n                    !value.match(titleFormat) || value.length > 13\r\n            };\r\n        case 'task_description':\r\n            return {\r\n                errors:\r\n                    value.length >= 100\r\n                        ? 'Description must be less than 100 characters'\r\n                        : '',\r\n                inputStatus:\r\n                    value.length >= 100\r\n            };\r\n        case 'first':\r\n            return {\r\n                errors:\r\n                    !value.match(personNameFormat)\r\n                        ? 'Please, input alphabetical characters only!'\r\n                        : value.length < 3\r\n                        ? 'First name is too short'\r\n                        : '',\r\n                inputStatus:\r\n                    !value.match(personNameFormat) || value.length < 3\r\n            };\r\n        case 'last':\r\n            return {\r\n                errors:\r\n                    !value.match(personNameFormat)\r\n                        ? 'Please, input alphabetical characters only!'\r\n                        : value.length < 3\r\n                        ? 'Last name is too short'\r\n                        : '',\r\n                inputStatus:\r\n                    !value.match(personNameFormat) || value.length < 3\r\n            };\r\n        default:\r\n            return {\r\n                errors : '',\r\n                inputStatus: false\r\n            }\r\n    }\r\n}\r\n","import React, {useState} from 'react';\nimport Main from './components/main';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\nimport uuid from 'react-uuid';\nimport './App.css';\nimport isEmpty from './helpers/EmptyObject';\nimport SwapArrayElements from \"./helpers/SwapArrayElements\";\nimport ValidateUserInput from \"./helpers/ValidateUserInputChange\";\n\n\nconst initialBoards = [\n    {\n        name: 'todo',\n        order: 0,\n        title: 'To-Do',\n        id: uuid(),\n        tasks: []\n    },\n    {\n        name: 'in-progress',\n        order: 1,\n        title: 'In-Progress',\n        id: uuid(),\n        tasks: []\n\n    },\n    {\n        name: 'review',\n        order: 2,\n        title: 'To-Review',\n        id: uuid(),\n        tasks: []\n\n    },\n    {\n        name: 'done',\n        order: 3,\n        title: 'Completed',\n        id: uuid(),\n        tasks: []\n    },\n    {\n        name: 'extra',\n        order: 4,\n        title: 'Extra',\n        id: uuid(),\n        tasks: []\n    }\n];\n\nconst initialPriorityTaskList = [\n    {\n        priority_level: 'high',\n        order: 0,\n        id: uuid(),\n        tasks: []\n    },\n    {\n        priority_level: 'low',\n        order: 1,\n        id: uuid(),\n        tasks: []\n    }\n]\n\nconst initialErrors = {\n    boardTitleError: {\n        errors: '',\n        inputStatus: false\n    },\n    taskTitleError: {\n        errors: '',\n        inputStatus: false\n    },\n    boardOrderError: {\n        errors: '',\n        inputStatus: false\n    },\n    taskDescriptionError: {\n        errors: '',\n        inputStatus: false\n    },\n    firstNameError: {\n        errors: '',\n        inputStatus: false\n    },\n    lastNameError: {\n        errors: '',\n        inputStatus: false\n    }\n}\n\nfunction App() {\n\n    const [note, setNote] = useState(\"\");\n    const [boards, setBoards] = useState(initialBoards);\n    const [inputErrors, setInputErrors] = useState(initialErrors);\n    const [boardsSchema, setBoardsSchema] = useState([...Array(initialBoards.length).keys()]);\n    const [priorityTasks, setPriorityTasks] = useState(initialPriorityTaskList);\n    const [editModalButtonClick, setEditModalButtonClick] = useState(false);\n    const [searchEditTask, setSearchEditTask] = useState({});\n    const [panelControlButtons, setPanelControlButtons] = useState({\n        kanban_board: true,\n        priority_board: false\n    });\n\n\n    const handleFindForEditTaskModal = e => {\n        const name = e.target.getAttribute('name');\n        const id = e.target.id;\n        if (id) setSearchEditTask(boards.find(board => board.name === name).tasks.find(task => task.id === id));\n        setEditModalButtonClick(!editModalButtonClick);\n    }\n\n    const handleToggleEditTaskModal = () => setEditModalButtonClick(!editModalButtonClick);\n\n    const handleCreateNewBoard2 = board => {\n        let index = parseInt(board.order) - 1;\n        if (!isEmpty(board)) {\n            setBoards(boards => [\n                ...boards.slice(0, index),\n                Object.assign({},\n                    {\n                        ...board,\n                        id: uuid(),\n                        name: board.title.toLowerCase(),\n                        tasks: []\n                    }),\n                ...boards.slice(index)\n            ]);\n            setBoards(boards => boards.map((board, id) => ({...board, order: id})));\n            setBoardsSchema(boardsSchema => [...boardsSchema].concat(boardsSchema.length));\n        }\n    };\n\n\n    const handleValidateUserInput2 = (input, name) => {\n        if (name === 'board_order') setInputErrors(inputErrors => ({\n            ...inputErrors,\n            boardOrderError: ValidateUserInput(name, input, boards.length)\n        }));\n        if (name === 'board_title') setInputErrors(inputErrors => ({\n            ...inputErrors,\n            boardTitleError: ValidateUserInput(name, input, boards.length)\n        }));\n        if (name === 'task_title') setInputErrors(inputErrors => ({\n            ...inputErrors,\n            taskTitleError: ValidateUserInput(name, input, boards.length)\n        }));\n        if (name === 'task_description') setInputErrors(inputErrors => ({\n            ...inputErrors,\n            taskDescriptionError: ValidateUserInput(name, input, boards.length)\n        }));\n        if (name === 'first') setInputErrors(inputErrors => ({\n            ...inputErrors,\n            firstNameError: ValidateUserInput(name, input, boards.length)\n        }));\n        if (name === 'last') setInputErrors(inputErrors => ({\n            ...inputErrors,\n            lastNameError: ValidateUserInput(name, input, boards.length)\n        }));\n    };\n\n    const handleGeneratePriorityTasksList2 = () => {\n        setPriorityTasks(initialPriorityTaskList);\n        boards.map((board) => (\n                board.tasks.forEach(task => {\n                    if (task.task_priority) return setPriorityTasks(priorityTasks =>\n                        priorityTasks.map(list => list.priority_level === 'high'\n                            ?\n                            {\n                                ...list,\n                                tasks: list.tasks.concat({\n                                    ...task,\n                                    location: 'priority_list',\n                                    priority_level: 'high'\n                                })\n                            }\n                            :\n                            list\n                        ));\n                    else return setPriorityTasks(priorityTasks =>\n                        priorityTasks.map(list => list.priority_level === 'low'\n                            ?\n                            {\n                                ...list,\n                                tasks: list.tasks.concat({\n                                    ...task,\n                                    location: 'priority_list',\n                                    priority_level: 'low'\n                                })\n                            }\n                            :\n                            list\n                        ));\n                })\n            )\n        );\n        setPanelControlButtons({\n                kanban_board: false,\n                priority_board: true\n            }\n        );\n    };\n\n    const handleResetMainKanbanView = () => setPanelControlButtons({\n            kanban_board: true,\n            priority_board: false\n        }\n    );\n\n    const handleResetAllErrors2 = () => setInputErrors(initialErrors);\n\n    const handleSubmitNewTaskItems2 = revised_task => {\n        setBoards(boards => boards.map(board =>\n                board.name === revised_task.board\n                    ?\n                    {\n                        ...board,\n                        tasks: board.tasks.map(old_task => old_task.id === revised_task.id\n                            ? {...old_task, ...revised_task}\n                            : old_task\n                        )\n                    }\n                    :\n                    board\n            )\n        );\n    };\n\n    const handleDeleteBoard2 = e => {\n        let id = e.target.id;\n        setBoards(boards => boards.filter(board => board.id !== id));\n        setBoards(boards => boards.map((board, id) => ({...board, order: id})));\n        setBoardsSchema(boardsSchema => [...boardsSchema].filter(elem => elem !== boards.length - 1));\n\n    };\n\n\n    const handleCreateNewTask2 = task => {\n        if (isEmpty(task) !== true) setBoards(boards => boards.map(board =>\n                board.name === 'todo'\n                    ?\n                    {\n                        ...board,\n                        tasks: board.tasks.concat(\n                            {\n                                ...task,\n                                id: uuid(),\n                                board: \"todo\",\n                                visibility: true\n                            }\n                        )\n                    }\n                    :\n                    board\n            )\n        )\n        else setNote('This list is empty');\n    };\n\n    const handleSwapTasksWithinKanbanBoard2 = e => {\n        const task_id = e.target.id;\n        const direction = e.target.getAttribute('name');\n        const board_name = e.target.getAttribute('board');\n\n        setBoards(boards => [...boards].map(board => {\n            if (board.name === board_name) {\n                const index1 = board.tasks.findIndex(task => task.id === task_id);\n                const tasks = direction === 'up'\n                    ? SwapArrayElements(board.tasks, index1, index1 - 1)\n                    : SwapArrayElements(board.tasks, index1, index1 + 1)\n                return {...board, tasks}\n            } else {\n                return board;\n            }\n        }));\n    };\n\n    const handleSwapTasksWithinPriorityList2 = e => {\n        const task_id = e.target.id;\n        const direction = e.target.getAttribute('name');\n        const list_priority_level = e.target.getAttribute('priority_level');\n\n        setPriorityTasks(priorityTasks => [...priorityTasks].map(list => {\n            if (list.priority_level === list_priority_level) {\n                const index1 = list.tasks.findIndex(task => task.id === task_id);\n                const tasks = direction === 'up'\n                    ? SwapArrayElements(list.tasks, index1, index1 - 1)\n                    : SwapArrayElements(list.tasks, index1, index1 + 1)\n                return {...list, tasks}\n            } else {\n                return list;\n            }\n        }));\n    };\n\n\n    const handleMoveTaskBetweenBoards2 = e => {\n        const id = e.target.getAttribute('id');\n        const direction = e.target.getAttribute('direction');\n        const boardOrder = e.target.getAttribute('order');\n        const location = e.target.getAttribute('location');\n        const task_priority = e.target.getAttribute('task_priority');\n\n        let isTrueSet = (task_priority === 'true');\n        let movingTask;\n\n        location === 'kanban_board'\n        ?\n            movingTask = boards.find(board => board.order === parseInt(boardOrder)).tasks.find(task => task.id === id)\n        :\n            movingTask = priorityTasks.find(list => list.order === parseInt(boardOrder)).tasks.find(task => task.id === id);\n\n        ///remove a task....\n\n        location === 'kanban_board'\n            ?\n            setBoards(boards => boards.map(board =>\n                board.order === parseInt(boardOrder)\n                    ?\n                    {\n                        ...board,\n                        tasks: board.tasks.filter(task => task.id !== id)\n                    }\n                    :\n                    board\n                )\n            )\n            :\n            setPriorityTasks(priorityTasks => priorityTasks.map(list =>\n                list.order === parseInt(boardOrder)\n                    ?\n                    {\n                        ...list,\n                        tasks: list.tasks.filter(task => task.id !== id)\n                    }\n                    :\n                    list\n                )\n            );\n\n\n        ////Add a task......\n\n        location === 'kanban_board'\n            ?\n                direction === 'right'\n                ?\n                    setBoards(boards => boards.map(board =>\n                            board.order === parseInt(boardOrder) + 1\n                                ?\n                                {\n                                    ...board,\n                                    tasks: board.tasks.concat({...movingTask, board: board.name})\n                                }\n                                : board\n                        )\n                    )\n                    :\n                    setBoards(boards => boards.map(board =>\n                            board.order === parseInt(boardOrder) - 1\n                                ?\n                                {\n                                    ...board,\n                                    tasks: board.tasks.concat({...movingTask, board: board.name})\n                                }\n                                : board\n                        )\n                    )\n            :\n                direction === 'right'\n                    ?\n                    setPriorityTasks(priorityList => priorityList.map(list =>\n                        list.order === parseInt(boardOrder) + 1\n                            ?\n                            {\n                                ...list,\n                                tasks: list.tasks.concat({\n                                    ...movingTask,\n                                    priority_level: list.priority_level,\n                                    task_priority: false\n                                })\n                            }\n                            : list\n                        )\n                    )\n                    :\n                    setPriorityTasks(priorityList => priorityList.map(list =>\n                        list.order === parseInt(boardOrder) - 1\n                            ?\n                            {\n                                ...list,\n                                tasks: list.tasks.concat({\n                                    ...movingTask,\n                                    priority_level: list.priority_level,\n                                    task_priority: true\n                                })\n                            }\n                            : list\n                        )\n                    )\n\n        if (movingTask.location === 'priority_list')\n        setBoards(boards => [...boards].map(board =>\n            board.name === movingTask.board\n                ?\n                {\n                    ...board,\n                    tasks: board.tasks.map(task =>\n                    task.id === movingTask.id\n                        ?\n                        {\n                            ...task,\n                            task_priority: !isTrueSet\n                        }\n                        :\n                        task\n                    )\n                }\n                : board\n        ));\n    };\n\n    const handleDragAndDrop2 = (board_name, task_name, id) => {\n        const dragTask = boards.find(board => board.name === task_name).tasks.find(task => task.id === id);\n\n        setBoards(boards => boards.map(board =>\n                board.name === task_name && board_name !== null\n                    ?\n                    {\n                        ...board,\n                        tasks: board.tasks.filter(task => task.id !== id)\n                    }\n                    :\n                    board\n            )\n        );\n        setBoards(boards => boards.map(board =>\n                board.name === board_name\n                    ?\n                    {\n                        ...board,\n                        tasks: board.tasks.concat({...dragTask, board: board.name})\n                    }\n                    : board\n            )\n        );\n    };\n\n    const handleDeleteTaskItem2 = e => {\n        setBoards(boards => boards.map(board =>\n                board.name === e.target.getAttribute('name')\n                    ?\n                    {\n                        ...board,\n                        tasks: board.tasks.filter(task => task.id !== e.target.id)\n                    }\n                    :\n                    board\n            )\n        );\n        if (priorityTasks.length > 0) setPriorityTasks(priorityTasks.filter(task => task.id !== e.target.id));\n    };\n\n    const handleShowTaskItem2 = e => {\n        let visible;\n        const id = e.target.getAttribute('id');\n        const name = e.target.getAttribute('name');\n        const className = e.target.getAttribute('class').split(\" \")[0];\n        const location = e.target.getAttribute('location');\n        const priority_level = e.target.getAttribute('priority_level');\n        className === 'show' ? visible = true : visible = false;\n        location === 'kanban_board'\n            ?\n            setBoards(boards => boards.map(board =>\n                    board.name === name\n                        ?\n                        {\n                            ...board,\n                            tasks: board.tasks.map(task => task.id === id\n                                ?\n                                {\n                                    ...task,\n                                    visibility: visible\n                                }\n                                :\n                                task\n                            )\n                        }\n                        :\n                        board\n                )\n            )\n            :\n            setPriorityTasks(priorityTasks => priorityTasks.map(list =>\n                    list.priority_level === priority_level\n                        ?\n                        {\n                            ...list,\n                            tasks: list.tasks.map(task => task.id === id\n                                ?\n                                {\n                                    ...task,\n                                    visibility: visible\n                                }\n                                :\n                                task\n                            )\n                        }\n                        :\n                        list\n                )\n            )\n    };\n\n/////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////\n\n\n    const handleEventProps = {\n        createBoard: handleCreateNewBoard2,\n        createTask: handleCreateNewTask2,\n        moveTask: handleMoveTaskBetweenBoards2,\n        dragTask: handleDragAndDrop2,\n        deleteTask: handleDeleteTaskItem2,\n        hideTask: handleShowTaskItem2,\n        showTask: handleShowTaskItem2,\n        submitNewTaskItems: handleSubmitNewTaskItems2,\n        deleteBoard: handleDeleteBoard2,\n        validateInput: handleValidateUserInput2,\n        resetErrors: handleResetAllErrors2,\n        swapTasks: {\n            swapKanbanTasks: handleSwapTasksWithinKanbanBoard2,\n            swapPriorityTasks: handleSwapTasksWithinPriorityList2\n        },\n        swapPriorityTasks: handleSwapTasksWithinPriorityList2,\n        filterPriorityTasks: handleGeneratePriorityTasksList2,\n        toggleEditModal: handleToggleEditTaskModal,\n        findTaskForEdit: handleFindForEditTaskModal,\n        resetMainKanbanView: handleResetMainKanbanView,\n\n    };\n\n    const handleStateProps = {\n        boards: boards,\n        priorityTasks: priorityTasks,\n        boardMessage: note,\n        errors: inputErrors,\n        boardsSchema: boardsSchema,\n        searchEditTask: searchEditTask,\n        modalButtonClick: editModalButtonClick,\n        panelControlButtons: panelControlButtons\n    };\n\n    return <Main {...handleEventProps} {...handleStateProps} />\n\n}\n\nexport default App;\n","import { transitions, positions } from 'react-alert';\r\n\r\nexport const options = {\r\n    position: positions.TOP_CENTER,\r\n    timeout: 5000,\r\n    offset: '20px',\r\n    containerStyle: {\r\n        zIndex: 9999,\r\n    },\r\n    transition: transitions.SCALE\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider as AlertProvider } from 'react-alert';\nimport App from './App';\nimport { options } from './helpers/AlertOptions';\nimport AlertTemplate from 'react-alert-template-basic';\n\nReactDOM.render(\n    <AlertProvider template={AlertTemplate} {...options}>\n        <App/>\n    </AlertProvider>, document.getElementById('root'));\n\n"],"sourceRoot":""}