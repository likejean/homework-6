{"version":3,"sources":["components/task_modal/InputForm.js","components/task_modal/DescriptionTaskInput.js","components/task_modal/ModalPage.js","components/board_modal/OrderInput.js","components/board_modal/ModalPage.js","components/main/ButtonGroup.js","components/main/TaskItem.js","components/main/NewKanbanDashboard.js","components/main/index.js","helpers/EmptyObject.js","App.js","helpers/ValidateBoardOrderInput.js","index.js"],"names":["handleDelegateNameChange","fullname","prepend","inputs","noTag","name","value","first_name","onChange","e","target","getAttribute","type","last_name","description","descriptionInputChange","label","outline","createTask","useState","modalButtonClick","setModalButtonClick","taskTitle","setTaskTitle","taskDescription","setTaskDescription","delegateName","setDelegateName","createNewTask","setCreateNewTask","stableDispatch","useCallback","useEffect","handleToggleModal","className","onClick","isOpen","toggle","size","DescriptionTaskInput","id","InputForm","attribute","color","title","boardOrderChange","order","createBoard","boardTitle","setBoardTitle","boardOrder","setBoardOrder","createNewBoard","setCreateNewBoard","OrderInput","task","board","boardLength","moveTask","deleteTask","hideTask","console","log","disabled","direction","aria-hidden","index","toggleModal","setToggleModal","DescriptionModal","handleToggleDescriptionModal","draggable","onDragStart","dataTransfer","setData","onDragOver","stopPropagation","onMouseOver","document","getElementById","querySelector","innerHTML","onMouseLeave","ButtonGroup","boards","showTask","dragTask","deleteBoard","boardMessage","dropTask","preventDefault","task_id","getData","dragTaskOver","map","key","onDrop","md","tasks","length","list","visibility","TaskItem","autoFocus","style","textAlign","props","listProps","eventProps","editTask","NewKanbanDashboard","obj","hasOwnProperty","call","initialBoards","uuid","App","note","setNote","setBoards","errors","inputStatus","setInputErrors","handleShowTaskItem2","visible","split","handleEventProps","parseInt","isEmpty","slice","Object","assign","toLowerCase","isNaN","concat","movingTask","find","filter","board_name","task_name","handleStateProps","ReactDOM","render"],"mappings":"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","file":"static/js/main.65be2736.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { MDBInputGroup, MDBInput } from \"mdbreact\";\r\nexport default ( { handleDelegateNameChange, fullname } ) => {\r\n\r\n    const handleFirstNameInputChange = e => handleDelegateNameChange(e.target.getAttribute('name'), e.target.value);\r\n    const handleLastNameInputChange  = e => handleDelegateNameChange(e.target.getAttribute('name'), e.target.value);\r\n\r\n    return (\r\n        <MDBInputGroup\r\n            prepend=\"Delegated to: \"\r\n            inputs={\r\n                <>\r\n                    <MDBInput noTag name=\"first\" value={fullname.first_name} onChange={handleFirstNameInputChange} type=\"text\" />\r\n                    <MDBInput noTag name=\"last\" value={fullname.last_name} onChange={handleLastNameInputChange} type=\"text\" />\r\n                </>\r\n            }\r\n        />\r\n    );\r\n}","import React from 'react';\r\nimport { MDBInput } from 'mdbreact';\r\n\r\nexport default ( { description, descriptionInputChange }) => <MDBInput\r\n    value={description}\r\n    onChange={descriptionInputChange}\r\n    type=\"textarea\"\r\n    label=\"Task Description\"\r\n    outline\r\n/>","import React, {useState, useEffect, useCallback} from 'react';\r\nimport {MDBContainer, MDBBtn, MDBModal, MDBModalBody, MDBModalHeader, MDBModalFooter, MDBInput} from 'mdbreact';\r\nimport InputForm from './InputForm';\r\nimport DescriptionTaskInput from \"./DescriptionTaskInput\";\r\n\r\n\r\nexport default ({ createTask }) => {\r\n    const [modalButtonClick, setModalButtonClick] = useState(false);\r\n    const [taskTitle, setTaskTitle] = useState(\"\");\r\n    const [taskDescription, setTaskDescription] = useState(\"\");\r\n    const [delegateName, setDelegateName] = useState({\r\n        first_name: \"\",\r\n        last_name: \"\"\r\n    });\r\n    const [createNewTask, setCreateNewTask] = useState({});\r\n\r\n    const handleTaskTitleChange = e => setTaskTitle(e.target.value);\r\n    const handleTaskDescriptionChange = e => setTaskDescription(e.target.value);\r\n    const handleDelegateNameChange = (attribute, value) => {\r\n        if (attribute === \"first\") setDelegateName({...delegateName, first_name: value});\r\n        if (attribute === \"last\") setDelegateName({...delegateName, last_name: value});\r\n    }\r\n\r\n    const handleStoreTaskItem = () => {\r\n        setCreateNewTask({\r\n            ...createNewTask,\r\n            title: taskTitle,\r\n            description: taskDescription,\r\n            first_name: delegateName.first_name,\r\n            last_name: delegateName.last_name\r\n        });\r\n        setModalButtonClick(!modalButtonClick);\r\n    };\r\n\r\n    const stableDispatch = useCallback(createTask, []);\r\n\r\n    useEffect(() => {\r\n        stableDispatch(createNewTask);\r\n    }, [stableDispatch, createNewTask]);\r\n\r\n\r\n    const handleToggleModal = () => {\r\n        setTaskTitle('');\r\n        setTaskDescription('');\r\n        setDelegateName({\r\n                first_name: \"\",\r\n                last_name: \"\"\r\n            }\r\n        );\r\n        setModalButtonClick(!modalButtonClick);\r\n    }\r\n\r\n    return (\r\n        <MDBContainer className=''>\r\n            <div className='start-modal-button-wrapper row align-items-center justify-content-center'>\r\n                <MDBBtn className='start-modal-button' onClick={handleToggleModal}>CREATE TASK</MDBBtn>\r\n            </div>\r\n            <MDBModal isOpen={modalButtonClick} toggle={handleToggleModal}>\r\n                <MDBModalHeader toggle={handleToggleModal}>Task Form</MDBModalHeader>\r\n                <MDBModalBody>\r\n                    <MDBInput label=\"Enter Task Title\" type='text' value={taskTitle} onChange={handleTaskTitleChange} size=\"md\" />\r\n                    <DescriptionTaskInput\r\n                        id='textArea'\r\n                        description={taskDescription}\r\n                        descriptionInputChange={handleTaskDescriptionChange}\r\n                    />\r\n                    <InputForm fullname={delegateName} handleDelegateNameChange={handleDelegateNameChange}/>\r\n                </MDBModalBody>\r\n                <MDBModalFooter>\r\n                    <MDBBtn className='row' color=\"secondary\" onClick={handleToggleModal}>Close</MDBBtn>\r\n                    <MDBBtn className='row' color=\"primary\" onClick={handleStoreTaskItem}>Create Task</MDBBtn>\r\n                </MDBModalFooter>\r\n            </MDBModal>\r\n        </MDBContainer>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { MDBInput } from 'mdbreact';\r\nimport \"./style.css\";\r\n\r\nexport default ({ boardOrderChange, order }) => {\r\n        return (\r\n            <MDBInput type=\"number\" value={order} onChange={boardOrderChange} />\r\n        );\r\n    }\r\n\r\n","import React, {useState, useEffect, useCallback} from 'react';\r\nimport {MDBContainer, MDBBtn, MDBModal, MDBModalBody, MDBModalHeader, MDBModalFooter, MDBInput} from 'mdbreact';\r\nimport OrderInput from \"./OrderInput\";\r\n\r\nexport default ({ createBoard }) => {\r\n    const [modalButtonClick, setModalButtonClick] = useState(false);\r\n    const [boardTitle, setBoardTitle] = useState(\"\");\r\n    const [boardOrder, setBoardOrder] = useState(0);\r\n    const [createNewBoard, setCreateNewBoard] = useState({});\r\n\r\n    const handleStoreBoardItem = () => {\r\n        setCreateNewBoard({\r\n            ...createNewBoard,\r\n            title: boardTitle,\r\n            order: boardOrder\r\n        });\r\n        setModalButtonClick(!modalButtonClick);\r\n    };\r\n    const handleBoardTitleChange = e => setBoardTitle(e.target.value);\r\n\r\n    const handleBoardOrderChange = e => {\r\n        let value = e.target.value;\r\n        setBoardOrder(value);\r\n    }\r\n\r\n\r\n    const stableDispatch = useCallback(createBoard, []);\r\n\r\n    useEffect(() => {\r\n        stableDispatch(createNewBoard);\r\n    }, [stableDispatch, createNewBoard]);\r\n\r\n\r\n    const handleToggleModal = () => {\r\n        setBoardTitle('');\r\n        setBoardOrder(0);\r\n        setModalButtonClick(!modalButtonClick);\r\n    }\r\n\r\n    return (\r\n        <MDBContainer className=''>\r\n            <div className='start-modal-button-wrapper row align-items-center justify-content-center'>\r\n                <MDBBtn className='start-modal-button' onClick={handleToggleModal}>CREATE BOARD</MDBBtn>\r\n            </div>\r\n            <MDBModal isOpen={modalButtonClick} toggle={handleToggleModal}>\r\n                <MDBModalHeader toggle={handleToggleModal}>Board Form</MDBModalHeader>\r\n                <MDBModalBody>\r\n                    <div className=\"form-group\">\r\n                        <MDBInput label=\"Enter Board Title\" type='text' value={boardTitle} onChange={handleBoardTitleChange} size=\"md\" />\r\n                        <OrderInput order={boardOrder} boardOrderChange={handleBoardOrderChange}/>\r\n                    </div>\r\n                </MDBModalBody>\r\n                <MDBModalFooter>\r\n                    <MDBBtn className='row' color=\"secondary\" onClick={handleToggleModal}>Close</MDBBtn>\r\n                    <MDBBtn className='row' color=\"primary\" onClick={handleStoreBoardItem}>Create Board</MDBBtn>\r\n                </MDBModalFooter>\r\n            </MDBModal>\r\n        </MDBContainer>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport {MDBBtn, MDBBtnGroup} from \"mdbreact\";\r\n\r\nexport default ({task: { board, id }, boardOrder, boardLength, moveTask, deleteTask, hideTask}) => {\r\n    console.log('length', boardLength)\r\n    return (\r\n        <MDBBtnGroup size=\"sm\" className=\"mb-4\">\r\n            <MDBBtn\r\n                disabled={boardOrder === 0}\r\n                className='task-button'\r\n                color=\"danger\"\r\n            >\r\n                <span\r\n                    id={id}\r\n                    onClick={moveTask}\r\n                    direction='left'\r\n                    order={boardOrder}\r\n                    name={`left-${board}`}\r\n                    className=\"fa fa-angle-double-left\"\r\n                    aria-hidden=\"true\"\r\n                >\r\n                </span>\r\n            </MDBBtn>\r\n            <MDBBtn className='task-button' color=\"pink\">\r\n                <span id={id} name={board} onClick={hideTask} className=\"hide fas fa-eye-slash\" aria-hidden=\"true\"/>\r\n            </MDBBtn>\r\n            <MDBBtn className='task-button' color=\"pink\">\r\n                <span id={id} name={board} className=\"hide fas fa-edit\" aria-hidden=\"true\"/>\r\n            </MDBBtn>\r\n            <MDBBtn className='task-button' color=\"pink\">\r\n                <span id={id} name={board} onClick={deleteTask} className=\"delete fas fa-trash-alt\" aria-hidden=\"true\"/>\r\n            </MDBBtn>\r\n            <MDBBtn\r\n                className='task-button'\r\n                disabled={boardOrder === boardLength - 1}\r\n                // disabled={`right-${board}` === 'right-done'}\r\n                color=\"danger\"\r\n            >\r\n                <span\r\n                    id={id}\r\n                    onClick={moveTask}\r\n                    direction='right'\r\n                    order={boardOrder}\r\n                    name={`right-${board}`}\r\n                    className=\"fa fa-angle-double-right\"\r\n                    aria-hidden=\"true\"\r\n                >\r\n                </span>\r\n            </MDBBtn>\r\n        </MDBBtnGroup>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport ButtonGroup from \"./ButtonGroup\";\r\nimport {MDBBtn, MDBContainer, MDBModal, MDBModalBody, MDBModalFooter, MDBModalHeader} from \"mdbreact\";\r\n\r\n\r\nexport default ({task, boardLength, boardOrder, index, moveTask, deleteTask, hideTask}) => {\r\n\r\n    const [toggleModal, setToggleModal] = useState(false);\r\n\r\n    const dragTaskStart = e => {\r\n        const target = e.target;\r\n        e.dataTransfer.setData('task', target.id);\r\n    };\r\n\r\n    const DescriptionModal = () =>\r\n        <MDBContainer>\r\n            <MDBModal isOpen={toggleModal} toggle={handleToggleDescriptionModal} size=\"fluid\">\r\n                <MDBModalHeader toggle={handleToggleDescriptionModal}>{task.title}</MDBModalHeader>\r\n                <MDBModalBody>\r\n                    {task.description}\r\n                </MDBModalBody>\r\n                <MDBModalFooter>\r\n                    <MDBBtn color=\"secondary\" onClick={handleToggleDescriptionModal}>Close</MDBBtn>\r\n                </MDBModalFooter>\r\n            </MDBModal>\r\n        </MDBContainer>\r\n\r\n    const dragTaskOver = e => {\r\n        e.stopPropagation();\r\n    };\r\n\r\n    const handleOnMouseOver = e => {\r\n        let id = e.target.id;\r\n        document.getElementById(id).querySelector(\".task-details\").innerHTML = 'Click Here...';\r\n    }\r\n    const handleOnMouseOff = e => {\r\n        let id = e.target.id;\r\n        document.getElementById(id).querySelector(\".task-details\").innerHTML = 'Details...';\r\n    }\r\n\r\n    const handleToggleDescriptionModal = () => setToggleModal(!toggleModal)\r\n\r\n    return (\r\n        <div\r\n            draggable='true'\r\n            name={task.board}\r\n            id={index}\r\n            onDragStart={dragTaskStart}\r\n            onDragOver={dragTaskOver}\r\n            className=\"d-flex flex-column task-card\"\r\n        >\r\n            <h6 className=\"task-title\">{task.title}</h6>\r\n            <span className=\"p-2 col-example text-left task-details\"\r\n                  id={index}\r\n                  onMouseOver={handleOnMouseOver}\r\n                  onMouseLeave={handleOnMouseOff}\r\n                  onClick={handleToggleDescriptionModal}\r\n            >\r\n                <i>Details...</i>\r\n            </span>\r\n            <DescriptionModal/>\r\n            <ButtonGroup boardLength={boardLength} boardOrder={boardOrder} moveTask={moveTask} deleteTask={deleteTask} hideTask={hideTask} task={task}/>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport TaskItem from \"./TaskItem\";\r\nimport {MDBCol, MDBContainer, MDBRow} from \"mdbreact\";\r\n\r\nexport default ({\r\n                    boards,\r\n                    moveTask,\r\n                    deleteTask,\r\n                    hideTask,\r\n                    showTask,\r\n                    dragTask,\r\n                    deleteBoard,\r\n                    boardMessage\r\n                }) =>\r\n{\r\n\r\n    const dropTask = e => {\r\n        e.preventDefault();\r\n        const task_id = e.dataTransfer.getData('task');\r\n        const task = document.getElementById(task_id);\r\n        dragTask(e.target.getAttribute('name'), task.getAttribute('name'), task_id);\r\n    };\r\n\r\n    const dragTaskOver = e => {\r\n        e.preventDefault();\r\n    };\r\n\r\n    const boardList = (list, order, length) => list.length\r\n        ?   list.map((task, id) => task.visibility\r\n            ?   <TaskItem boardLength={length} boardOrder={order} moveTask={moveTask} deleteTask={deleteTask} hideTask={hideTask} key={id} index={task.id} task={task}/>\r\n            :   <p className='show' key={task.id}>Hidden Task... <span id={task.id} name={task.board} autoFocus onClick={showTask} className='show'>SHOW</span></p>\r\n        )\r\n        :   <p style={{ color: 'white', textAlign: 'center' }}><i>{boardMessage}</i></p>;\r\n\r\n    return (\r\n        <MDBContainer className=\"dashboard\">\r\n            <MDBRow className=\"kanban-row\">\r\n                {boards.map(board => (\r\n                    <MDBCol\r\n                        key={board.id}\r\n                        onDrop={dropTask}\r\n                        name={board.name}\r\n                        onDragOver={dragTaskOver}\r\n                        className=\"kanban-col\"\r\n                        md=\"3\"\r\n                    >\r\n                        <div className='board-header container'>\r\n                            <div className='row'>\r\n                                <h3 className=\"task-list-title col-10\">{board.title}: ({board.tasks.length})</h3>\r\n                                <div className='col-2'><i id={board.id} onClick={deleteBoard} className=\"far fa-calendar-times fa-2x\"></i></div>\r\n                            </div>\r\n                        </div>\r\n                        {boardList(board.tasks, board.order, boards.length)}\r\n                    </MDBCol>\r\n                ))\r\n                }\r\n            </MDBRow>\r\n        </MDBContainer>\r\n    );\r\n}","import React from 'react';\r\nimport TaskModalPage from '../task_modal/ModalPage';\r\nimport BoardModalPage from '../board_modal/ModalPage'\r\nimport NewKanbanDashboard from \"./NewKanbanDashboard\";\r\n\r\nexport default props => {\r\n    const listProps = {\r\n        boards: props.boards,\r\n        boardMessage: props.boardMessage\r\n    };\r\n    const eventProps = {\r\n        createBoard: props.createBoard,\r\n        createTask: props.createTask,\r\n        moveTask: props.moveTask,\r\n        deleteTask: props.deleteTask,\r\n        deleteBoard: props.deleteBoard,\r\n        hideTask: props.hideTask,\r\n        showTask: props.showTask,\r\n        dragTask: props.dragTask,\r\n        editTask: props.editTask\r\n    };\r\n    return (\r\n        <div>\r\n            <TaskModalPage createTask={eventProps.createTask} />\r\n            <BoardModalPage createBoard={eventProps.createBoard} />\r\n            <NewKanbanDashboard\r\n                boardMessage={listProps.boardMessage}\r\n                {...listProps}\r\n                {...eventProps}/>\r\n        </div>\r\n    )\r\n}","export default (obj) => {\r\n\r\n    // null and undefined are \"empty\"\r\n    if (obj == null) return true;\r\n\r\n    // Assume if it has a length property with a non-zero value\r\n    // that that property is correct.\r\n    if (obj.length > 0)    return false;\r\n    if (obj.length === 0)  return true;\r\n\r\n    // If it isn't an object at this point\r\n    // it is empty, but it can't be anything *but* empty\r\n    // Is it empty?  Depends on your application.\r\n    if (typeof obj !== \"object\") return true;\r\n\r\n    // Otherwise, does it have any properties of its own?\r\n    // Note that this doesn't handle\r\n    // toString and valueOf enumeration bugs in IE < 9\r\n    for (var key in obj) {\r\n        if (hasOwnProperty.call(obj, key)) return false;\r\n    }\r\n\r\n    return true;\r\n}","import React, {useState} from 'react';\nimport Main from './components/main';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\nimport uuid from 'react-uuid';\nimport './App.css';\nimport isEmpty from './helpers/EmptyObject';\nimport ValidateBoardOrderInput from \"./helpers/ValidateBoardOrderInput\";\n\n\nconst initialBoards = [\n    {\n        name: 'todo',\n        order: 0,\n        title: 'To-Do',\n        id: uuid(),\n        tasks: []\n    },\n    {\n        name: 'in-progress',\n        order: 1,\n        title: 'In-Progress',\n        id: uuid(),\n        tasks: []\n\n    },\n    {\n        name: 'review',\n        order: 2,\n        title: 'To-Review',\n        id: uuid(),\n        tasks: []\n\n    },\n    {\n        name: 'done',\n        order: 3,\n        title: 'Completed',\n        id: uuid(),\n        tasks: []\n    },\n    {\n        name: 'extra',\n        order: 4,\n        title: 'Extra',\n        id: uuid(),\n        tasks: []\n    }\n];\n\nfunction App() {\n\n    const [note, setNote] = useState(\"\");\n    const [boards, setBoards] = useState(initialBoards);\n    const [inputErrors, setInputErrors] = useState({\n        errors: '',\n        inputStatus: false\n    });\n\n    const handleCreateNewBoard2 = board => {\n        let index = parseInt(board.order) - 1;\n        if (isEmpty(board) !== true) {\n            setBoards(boards => [\n                ...boards.slice(0, index),\n                Object.assign({},\n                    {\n                        ...board,\n                        id: uuid(),\n                        name: board.title.toLowerCase(),\n                        tasks: []\n                    }),\n                ...boards.slice(index)\n            ]);\n            setBoards(boards => boards.map((board, id) => ({...board, order: id })));\n            setInputErrors(ValidateBoardOrderInput(board.order));\n        }\n    }\n\n    const handleEditTaskItem2 = e => {\n        console.log(e.target.id);\n    }\n\n    const handleDeleteBoard2 = e => {\n        let id = e.target.id;\n        setBoards(boards => boards.filter(board => board.id !== id));\n        setBoards(boards => boards.map((board, id) => ({...board, order: id })));\n    }\n\n\n    const handleCreateNewTask2 = task => {\n        if (isEmpty(task) !== true) setBoards(boards => boards.map(board =>\n            board.name === 'todo'\n                ?\n                {\n                    ...board,\n                    tasks: board.tasks.concat(\n                        {\n                            ...task,\n                            id: uuid(),\n                            board: \"todo\",\n                            visibility: true\n                        }\n                    )\n                }\n                :\n                board\n            )\n        )\n        else setNote('This list is empty');\n    };\n\n\n    const handleMoveTaskWithinBoard2 = e => {\n        const id = e.target.getAttribute('id');\n        const direction = e.target.getAttribute('direction');\n        const boardOrder = e.target.getAttribute('order');\n        const movingTask = boards.find(board => board.order === parseInt(boardOrder)).tasks.find(task => task.id === id);\n\n        ///remove a task....\n        setBoards(boards => boards.map(board =>\n            board.order === parseInt(boardOrder)\n                ?\n                {\n                    ...board,\n                    tasks: board.tasks.filter(task => task.id !== id)\n                }\n                :\n                board\n            )\n        );\n\n        ////Add a task......\n        setBoards(boards => boards.map(board =>\n            board.order === parseInt(boardOrder) + 1 && direction === 'right'\n                ?\n                {\n                    ...board,\n                    tasks: board.tasks.concat({...movingTask, board: board.name})\n                }\n                : board\n            )\n        );\n        setBoards(boards => boards.map(board =>\n            board.order === parseInt(boardOrder) - 1 && direction === 'left'\n                ?\n                {\n                    ...board,\n                    tasks: board.tasks.concat({...movingTask, board: board.name})\n                }\n                : board\n            )\n        );\n    };\n\n    const handleDragAndDrop2 = (board_name, task_name, id) => {\n        const dragTask = boards.find(board => board.name === task_name).tasks.find(task => task.id === id);\n\n        setBoards(boards => boards.map(board =>\n            board.name === task_name\n                ?\n                {\n                    ...board,\n                    tasks: board.tasks.filter(task => task.id !== id)\n                }\n                :\n                board\n            )\n        );\n        setBoards(boards => boards.map(board =>\n                board.name === board_name\n                ?\n                {\n                    ...board,\n                    tasks: board.tasks.concat({...dragTask, board: board.name})\n                }\n                : board\n            )\n        );\n    }\n\n    const handleDeleteTaskItem2 = e => {\n        setBoards(boards => boards.map(board =>\n                board.name === e.target.getAttribute('name')\n                    ?\n                    {\n                        ...board,\n                        tasks: board.tasks.filter(task => task.id !== e.target.id)\n                    }\n                    :\n                    board\n            )\n        );\n    };\n\n    const handleShowTaskItem2 = e => {\n        let visible;\n        const id = e.target.getAttribute('id');\n        const name = e.target.getAttribute('name');\n        const className = e.target.getAttribute('class').split(\" \")[0];\n        className === 'show' ? visible = true : visible = false;\n\n        setBoards(boards => boards.map(board =>\n            board.name === name\n                ?\n                {\n                    ...board,\n                    tasks: board.tasks.map(task => task.id === id\n                        ?\n                        {\n                            ...task,\n                            visibility: visible\n                        }\n                        :\n                        task\n                    )\n                }\n                :\n                board\n            )\n        );\n    }\n\n    /////////////////////////////////////////////////////////////////\n    ////////////////////////////////////////////////////////////////////\n\n\n    const handleEventProps = {\n\n        createBoard: handleCreateNewBoard2,\n        createTask: handleCreateNewTask2,\n        moveTask: handleMoveTaskWithinBoard2,\n        dragTask: handleDragAndDrop2,\n        deleteTask: handleDeleteTaskItem2,\n        hideTask: handleShowTaskItem2,\n        showTask: handleShowTaskItem2,\n        editTask: handleEditTaskItem2,\n        deleteBoard: handleDeleteBoard2\n    };\n\n    const handleStateProps = {\n        boards: boards,\n        boardMessage: note\n    };\n\n    return <Main {...handleEventProps} {...handleStateProps} />\n\n}\n\nexport default App;\n","export default value => (\r\n    {\r\n        errors:\r\n            isNaN(value) || value === \"\"\r\n                ? 'Input must be an INTEGER'\r\n                : parseInt(value) <= 0\r\n                ? 'Must be greater than zero'\r\n                : '',\r\n        inputStatus:\r\n            parseInt(value) <= 0\r\n    });\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}