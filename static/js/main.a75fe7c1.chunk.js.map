{"version":3,"sources":["components/main/LoadingComponent.js","components/task_modal/InputForm.js","components/task_modal/DescriptionTaskInput.js","components/board_modal/ErrorMessage.js","helpers/ValidateUserBlankInput.js","components/task_modal/ToggleSwitchPriority.js","components/task_modal/ModalPage.js","components/board_modal/OrderInput.js","components/board_modal/InsertionBoardSchema.js","components/board_modal/ModalPage.js","components/auth/LoginForm.js","components/auth/ModalPage.js","components/main/ButtonGroup.js","components/main/TaskItem.js","components/main/NewKanbanDashboard.js","components/main/PriorityOrderedTasks.js","components/edit_modal/ModalPage.js","components/main/index.js","helpers/EmptyObject.js","helpers/SwapArrayElements.js","helpers/ValidateUserInputChange.js","KanbanBoard.js","App.js","helpers/AlertOptions.js","index.js"],"names":["type","color","delay","height","width","handleDelegateNameChange","fullname","style","marginBottom","prepend","inputs","noTag","name","value","first","onChange","e","target","getAttribute","last","description","descriptionInputChange","className","label","outline","error","arr","some","input","SwitchButton","props","state","checked","handleChange","bind","this","setState","switchPriority","md","marginLeft","fontSize","Component","createTask","resetErrors","validateInput","errors","taskTitleError","taskDescriptionError","firstNameError","lastNameError","useState","modalButtonClick","setModalButtonClick","taskTitle","setTaskTitle","taskDescription","setTaskDescription","highTaskPriority","setHighTaskPriority","delegateName","setDelegateName","createNewTask","setCreateNewTask","alert","useAlert","stableDispatch","useCallback","useEffect","handleToggleModal","onClick","zIndex","isOpen","toggle","size","ErrorMessage","DescriptionTaskInput","id","task_priority","InputForm","attribute","disabled","inputStatus","ValidateUserBlankInput","timeout","onOpen","console","log","onClose","task_title","location","task_description","boardOrderChange","order","newBoardPlaceOrder","boardsSchema","isNaN","marginRight","map","block","idx","key","setBoardOrderState","createBoard","boards","boardOrderError","boardTitleError","boardTitle","setBoardTitle","boardOrder","setBoardOrder","createNewBoard","setCreateNewBoard","setNewBoardPlaceOrder","InsertionBoardSchema","OrderInput","title","board","userLoginAuth","email","password","userLoginCredentials","setUserLoginCredentials","handleUserLoginInputs","center","htmlFor","LoginForm","task","priority_level","handleFindForEditTaskModal","boardLength","moveTask","deleteTask","hideTask","boolStr","direction","aria-hidden","index","listLength","swapTasks","editTask","toggleModal","setToggleModal","DescriptionModal","handleToggleDescriptionModal","draggable","onDragStart","dataTransfer","setData","onDragOver","stopPropagation","display","justifyContent","onMouseOver","document","getElementById","querySelector","innerHTML","onMouseLeave","ButtonGroup","swapKanbanTasks","showTask","dragTask","deleteBoard","boardMessage","dropTask","preventDefault","task_id","getData","tasks","visibility","dragTaskOver","handleDeleteBoard","onDrop","length","list","TaskItem","autoFocus","textAlign","priorityTasks","swapPriorityTasks","toUpperCase","priorityTasksList","handleToggleEditTaskModal","submitNewTaskItems","searchEditTask","editTaskItems","setEditTaskItems","toggleTaskPriority","setToggleTaskPriority","changeEvent","setChangeEvent","handleEditTaskItemChange","first_name","last_name","listProps","loading","panelControlButtons","eventProps","filterPriorityTasks","toggleEditModal","findTaskForEdit","resetMainKanbanView","marginTop","href","kanban_board","priority_board","NewKanbanDashboard","PriorityOrderedTasks","obj","hasOwnProperty","call","a","b","temp","titleFormat","personNameFormat","parseInt","match","initialPriorityTaskList","uuid","initialErrors","URI_heroku","KanbanBoard","note","setNote","setLoading","setBoards","inputErrors","setInputErrors","setBoardsSchema","setPriorityTasks","editModalButtonClick","setEditModalButtonClick","setSearchEditTask","setPanelControlButtons","boardsRef","useRef","fetch","json","then","data","_id","priority","sort","Array","keys","catch","err","handleSwapTasksWithinPriorityList2","list_priority_level","index1","findIndex","SwapArrayElements","handleShowTaskItem2","visible","split","handleEventProps","isEmpty","method","headers","body","JSON","stringify","toLowerCase","response","createdBoard","slice","Object","assign","concat","current","createdTask","movingTask","isTrueSet","find","filter","priorityList","moveOutBoard","moveInBoard","board_name","task_name","deletedTask","revised_task","new_task","updatedTask","old_task","deletedBoard","elem","ValidateUserInput","credentials","result","warn","forEach","handleStateProps","options","position","positions","TOP_CENTER","offset","containerStyle","transition","transitions","SCALE","ReactDOM","render","template","AlertTemplate"],"mappings":"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","file":"static/js/main.a75fe7c1.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactLoading from 'react-loading';\r\n\r\nexport default ({ type, color, delay, height, width }) => (\r\n    <ReactLoading\r\n        type={type}\r\n        color={color}\r\n        delay={delay}\r\n        height={height}\r\n        width={width}\r\n    />\r\n);\r\n","import React from \"react\";\r\nimport { MDBInputGroup, MDBInput } from \"mdbreact\";\r\nexport default ( { handleDelegateNameChange, fullname } ) => {\r\n\r\n    const handleFirstNameInputChange = e => handleDelegateNameChange(e.target.getAttribute('name'), e.target.value);\r\n    const handleLastNameInputChange  = e => handleDelegateNameChange(e.target.getAttribute('name'), e.target.value);\r\n\r\n    return (\r\n        <MDBInputGroup style={{ marginBottom: 10 }}\r\n            prepend=\"Delegated to: \"\r\n            inputs={\r\n                <>\r\n                    <MDBInput noTag name=\"first\" value={fullname.first} onChange={handleFirstNameInputChange} type=\"text\" />\r\n                    <MDBInput noTag name=\"last\" value={fullname.last} onChange={handleLastNameInputChange} type=\"text\" />\r\n                </>\r\n            }\r\n        />\r\n    );\r\n}","import React from 'react';\r\nimport { MDBInput, MDBContainer } from 'mdbreact';\r\n\r\nexport default ({ description, descriptionInputChange }) =>\r\n    <MDBContainer className='task-description'>\r\n        <MDBInput\r\n            value={description}\r\n            name='task_description'\r\n            onChange={descriptionInputChange}\r\n            type=\"textarea\"\r\n            label=\"Task Description\"\r\n            outline\r\n        />\r\n    </MDBContainer>\r\n","import React from 'react';\r\nimport { MDBContainer, MDBAlert } from 'mdbreact';\r\n\r\nexport default ({ error }) => (\r\n        <MDBContainer>\r\n            <MDBAlert color=\"danger\" >\r\n                {error}\r\n            </MDBAlert>\r\n        </MDBContainer>\r\n    );\r\n\r\n","export default arr => arr.some(input => input === \" \" || input === \"\" || input == null);","import React, { Component } from \"react\";\r\nimport Switch from \"react-switch\";\r\nimport { MDBRow, MDBCol } from \"mdbreact\";\r\n\r\nexport default class SwitchButton extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { checked: false };\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    handleChange(checked) {\r\n        this.setState({ checked });\r\n        this.props.switchPriority(checked);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <label>\r\n                <MDBRow>\r\n                    <MDBCol md=\"2\">\r\n                        <Switch onChange={this.handleChange} checked={this.state.checked} />\r\n                    </MDBCol>\r\n                    <MDBCol md=\"10\">\r\n                        <span style={{ marginLeft: 15, fontSize: 20 }}>Please, select if this task is priority</span>\r\n                    </MDBCol>\r\n                </MDBRow>\r\n            </label>\r\n        );\r\n    }\r\n}","import React, {useState, useEffect, useCallback} from 'react';\r\nimport { MDBBtn, MDBModal, MDBModalBody, MDBModalHeader, MDBModalFooter, MDBInput } from 'mdbreact';\r\nimport InputForm from './InputForm';\r\nimport DescriptionTaskInput from \"./DescriptionTaskInput\";\r\nimport ErrorMessage from \"../board_modal/ErrorMessage\";\r\nimport ValidateUserBlankInput from '../../helpers/ValidateUserBlankInput';\r\nimport {useAlert} from 'react-alert';\r\nimport SwitchButton from \"./ToggleSwitchPriority\";\r\n\r\nexport default ({\r\n                    createTask,\r\n                    resetErrors,\r\n                    validateInput,\r\n                    errors: {\r\n                        taskTitleError,\r\n                        taskDescriptionError,\r\n                        firstNameError,\r\n                        lastNameError\r\n                    }\r\n                }) => {\r\n    const [modalButtonClick, setModalButtonClick] = useState(false);\r\n    const [taskTitle, setTaskTitle] = useState(\"\");\r\n    const [taskDescription, setTaskDescription] = useState(\"\");\r\n    const [highTaskPriority, setHighTaskPriority] = useState(false);\r\n    const [delegateName, setDelegateName] = useState({\r\n        first: \"\",\r\n        last: \"\"\r\n    });\r\n    const [createNewTask, setCreateNewTask] = useState({});\r\n\r\n    const handleTaskTitleChange = e => {\r\n        const {value, name} = e.target;\r\n        validateInput(value, name);\r\n        setTaskTitle(value);\r\n    }\r\n\r\n    const handleHighTaskPrioritySwitch = task_priority => {\r\n        setHighTaskPriority(task_priority);\r\n    }\r\n\r\n    const handleTaskDescriptionChange = e => {\r\n        const {value, name} = e.target;\r\n        validateInput(value, name);\r\n        setTaskDescription(value);\r\n    }\r\n    const handleDelegateNameChange = (attribute, value) => {\r\n        if (attribute === \"first\") {\r\n            validateInput(value, attribute);\r\n            setDelegateName({...delegateName, first: value});\r\n        }\r\n        if (attribute === \"last\") {\r\n            validateInput(value, attribute);\r\n            setDelegateName({...delegateName, last: value});\r\n        }\r\n    }\r\n\r\n    const alert = useAlert();\r\n\r\n    const handleStoreTaskItem = () => {\r\n        if (ValidateUserBlankInput(\r\n            [\r\n                taskTitle,\r\n                taskDescription,\r\n                delegateName.first,\r\n                delegateName.last\r\n            ])) {\r\n            alert.error(<div style={{color: 'red', fontSize: 15}}>Please, Fill Blank Fields...</div>, {\r\n                timeout: 5000,\r\n                onOpen: () => {\r\n                    console.log('hey')\r\n                },\r\n                onClose: () => {\r\n                    console.log('closed')\r\n                }\r\n            });\r\n        } else {\r\n            setCreateNewTask({\r\n                ...createNewTask,\r\n                task_title: taskTitle,\r\n                location: 'kanban_board',\r\n                task_description: taskDescription,\r\n                task_priority: highTaskPriority,\r\n                first: delegateName.first,\r\n                last: delegateName.last\r\n            });\r\n            setModalButtonClick(!modalButtonClick);\r\n            setHighTaskPriority(false);\r\n        }\r\n    };\r\n\r\n    const stableDispatch = useCallback(createTask, []);\r\n\r\n    useEffect(() => {\r\n        stableDispatch(createNewTask);\r\n    }, [stableDispatch, createNewTask]);\r\n\r\n\r\n    const handleToggleModal = () => {\r\n        setTaskTitle('');\r\n        setTaskDescription('');\r\n        setDelegateName({\r\n                first: \"\",\r\n                last: \"\"\r\n            }\r\n        );\r\n        setModalButtonClick(!modalButtonClick);\r\n        resetErrors();\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <MDBBtn className='start-modal-button' onClick={handleToggleModal}>CREATE TASK</MDBBtn>\r\n            <MDBModal style={{zIndex: 1}} isOpen={modalButtonClick} toggle={handleToggleModal}>\r\n                <MDBModalHeader toggle={handleToggleModal}>Task Form</MDBModalHeader>\r\n                <MDBModalBody>\r\n                    <MDBInput label=\"Enter Task Title\" name='task_title' type='text' value={taskTitle}\r\n                              onChange={handleTaskTitleChange} size=\"md\"/>\r\n                    {taskTitleError.errors && <ErrorMessage error={taskTitleError.errors}/>}\r\n                    <DescriptionTaskInput\r\n                        id='textArea'\r\n                        description={taskDescription}\r\n                        descriptionInputChange={handleTaskDescriptionChange}\r\n                    />\r\n                    {taskDescriptionError.errors && <ErrorMessage error={taskDescriptionError.errors}/>}\r\n                    <SwitchButton switchPriority={handleHighTaskPrioritySwitch}/>\r\n                    <InputForm fullname={delegateName} handleDelegateNameChange={handleDelegateNameChange}/>\r\n                    {firstNameError.errors && <ErrorMessage error={firstNameError.errors}/>}\r\n                    {lastNameError.errors && <ErrorMessage error={lastNameError.errors}/>}\r\n                </MDBModalBody>\r\n                <MDBModalFooter>\r\n                    <MDBBtn className='row' color=\"secondary\" onClick={handleToggleModal}>Close</MDBBtn>\r\n                    <MDBBtn\r\n                        disabled={taskTitleError.inputStatus || taskDescriptionError.inputStatus || firstNameError.inputStatus || lastNameError.inputStatus}\r\n                        className='row'\r\n                        color=\"primary\" onClick={handleStoreTaskItem}>Create Task</MDBBtn>\r\n                </MDBModalFooter>\r\n            </MDBModal>\r\n        </>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { MDBInput } from 'mdbreact';\r\nimport \"./style.css\";\r\n\r\nexport default ({ boardOrderChange, order }) => {\r\n    return (\r\n        <MDBInput label=\"Enter Board Order\" name='board_order' type=\"text\" value={order} onChange={boardOrderChange}/>\r\n    );\r\n}\r\n\r\n","import React from 'react';\r\n\r\nexport default ({ newBoardPlaceOrder, boardsSchema }) => {\r\n    console.log(boardsSchema)\r\n    const order = isNaN(newBoardPlaceOrder) || newBoardPlaceOrder === 0 ? 1 : newBoardPlaceOrder;\r\n    return (\r\n        <div className='schema-container'>\r\n            <i style={{color: 'red', order: order, marginRight: 7}} className=\"fas fa-level-down-alt fa-3x\"/>\r\n\r\n            {boardsSchema.map((block, idx) => (\r\n                idx + 1 < order\r\n                    ?\r\n                    <div style={{order: idx + 1}} key={idx} className='block-element'>{idx + 1}</div>\r\n                    :\r\n                    <div style={{order: idx + 2}} key={idx} className='block-element'>{idx + 1}</div>\r\n                )\r\n            )}\r\n        </div>\r\n    );\r\n}","import React, {useState, useEffect, useCallback} from 'react';\r\nimport { MDBBtn, MDBModal, MDBModalBody, MDBModalHeader, MDBModalFooter, MDBInput } from 'mdbreact';\r\nimport OrderInput from \"./OrderInput\";\r\nimport ErrorMessage from \"./ErrorMessage\";\r\nimport { useAlert } from 'react-alert';\r\nimport ValidateUserBlankInput from '../../helpers/ValidateUserBlankInput';\r\nimport InsertionBoardSchema from \"./InsertionBoardSchema\";\r\n\r\nexport default ({\r\n                    boardsSchema,\r\n                    setBoardOrderState,\r\n                    createBoard,\r\n                    validateInput,\r\n                    boards,\r\n                    errors: { boardOrderError, boardTitleError }\r\n}) => {\r\n    const [modalButtonClick, setModalButtonClick] = useState(false);\r\n    const [boardTitle, setBoardTitle] = useState(\"\");\r\n    const [boardOrder, setBoardOrder] = useState(0);\r\n    const [createNewBoard, setCreateNewBoard] = useState({});\r\n    const [newBoardPlaceOrder, setNewBoardPlaceOrder] = useState(1);\r\n\r\n    const alert = useAlert();\r\n\r\n    const handleStoreBoardItem = () => {\r\n        if(ValidateUserBlankInput([boardTitle])){\r\n            alert.error(<div style={{ color: 'red', fontSize: 15 }}>Please, Fill Blank Fields...</div>, {\r\n                timeout: 5000,\r\n                onOpen: () => {\r\n                    console.log('hey')\r\n                },\r\n                onClose: () => {\r\n                    console.log('closed')\r\n                }\r\n            });\r\n        }\r\n        else{\r\n            setCreateNewBoard({\r\n                ...createNewBoard,\r\n                title: boardTitle,\r\n                order: boardOrder\r\n            });\r\n            setModalButtonClick(!modalButtonClick);\r\n            setNewBoardPlaceOrder(1);\r\n            setBoardOrderState(boards.map(board => (\r\n                {\r\n                    id: board.id,\r\n                    order: board.order,\r\n                    name: board.name\r\n                }\r\n                ))\r\n            );\r\n        }\r\n    };\r\n    const handleBoardTitleChange = e => {\r\n        const { value, name } = e.target;\r\n        validateInput(value, name);\r\n        setBoardTitle(e.target.value);\r\n    }\r\n\r\n    const handleBoardOrderChange = e => {\r\n        const { value, name } = e.target;\r\n        validateInput(value, name);\r\n        setBoardOrder(value);\r\n        setNewBoardPlaceOrder(value);\r\n    }\r\n\r\n\r\n    const stableDispatch = useCallback(createBoard, []);\r\n\r\n    useEffect(() => {\r\n        stableDispatch(createNewBoard);\r\n    }, [stableDispatch, createNewBoard]);\r\n\r\n\r\n    const handleToggleModal = () => {\r\n        setBoardTitle('');\r\n        setBoardOrder(1);\r\n        setModalButtonClick(!modalButtonClick);\r\n        setNewBoardPlaceOrder(1);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <MDBBtn className='start-modal-button' onClick={handleToggleModal}>CREATE BOARD</MDBBtn>\r\n            <MDBModal isOpen={modalButtonClick} toggle={handleToggleModal}>\r\n                <MDBModalHeader toggle={handleToggleModal}>Board Form</MDBModalHeader>\r\n                <MDBModalBody>\r\n                    <div className=\"form-group\">\r\n                        <MDBInput label=\"Enter Board Title\" name='board_title' type='text' value={boardTitle} onChange={handleBoardTitleChange} size=\"md\" />\r\n                        {boardTitleError.errors && <ErrorMessage error={boardTitleError.errors}/>}\r\n                        <InsertionBoardSchema newBoardPlaceOrder={+newBoardPlaceOrder} boardsSchema={boardsSchema}/>\r\n                        <OrderInput order={boardOrder} boardOrderChange={handleBoardOrderChange}/>\r\n                        {boardOrderError.errors && <ErrorMessage error={boardOrderError.errors}/>}\r\n                    </div>\r\n                </MDBModalBody>\r\n                <MDBModalFooter>\r\n                    <MDBBtn className='row' color=\"secondary\" onClick={handleToggleModal}>Close</MDBBtn>\r\n                    <MDBBtn disabled={boardOrderError.inputStatus || boardTitleError.inputStatus} className='row' color=\"primary\" onClick={handleStoreBoardItem}>Create Board</MDBBtn>\r\n                </MDBModalFooter>\r\n            </MDBModal>\r\n        </>\r\n    );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { MDBContainer, MDBRow, MDBCol, MDBBtn } from 'mdbreact';\r\n\r\nexport default ({ userLoginAuth, handleToggleModal }) => {\r\n\r\n    const [userLoginCredentials, setUserLoginCredentials] = useState({\r\n        email: '',\r\n        password: ''\r\n    });\r\n\r\n    const handleUserLoginInputs = e => {\r\n        const { name, value } = e.target;\r\n        setUserLoginCredentials({\r\n            ...userLoginCredentials,\r\n            [name]: value\r\n        });\r\n    };\r\n\r\n    const handleUserCredentialSubmit = () => {\r\n        userLoginAuth({\r\n            email: userLoginCredentials.email,\r\n            password: userLoginCredentials.password\r\n        });\r\n        handleToggleModal();\r\n    };\r\n\r\n    return (\r\n        <MDBContainer>\r\n            <MDBRow center>\r\n                <MDBCol md=\"6\">\r\n                    <div>\r\n                        <h3 className=\"h4 text-center mb-4\">SIGN IN</h3>\r\n                        <label htmlFor=\"defaultFormLoginEmailEx\" className=\"grey-text\">\r\n                            Your email\r\n                        </label>\r\n                        <input\r\n                            type=\"email\"\r\n                            id=\"defaultFormLoginEmailEx\"\r\n                            name='email'\r\n                            className=\"form-control\"\r\n                            value={userLoginCredentials.email}\r\n                            onChange={handleUserLoginInputs}\r\n                        />\r\n                        <br />\r\n                        <label htmlFor=\"defaultFormLoginPasswordEx\" className=\"grey-text\">\r\n                            Your password\r\n                        </label>\r\n                        <input\r\n                            type=\"password\"\r\n                            id=\"defaultFormLoginPasswordEx\"\r\n                            name='password'\r\n                            className=\"form-control\"\r\n                            value={userLoginCredentials.password}\r\n                            onChange={handleUserLoginInputs}\r\n                        />\r\n                        <div className=\"text-center mt-4\">\r\n                            <MDBBtn\r\n                                onClick={handleUserCredentialSubmit}\r\n                                color=\"indigo\"\r\n                                type=\"submit\"\r\n                            >\r\n                                LOGIN\r\n                            </MDBBtn>\r\n                        </div>\r\n                    </div>\r\n                </MDBCol>\r\n            </MDBRow>\r\n        </MDBContainer>\r\n    );\r\n};\r\n\r\n","import React, { useState } from 'react';\r\nimport { MDBBtn, MDBModal, MDBModalBody, MDBModalHeader } from 'mdbreact';\r\nimport LoginForm from \"./LoginForm\";\r\n\r\nexport default ({ userLoginAuth }) => {\r\n    const [modalButtonClick, setModalButtonClick] = useState(false);\r\n\r\n    const handleToggleModal = () => setModalButtonClick(!modalButtonClick);\r\n    return (\r\n        <>\r\n            <MDBBtn className='login-modal-button' onClick={handleToggleModal}>LOGIN</MDBBtn>\r\n            <MDBModal isOpen={modalButtonClick} toggle={handleToggleModal}>\r\n                <MDBModalHeader\r\n                    toggle={handleToggleModal}\r\n                >\r\n                    Login Form\r\n                </MDBModalHeader>\r\n                <MDBModalBody>\r\n                    <LoginForm\r\n                        userLoginAuth={userLoginAuth}\r\n                        handleToggleModal={handleToggleModal}\r\n                    />\r\n                </MDBModalBody>\r\n            </MDBModal>\r\n        </>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport {MDBBtn, MDBBtnGroup} from \"mdbreact\";\r\n\r\nexport default ({task: {board, id, location, priority_level, task_priority}, boardOrder, handleFindForEditTaskModal, boardLength, moveTask, deleteTask, hideTask}) => {\r\n    const boolStr = task_priority ? 'true' : 'false';\r\n    return (\r\n        <MDBBtnGroup size=\"sm\" className=\"mb-4\">\r\n            <MDBBtn\r\n                disabled={boardOrder === 0}\r\n                className='task-button'\r\n                color=\"white\"\r\n            >\r\n                <span\r\n                    id={id}\r\n                    onClick={moveTask}\r\n                    direction='left'\r\n                    location={location}\r\n                    priority_level={priority_level}\r\n                    task_priority={boolStr}\r\n                    order={boardOrder}\r\n                    name={`left-${board}`}\r\n                    className=\"fa fa-angle-double-left\"\r\n                    aria-hidden=\"true\"\r\n                >\r\n                </span>\r\n            </MDBBtn>\r\n            <MDBBtn className='task-button' color=\"white\">\r\n                <span id={id} name={board} location={location} priority_level={priority_level} onClick={hideTask}\r\n                      className=\"hide fas fa-eye-slash\" aria-hidden=\"true\"/>\r\n            </MDBBtn>\r\n            {\r\n                location === 'kanban_board'\r\n                    ?\r\n                    <>\r\n                        <MDBBtn className='task-button' color=\"white\">\r\n                            <span id={id} name={board} onClick={handleFindForEditTaskModal} className=\"edit fas fa-edit\"\r\n                                  aria-hidden=\"true\"/>\r\n                        </MDBBtn>\r\n                        <MDBBtn className='task-button' color=\"white\">\r\n                            <span id={id} name={board} onClick={deleteTask} className=\"delete fas fa-trash-alt\"\r\n                                  aria-hidden=\"true\"/>\r\n                        </MDBBtn>\r\n                    </>\r\n                    :\r\n                    null\r\n            }\r\n            <MDBBtn\r\n                className='task-button'\r\n                disabled={boardOrder === boardLength - 1}\r\n                color=\"white\"\r\n            >\r\n                <span\r\n                    id={id}\r\n                    onClick={moveTask}\r\n                    direction='right'\r\n                    location={location}\r\n                    priority_level={priority_level}\r\n                    task_priority={boolStr}\r\n                    order={boardOrder}\r\n                    name={`right-${board}`}\r\n                    className=\"fa fa-angle-double-right\"\r\n                    aria-hidden=\"true\"\r\n                >\r\n                </span>\r\n            </MDBBtn>\r\n        </MDBBtnGroup>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport ButtonGroup from \"./ButtonGroup\";\r\nimport {MDBBtn, MDBRow, MDBCol, MDBContainer, MDBModal, MDBModalBody, MDBModalFooter, MDBModalHeader} from \"mdbreact\";\r\n\r\n\r\nexport default ({task, index, listLength, boardLength, swapTasks, handleFindForEditTaskModal, boardOrder, id, moveTask, editTask, deleteTask, hideTask}) => {\r\n\r\n    const [toggleModal, setToggleModal] = useState(false);\r\n    const dragTaskStart = e => {\r\n        const target = e.target;\r\n        e.dataTransfer.setData('task', target.id);\r\n    };\r\n\r\n    const DescriptionModal = () =>\r\n        <MDBContainer>\r\n            <MDBModal isOpen={toggleModal} toggle={handleToggleDescriptionModal} size=\"fluid\">\r\n                <MDBModalHeader toggle={handleToggleDescriptionModal}>{task.task_title}</MDBModalHeader>\r\n                <MDBModalBody>\r\n                    {task.task_description}\r\n                </MDBModalBody>\r\n                <MDBModalFooter>\r\n                    <MDBBtn color=\"secondary\" onClick={handleToggleDescriptionModal}>Close</MDBBtn>\r\n                </MDBModalFooter>\r\n            </MDBModal>\r\n        </MDBContainer>\r\n\r\n    const dragTaskOver = e => {\r\n        e.stopPropagation();\r\n    };\r\n\r\n    const handleOnMouseOver = e => {\r\n        let id = e.target.id;\r\n        if(id && document.getElementById(id).querySelector(\".task-details\") !== null) document.getElementById(id).querySelector(\".task-details\").innerHTML = 'Click Here...';\r\n\r\n    }\r\n    const handleOnMouseOff = e => {\r\n        let id = e.target.id;\r\n        if(id && document.getElementById(id).querySelector(\".task-details\") !== null) document.getElementById(id).querySelector(\".task-details\").innerHTML = 'Details...';\r\n    }\r\n\r\n    const handleToggleDescriptionModal = () => setToggleModal(!toggleModal)\r\n\r\n    return (\r\n        <MDBContainer\r\n            draggable='true'\r\n            name={task.board}\r\n            id={id}\r\n            onDragStart={dragTaskStart}\r\n            onDragOver={dragTaskOver}\r\n            className=\"d-flex flex-column task-card\"\r\n        >\r\n            <MDBBtn\r\n                disabled={index === 0}\r\n                name='up'\r\n                color='white'\r\n                priority_level={task.priority_level}\r\n                location={task.location}\r\n                board={task.board}\r\n                id={id}\r\n                className='up-button'\r\n                onClick={swapTasks}\r\n            >\r\n                Up\r\n            </MDBBtn>\r\n            <MDBRow>\r\n                <MDBCol size=\"8\" style={{display: 'flex', justifyContent: 'flex-start'}}>\r\n                    <h6 className=\"task-title\">{task.task_title}</h6>\r\n                </MDBCol>\r\n                {task.task_priority && <MDBCol style={{display: 'flex', justifyContent: 'flex-end'}} className=\"priority\"><i className=\"fas fa-exclamation-triangle fa-2x\"/></MDBCol>}\r\n            </MDBRow>\r\n            <span className=\"p-2 col-example text-left task-details\"\r\n                  id={id}\r\n                  onMouseOver={handleOnMouseOver}\r\n                  onMouseLeave={handleOnMouseOff}\r\n                  onClick={handleToggleDescriptionModal}\r\n            >\r\n                <i>Details...</i>\r\n            </span>\r\n            <DescriptionModal/>\r\n            <ButtonGroup\r\n                boardLength={boardLength}\r\n                boardOrder={boardOrder}\r\n                moveTask={moveTask}\r\n                location={task.location}\r\n                editTask={editTask}\r\n                deleteTask={deleteTask}\r\n                hideTask={hideTask}\r\n                task={task}\r\n                handleFindForEditTaskModal={handleFindForEditTaskModal}\r\n            />\r\n            <MDBBtn\r\n                disabled={index === listLength - 1}\r\n                name='down'\r\n                priority_level={task.priority_level}\r\n                location={task.location}\r\n                board={task.board}\r\n                id={id}\r\n                color='white'\r\n                className='down-button'\r\n                onClick={swapTasks}>\r\n                Down\r\n            </MDBBtn>\r\n\r\n        </MDBContainer>\r\n    )\r\n}","import React from 'react';\r\nimport TaskItem from \"./TaskItem\";\r\nimport {MDBCol, MDBContainer, MDBRow} from \"mdbreact\";\r\n\r\nexport default ({\r\n                    boards,\r\n                    moveTask,\r\n                    deleteTask,\r\n                    hideTask,\r\n                    editTask,\r\n                    swapKanbanTasks,\r\n                    showTask,\r\n                    dragTask,\r\n                    deleteBoard,\r\n                    boardMessage,\r\n                    handleFindForEditTaskModal,\r\n                    setBoardOrderState\r\n                }) => {\r\n\r\n    const dropTask = e => {\r\n        e.preventDefault();\r\n        const task_id = e.dataTransfer.getData('task');\r\n        const task = document.getElementById(task_id);\r\n        setBoardOrderState(boards.map(board => (\r\n                {\r\n                    id: board.id,\r\n                    order: board.order,\r\n                    name: board.name,\r\n                    title: board.title,\r\n                    tasks: board.tasks.map(task => ({\r\n                        id: task.id,\r\n                        visibility: true,\r\n                        task_title: task.task_title,\r\n                        location: task.location,\r\n                        task_description: task.task_description,\r\n                        task_priority: task.task_priority,\r\n                        board: task.board,\r\n                        first: task.first,\r\n                        last: task.last\r\n                    }))\r\n                }\r\n            ))\r\n        );\r\n        dragTask(e.target.getAttribute('name'), task.getAttribute('name'), task_id);\r\n    };\r\n\r\n    const dragTaskOver = e => {\r\n        e.preventDefault();\r\n    };\r\n\r\n    const handleDeleteBoard = e => {\r\n        setBoardOrderState(boards.map(board => (\r\n                {\r\n                    id: board.id,\r\n                    order: board.order,\r\n                    name: board.name\r\n                }\r\n            ))\r\n        );\r\n        deleteBoard(e);\r\n    };\r\n\r\n    const boardList = (list, order, length) => list.length\r\n        ? list.map((task, id) => task.visibility\r\n            ? <TaskItem\r\n                boardLength={length}\r\n                boardOrder={order}\r\n                moveTask={moveTask}\r\n                deleteTask={deleteTask}\r\n                hideTask={hideTask}\r\n                editTask={editTask}\r\n                listLength={list.length}\r\n                swapTasks={swapKanbanTasks}\r\n                key={id}\r\n                index={id}\r\n                id={task.id}\r\n                task={task}\r\n                handleFindForEditTaskModal={handleFindForEditTaskModal}\r\n            />\r\n            : <p className='show' key={task.id}>Hidden Task... <span id={task.id} location={task.location} name={task.board} autoFocus\r\n                                                                     onClick={showTask} className='show'>SHOW</span></p>\r\n        )\r\n        : <p style={{color: 'white', textAlign: 'center'}}><i>{boardMessage}</i></p>;\r\n\r\n    return (\r\n        <MDBContainer className=\"dashboard container-fluid\">\r\n            <MDBRow className=\"kanban-row\">\r\n                {boards.map(board => (\r\n                    <MDBCol\r\n                        key={board.id}\r\n                        onDrop={dropTask}\r\n                        name={board.name}\r\n                        onDragOver={dragTaskOver}\r\n                        className=\"kanban-col\"\r\n                        md=\"3\"\r\n                    >\r\n                        <div className='board-header container'>\r\n                            <div className='row'>\r\n\r\n                                <div className='col-10'>\r\n                                    <div className='row'>\r\n                                        <span className=\"task-list-title col-9\">{board.title}</span>\r\n                                        <span className='task-quantity col-2'>{board.tasks.length}</span>\r\n                                    </div>\r\n                                </div>\r\n                                <div className='col-2'>\r\n                                    <i\r\n                                        id={board.id}\r\n                                        onClick={handleDeleteBoard}\r\n                                        className=\"far fa-calendar-times fa-2x\"/>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        {boardList(board.tasks, board.order, boards.length)}\r\n                    </MDBCol>\r\n                ))\r\n                }\r\n            </MDBRow>\r\n        </MDBContainer>\r\n    );\r\n}","import React from 'react';\r\nimport {MDBCol, MDBContainer, MDBRow} from \"mdbreact\";\r\nimport TaskItem from \"./TaskItem\";\r\n\r\nexport default ({\r\n                    priorityTasks,\r\n                    moveTask,\r\n                    deleteTask,\r\n                    hideTask,\r\n                    editTask,\r\n                    swapPriorityTasks,\r\n                    showTask,\r\n                    boardMessage,\r\n                    handleFindForEditTaskModal\r\n                }) => {\r\n\r\n    const priorityTasksList = (list, order, length) => list.length\r\n        ? list.map((task, id) => task.visibility\r\n            ? <TaskItem\r\n                boardLength={length}\r\n                boardOrder={order}\r\n                moveTask={moveTask}\r\n                deleteTask={deleteTask}\r\n                hideTask={hideTask}\r\n                editTask={editTask}\r\n                listLength={list.length}\r\n                swapTasks={swapPriorityTasks}\r\n                key={id}\r\n                index={id}\r\n                id={task.id}\r\n                task={task}\r\n                handleFindForEditTaskModal={handleFindForEditTaskModal}\r\n            />\r\n            : <p className='show' key={task.id}>Hidden Task... <span id={task.id} priority_level={task.priority_level} name={task.board} autoFocus\r\n                                                                     onClick={showTask} className='show'>SHOW</span></p>\r\n        )\r\n        : <p style={{color: 'white', textAlign: 'center'}}><i>{boardMessage}</i></p>;\r\n    return (\r\n        <MDBContainer className=\"dashboard container-fluid\">\r\n            <MDBRow className=\"kanban-row\">\r\n                {priorityTasks.map((list, idx) => (\r\n                    <MDBCol\r\n                        key={idx}\r\n                        name={list.priority_level}\r\n                        className=\"kanban-col\"\r\n                        md=\"6\"\r\n                    >\r\n                        <div className='board-header container'>\r\n                            <div className='row'>\r\n                                <div className='col-12'>\r\n                                    <div className='row'>\r\n                                        <span className=\"task-list-title col-10\">{list.priority_level.toUpperCase()} Priority List</span>\r\n                                        <span className='task-quantity col-1'>{list.tasks.length}</span>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        {priorityTasksList(list.tasks, list.order, priorityTasks.length)}\r\n                    </MDBCol>\r\n                    ))\r\n                }\r\n            </MDBRow>\r\n        </MDBContainer>\r\n    );\r\n}\r\n","import React, {useState} from 'react';\r\nimport {MDBContainer, MDBBtn, MDBModal, MDBInput, MDBModalBody, MDBModalHeader, MDBModalFooter} from 'mdbreact';\r\nimport ErrorMessage from \"../board_modal/ErrorMessage\";\r\n\r\nexport default ({\r\n                    handleToggleEditTaskModal,\r\n                    errors: {\r\n                        taskTitleError,\r\n                        taskDescriptionError,\r\n                        firstNameError,\r\n                        lastNameError\r\n                    },\r\n                    modalButtonClick,\r\n                    validateInput,\r\n                    submitNewTaskItems,\r\n                    searchEditTask\r\n                }) => {\r\n    const [editTaskItems, setEditTaskItems] = useState({\r\n        task_title: \"\",\r\n        task_description: \"\",\r\n        task_priority: false,\r\n        first: \"\",\r\n        last: \"\"\r\n    });\r\n    const [toggleTaskPriority, setToggleTaskPriority] = useState(true);\r\n    const [changeEvent, setChangeEvent] = useState(false);\r\n\r\n    const handleTogglePriorityTaskStatus = () => setToggleTaskPriority(!toggleTaskPriority);\r\n\r\n    const handleEditTaskItemChange = e => {\r\n        if (!changeEvent) setChangeEvent(true);\r\n\r\n        if (e.target.name === \"task_priority\") {\r\n            handleTogglePriorityTaskStatus();\r\n            setEditTaskItems({\r\n                ...editTaskItems,\r\n                id: searchEditTask.id,\r\n                board: searchEditTask.board,\r\n                task_priority: e.target.checked\r\n            });\r\n        } else {\r\n            setEditTaskItems({\r\n                ...editTaskItems,\r\n                id: searchEditTask.id,\r\n                board: searchEditTask.board,\r\n                [e.target.name]: e.target.value\r\n            });\r\n        }\r\n        validateInput(e.target.value, e.target.name);\r\n    };\r\n\r\n    const handleEditTaskItemsSubmit = () => {\r\n        submitNewTaskItems(editTaskItems);\r\n        handleToggleEditTaskModal();\r\n    };\r\n\r\n    return (\r\n        <MDBContainer>\r\n            <MDBModal isOpen={modalButtonClick} toggle={handleToggleEditTaskModal}>\r\n                <MDBModalHeader toggle={handleToggleEditTaskModal}>Task Edit Form</MDBModalHeader>\r\n                <MDBModalBody>\r\n                    <MDBInput type='text'\r\n                              name='task_title'\r\n                              label=\"Edit Task Title\"\r\n                              value={editTaskItems.title}\r\n                              onChange={handleEditTaskItemChange}\r\n                    />\r\n                    {taskTitleError.errors && <ErrorMessage error={taskTitleError.errors}/>}\r\n                    <MDBContainer className='task-description'>\r\n                        <MDBInput\r\n                            value={editTaskItems.description}\r\n                            name='task_description'\r\n                            onChange={handleEditTaskItemChange}\r\n                            type=\"textarea\"\r\n                            label=\"Task Description\"\r\n                            outline\r\n                        />\r\n                    </MDBContainer>\r\n                    {taskDescriptionError.errors && <ErrorMessage error={taskDescriptionError.errors}/>}\r\n\r\n                    <div className=\"custom-control custom-checkbox\">\r\n                        <input\r\n                            name=\"task_priority\"\r\n                            checked={toggleTaskPriority}\r\n                            type=\"checkbox\"\r\n                            onChange={handleEditTaskItemChange}\r\n                            className=\"custom-control-input\"\r\n                            id=\"priority_task\"\r\n                        />\r\n                        <label className=\"custom-control-label\" htmlFor=\"priority_task\">This is Priority\r\n                            Task\r\n                        </label>\r\n                    </div>\r\n\r\n                    <MDBInput type='text' name='first' label=\"Edit Delegate First Name\"\r\n                              value={editTaskItems.first_name} onChange={handleEditTaskItemChange}/>\r\n                    {firstNameError.errors && <ErrorMessage error={firstNameError.errors}/>}\r\n                    <MDBInput type='text' name='last' label=\"Edit Delegate Last Name\"\r\n                              value={editTaskItems.last_name} onChange={handleEditTaskItemChange}/>\r\n                    {lastNameError.errors && <ErrorMessage error={lastNameError.errors}/>}\r\n                </MDBModalBody>\r\n                <MDBModalFooter>\r\n                    <MDBBtn color=\"secondary\" onClick={handleToggleEditTaskModal}>Close</MDBBtn>\r\n                    <MDBBtn\r\n                        disabled={!changeEvent || taskTitleError.inputStatus || taskDescriptionError.inputStatus || firstNameError.inputStatus || lastNameError.inputStatus}\r\n                        color=\"primary\"\r\n                        onClick={handleEditTaskItemsSubmit}\r\n                    >\r\n                        Save changes\r\n                    </MDBBtn>\r\n                </MDBModalFooter>\r\n            </MDBModal>\r\n        </MDBContainer>\r\n);\r\n}","import React from 'react';\r\nimport Loading from './LoadingComponent';\r\nimport TaskModalPage from '../task_modal/ModalPage';\r\nimport BoardModalPage from '../board_modal/ModalPage';\r\nimport LoginModalPage from '../auth/ModalPage';\r\nimport NewKanbanDashboard from './NewKanbanDashboard';\r\nimport PriorityOrderedTasks from './PriorityOrderedTasks';\r\nimport EditTaskModalPage from '../edit_modal/ModalPage';\r\nimport {MDBBtn, MDBCol, MDBContainer, MDBRow} from 'mdbreact';\r\n\r\nexport default props => {\r\n\r\n    const listProps = {\r\n        boards: props.boards,\r\n        loading: props.loading,\r\n        boardMessage: props.boardMessage,\r\n        errors: props.errors,\r\n        // userLogin: props.userLogin,\r\n        boardsSchema: props.boardsSchema,\r\n        priorityTasks: props.priorityTasks,\r\n        searchEditTask: props.searchEditTask,\r\n        modalButtonClick: props.modalButtonClick,\r\n        panelControlButtons: props.panelControlButtons\r\n    };\r\n    const eventProps = {\r\n        createBoard: props.createBoard,\r\n        createTask: props.createTask,\r\n        swapKanbanTasks: props.swapTasks.swapKanbanTasks,\r\n        swapPriorityTasks: props.swapTasks.swapPriorityTasks,\r\n        moveTask: props.moveTask,\r\n        deleteTask: props.deleteTask,\r\n        deleteBoard: props.deleteBoard,\r\n        userLoginAuth: props.userLoginAuth,\r\n        filterPriorityTasks: props.filterPriorityTasks,\r\n        hideTask: props.hideTask,\r\n        showTask: props.showTask,\r\n        dragTask: props.dragTask,\r\n        submitNewTaskItems: props.submitNewTaskItems,\r\n        validateInput: props.validateInput,\r\n        resetErrors: props.resetErrors,\r\n        toggleEditModal: props.toggleEditModal,\r\n        findTaskForEdit: props.findTaskForEdit,\r\n        resetMainKanbanView: props.resetMainKanbanView,\r\n        setBoardOrderState: props.setBoardOrderState\r\n    };\r\n\r\n    if(listProps.loading) {\r\n        return (\r\n            <MDBContainer>\r\n                <MDBRow className='kanban-header'>\r\n                    <h1>Kanban Board</h1>\r\n                </MDBRow>\r\n                <MDBRow center style={{ marginTop: 250 }}>\r\n                    <Loading\r\n                        type='spin'\r\n                        color='#32083a'\r\n                        height='50%'\r\n                        width='50%'\r\n                        delay={0}\r\n                    />\r\n                </MDBRow>\r\n            </MDBContainer>\r\n        )\r\n    }else{\r\n        return (\r\n            <div>\r\n                <MDBContainer>\r\n                    <MDBRow className='kanban-header'>\r\n                        <h1>Kanban Board</h1>\r\n                    </MDBRow>\r\n                </MDBContainer>\r\n                <EditTaskModalPage\r\n                    errors={listProps.errors}\r\n                    validateInput={eventProps.validateInput}\r\n                    modalButtonClick={listProps.modalButtonClick}\r\n                    handleToggleEditTaskModal={eventProps.toggleEditModal}\r\n                    boards={listProps.boards}\r\n                    findTaskForEdit={listProps.findTaskForEdit}\r\n                    searchEditTask={listProps.searchEditTask}\r\n                    submitNewTaskItems={eventProps.submitNewTaskItems}\r\n                />\r\n\r\n                    <MDBContainer className=\"main-control-panel\">\r\n                        {/*{listProps.userLogin &&*/}\r\n                            <MDBRow>\r\n                                <MDBCol>\r\n                                    <TaskModalPage\r\n                                        errors={listProps.errors}\r\n                                        validateInput={eventProps.validateInput}\r\n                                        createTask={eventProps.createTask}\r\n                                        resetErrors={eventProps.resetErrors}\r\n                                    />\r\n                                </MDBCol>\r\n                                <MDBCol>\r\n                                    <BoardModalPage\r\n                                        errors={listProps.errors}\r\n                                        boards={listProps.boards}\r\n                                        boardsSchema={listProps.boardsSchema}\r\n                                        validateInput={eventProps.validateInput}\r\n                                        createBoard={eventProps.createBoard}\r\n                                        deleteBoard={eventProps.deleteBoard}\r\n                                        resetErrors={eventProps.resetErrors}\r\n                                        setBoardOrderState={eventProps.setBoardOrderState}\r\n                                    />\r\n                                </MDBCol>\r\n                                <MDBCol>\r\n                                    <MDBBtn href=\"https://github.com/likejean/homework-6/issues\" className='report-issues-button' >Report Issues</MDBBtn>\r\n                                </MDBCol>\r\n                            </MDBRow>\r\n                        {/*}*/}\r\n                        <MDBRow>\r\n\r\n                            <MDBCol>\r\n                                <LoginModalPage userLoginAuth={eventProps.userLoginAuth}/>\r\n                            </MDBCol>\r\n                            <MDBCol>\r\n                                <MDBBtn\r\n                                    disabled={listProps.panelControlButtons.kanban_board}\r\n                                    onClick={eventProps.resetMainKanbanView}\r\n                                    className='task-priority-button'\r\n                                >Kanban Board\r\n                                </MDBBtn>\r\n                            </MDBCol>\r\n                            <MDBCol>\r\n                                <MDBBtn\r\n                                    disabled={listProps.panelControlButtons.priority_board}\r\n                                    onClick={eventProps.filterPriorityTasks}\r\n                                    className='task-priority-button'\r\n                                >Priority Tasks\r\n                                </MDBBtn>\r\n                            </MDBCol>\r\n                        </MDBRow>\r\n\r\n                    </MDBContainer>\r\n\r\n                {\r\n                    listProps.panelControlButtons.kanban_board && !listProps.panelControlButtons.priority_board\r\n                        ?\r\n                        <NewKanbanDashboard\r\n                            boardMessage={listProps.boardMessage}\r\n                            handleFindForEditTaskModal={eventProps.findTaskForEdit}\r\n                            {...listProps}\r\n                            {...eventProps}\r\n                        />\r\n                        :\r\n                        <PriorityOrderedTasks\r\n                            boardMessage={listProps.boardMessage}\r\n                            handleFindForEditTaskModal={eventProps.findTaskForEdit}\r\n                            {...listProps}\r\n                            {...eventProps}\r\n                        />\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}","export default (obj) => {\r\n\r\n    // null and undefined are \"empty\"\r\n    if (obj == null) return true;\r\n\r\n    // Assume if it has a length property with a non-zero value\r\n    // that that property is correct.\r\n    if (obj.length > 0)    return false;\r\n    if (obj.length === 0)  return true;\r\n\r\n    // If it isn't an object at this point\r\n    // it is empty, but it can't be anything *but* empty\r\n    // Is it empty?  Depends on your application.\r\n    if (typeof obj !== \"object\") return true;\r\n\r\n    // Otherwise, does it have any properties of its own?\r\n    // Note that this doesn't handle\r\n    // toString and valueOf enumeration bugs in IE < 9\r\n    for (var key in obj) {\r\n        if (hasOwnProperty.call(obj, key)) return false;\r\n    }\r\n\r\n    return true;\r\n}","export default (arr, a, b) => {\r\n    let temp = arr[a];\r\n    arr[a] = arr[b];\r\n    arr[b] = temp;\r\n    return arr;\r\n}","export default (name, value, length) => {\r\n    const titleFormat = /^[0-9A-Za-z\\s]+$/;\r\n    const personNameFormat = /^[a-zA-Z]+$/;\r\n    switch (name) {\r\n        case 'board_order':\r\n            return {\r\n                errors:\r\n                    isNaN(value) || value === \"\"\r\n                        ? 'Input must be an INTEGER!'\r\n                        : parseInt(value) <= 0\r\n                        ? 'Must be greater than zero!'\r\n                        : parseInt(value) > length + 1\r\n                            ? `Must be less or equal ${length + 1}!`\r\n                            : '',\r\n                inputStatus:\r\n                    isNaN(value) || value === \"\" || parseInt(value) <= 0 || parseInt(value) > length + 1\r\n            };\r\n        case 'board_title':\r\n            return {\r\n                errors:\r\n                    !value.match(titleFormat)\r\n                        ? 'Please, input alphanumeric characters only!'\r\n                        : value.length > 10\r\n                            ? 'This title is too long'\r\n                            : '',\r\n                inputStatus:\r\n                    !value.match(titleFormat) || value.length > 10\r\n            };\r\n        case 'task_title':\r\n            return {\r\n                errors:\r\n                    !value.match(titleFormat)\r\n                        ? 'Please, input alphanumeric characters only!'\r\n                        : value.length > 13\r\n                        ? 'This title is too long'\r\n                        : '',\r\n                inputStatus:\r\n                    !value.match(titleFormat) || value.length > 13\r\n            };\r\n        case 'task_description':\r\n            return {\r\n                errors:\r\n                    value.length >= 100\r\n                        ? 'Description must be less than 100 characters'\r\n                        : '',\r\n                inputStatus:\r\n                    value.length >= 100\r\n            };\r\n        case 'first':\r\n            return {\r\n                errors:\r\n                    !value.match(personNameFormat)\r\n                        ? 'Please, input alphabetical characters only!'\r\n                        : value.length < 3\r\n                        ? 'First name is too short'\r\n                        : '',\r\n                inputStatus:\r\n                    !value.match(personNameFormat) || value.length < 3\r\n            };\r\n        case 'last':\r\n            return {\r\n                errors:\r\n                    !value.match(personNameFormat)\r\n                        ? 'Please, input alphabetical characters only!'\r\n                        : value.length < 3\r\n                        ? 'Last name is too short'\r\n                        : '',\r\n                inputStatus:\r\n                    !value.match(personNameFormat) || value.length < 3\r\n            };\r\n        default:\r\n            return {\r\n                errors : '',\r\n                inputStatus: false\r\n            }\r\n    }\r\n}\r\n","import React, {useState, useEffect, useRef} from 'react';\r\nimport Main from './components/main';\r\nimport '@fortawesome/fontawesome-free/css/all.min.css';\r\nimport 'bootstrap-css-only/css/bootstrap.min.css';\r\nimport 'mdbreact/dist/css/mdb.css';\r\nimport uuid from 'react-uuid';\r\nimport './App.css';\r\nimport isEmpty from './helpers/EmptyObject';\r\nimport SwapArrayElements from \"./helpers/SwapArrayElements\";\r\nimport ValidateUserInput from \"./helpers/ValidateUserInputChange\";\r\n\r\n\r\nconst initialPriorityTaskList = [\r\n    {\r\n        priority_level: 'high',\r\n        id: uuid(),\r\n        tasks: []\r\n    },\r\n    {\r\n        priority_level: 'low',\r\n        id: uuid(),\r\n        tasks: []\r\n    }\r\n]\r\n\r\nconst initialErrors = {\r\n    boardTitleError: {\r\n        errors: '',\r\n        inputStatus: false\r\n    },\r\n    taskTitleError: {\r\n        errors: '',\r\n        inputStatus: false\r\n    },\r\n    boardOrderError: {\r\n        errors: '',\r\n        inputStatus: false\r\n    },\r\n    taskDescriptionError: {\r\n        errors: '',\r\n        inputStatus: false\r\n    },\r\n    firstNameError: {\r\n        errors: '',\r\n        inputStatus: false\r\n    },\r\n    lastNameError: {\r\n        errors: '',\r\n        inputStatus: false\r\n    }\r\n}\r\n\r\nconst URI_local = 'http://localhost:8080';\r\nconst URI_heroku = 'https://rest-api-server-kanban.herokuapp.com';\r\n\r\nfunction KanbanBoard() {\r\n\r\n    const [note, setNote] = useState(\"\");\r\n    const [loading, setLoading] = useState(true);\r\n    const [boards, setBoards] = useState([]);\r\n    //const [userLogin, setUserLogin] = useState(false);\r\n    const [inputErrors, setInputErrors] = useState(initialErrors);\r\n    const [boardsSchema, setBoardsSchema] = useState([]);\r\n    const [priorityTasks, setPriorityTasks] = useState(initialPriorityTaskList);\r\n    const [editModalButtonClick, setEditModalButtonClick] = useState(false);\r\n    const [searchEditTask, setSearchEditTask] = useState({});\r\n    const [panelControlButtons, setPanelControlButtons] = useState({\r\n        kanban_board: true,\r\n        priority_board: false\r\n    });\r\n\r\n    //Pull the latest board order from the child component...\r\n    const boardsRef = useRef();\r\n    const setBoardOrderState = data => {\r\n        boardsRef.current = data;\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        async function getData() {\r\n            const res = await fetch(\r\n                `${URI_heroku}/boards`);\r\n            res.json()\r\n                .then(data => {\r\n                    setBoards(data.boards.map(board => (\r\n                            {\r\n                                id: board._id,\r\n                                order: board.order,\r\n                                name: board.name,\r\n                                title: board.title,\r\n                                tasks: board.tasks.map(task => ({\r\n                                    id: task._id,\r\n                                    visibility: true,\r\n                                    task_title: task.title,\r\n                                    location: task.location,\r\n                                    task_description: task.description,\r\n                                    task_priority: task.priority,\r\n                                    board: task.board,\r\n                                    first: task.first,\r\n                                    last: task.last\r\n                                }))\r\n                            }\r\n                        ))\r\n                    );\r\n                    setLoading(false);\r\n                    setBoards(boards => boards.sort((a, b) => a.order - b.order));\r\n                    setBoardsSchema([...Array(data.boards.length).keys()]);\r\n\r\n\r\n                })\r\n                .catch(err => console.log(err));\r\n        };\r\n\r\n        getData()\r\n            .then(() => console.log('Successfully rendered!'))\r\n            .catch(() => console.log('Rendering failed'));\r\n\r\n        // let store = JSON.parse(localStorage.getItem('login'));\r\n        // if(store && store.login) {\r\n        //     setUserLogin(true);\r\n        // }\r\n    }, []);\r\n\r\n\r\n    const handleUserLoginAuth = credentials => {\r\n        console.log(credentials);\r\n        fetch(`${URI_heroku}/users/login`,\r\n            {\r\n                method: 'POST',\r\n                headers: {'Content-Type': 'application/json'},\r\n                body: JSON.stringify(credentials)\r\n            })\r\n            .then(response =>\r\n            response.json().then(result => {\r\n                console.warn('result', result);\r\n                // localStorage.setItem('login', JSON.stringify({\r\n                //     login: true,\r\n                //     token: result.token\r\n                // }));\r\n                // let store = JSON.parse(localStorage.getItem('login'));\r\n                // if(store && store.login) {\r\n                //     setUserLogin(true);\r\n                // }\r\n            }))\r\n            .catch(() => console.log('error occurred'))\r\n    };\r\n\r\n    const handleFindForEditTaskModal = e => {\r\n        const name = e.target.getAttribute('name');\r\n        const id = e.target.id;\r\n        if (id) setSearchEditTask(boards.find(board => board.name === name).tasks.find(task => task.id === id));\r\n        setEditModalButtonClick(!editModalButtonClick);\r\n    }\r\n\r\n    const handleToggleEditTaskModal = () => setEditModalButtonClick(!editModalButtonClick);\r\n\r\n    const handleCreateNewBoard2 = board => {\r\n        const index = board.order - 1;\r\n\r\n        if (!isEmpty(board)) {\r\n            // setBoards(boards => [\r\n            //     ...boards.slice(0, index),\r\n            //     Object.assign({},\r\n            //         {\r\n            //             ...board,\r\n            //             id: uuid(),\r\n            //             name: board.title.toLowerCase(),\r\n            //             tasks: []\r\n            //         }),\r\n            //     ...boards.slice(index)\r\n            // ]);\r\n            // setBoards(boards => boards.map((board, id) => ({...board, order: id})));\r\n            // setBoardOrder([\r\n            //     ...boardOrder.slice(0, index),\r\n            //     Object.assign({},\r\n            //         {\r\n            //             id: '',\r\n            //             order: index\r\n            //         }),\r\n            //     ...boardOrder.slice(index)\r\n            // ]);\r\n\r\n            fetch(`${URI_heroku}/boards`, {\r\n                method: 'POST',\r\n                headers: {'Content-Type': 'application/json'},\r\n                body: JSON.stringify({\r\n                    ...board,\r\n                    order: index,\r\n                    name: board.title.toLowerCase()\r\n                })\r\n            })\r\n                .then(response => response.json())\r\n                .then(data => {\r\n                    const board = data.createdBoard;\r\n                    console.log(board);\r\n                    setBoards(boards => [\r\n                        ...boards.slice(0, index),\r\n                        Object.assign({},\r\n                            {\r\n                                ...board,\r\n                                order: index\r\n                            }),\r\n                        ...boards.slice(index)\r\n                    ]);\r\n                    setBoards(boards => boards.map((board, id) =>\r\n                        board.order <= id ?\r\n                            {\r\n                                ...board,\r\n                                order: id\r\n                            }\r\n                            :\r\n                            {\r\n                                ...board,\r\n                                order: id + 1\r\n                            }\r\n                    ));\r\n                    setBoardsSchema(boardsSchema => [...boardsSchema].concat(boardsSchema.length));\r\n\r\n                    return [\r\n                        ...boardsRef.current.slice(0, index),\r\n                        Object.assign({},\r\n                            {\r\n                                id: board.id,\r\n                                order: board.order,\r\n                                name: board.name\r\n                            }),\r\n                        ...boardsRef.current.slice(index)\r\n                    ].map((board, id) =>\r\n                        board.order <= id ?\r\n                            {\r\n                                ...board,\r\n                                order: id\r\n                            }\r\n                            :\r\n                            {\r\n                                ...board,\r\n                                order: id + 1\r\n                            }\r\n                    );\r\n                })\r\n                .then(data => {\r\n                    console.log('hey!');\r\n                    console.log('response', data);\r\n                    fetch(`${URI_heroku}/boards`, {\r\n                        method: 'PATCH',\r\n                        headers: {'Content-Type': 'application/json'},\r\n                        body: JSON.stringify(data)\r\n                    })\r\n                        .then(response => console.log(response))\r\n                        .catch(err => {\r\n                            console.log(err)\r\n                        })\r\n                })\r\n                .catch(err => {\r\n                    console.log(err);\r\n                });\r\n        };\r\n    };\r\n\r\n\r\n    const handleValidateUserInput2 = (input, name) => {\r\n        if (name === 'board_order') setInputErrors(inputErrors => ({\r\n            ...inputErrors,\r\n            boardOrderError: ValidateUserInput(name, input, boards.length)\r\n        }));\r\n        if (name === 'board_title') setInputErrors(inputErrors => ({\r\n            ...inputErrors,\r\n            boardTitleError: ValidateUserInput(name, input, boards.length)\r\n        }));\r\n        if (name === 'task_title') setInputErrors(inputErrors => ({\r\n            ...inputErrors,\r\n            taskTitleError: ValidateUserInput(name, input, boards.length)\r\n        }));\r\n        if (name === 'task_description') setInputErrors(inputErrors => ({\r\n            ...inputErrors,\r\n            taskDescriptionError: ValidateUserInput(name, input, boards.length)\r\n        }));\r\n        if (name === 'first') setInputErrors(inputErrors => ({\r\n            ...inputErrors,\r\n            firstNameError: ValidateUserInput(name, input, boards.length)\r\n        }));\r\n        if (name === 'last') setInputErrors(inputErrors => ({\r\n            ...inputErrors,\r\n            lastNameError: ValidateUserInput(name, input, boards.length)\r\n        }));\r\n    };\r\n\r\n    const handleGeneratePriorityTasksList2 = () => {\r\n        setPriorityTasks(initialPriorityTaskList);\r\n        boards.map((board) => (\r\n                board.tasks.forEach(task => {\r\n                    if (task.task_priority) return setPriorityTasks(priorityTasks =>\r\n                        priorityTasks.map(list => list.priority_level === 'high'\r\n                            ?\r\n                            {\r\n                                ...list,\r\n                                tasks: list.tasks.concat({\r\n                                    ...task,\r\n                                    location: 'priority_list',\r\n                                    priority_level: 'high'\r\n                                })\r\n                            }\r\n                            :\r\n                            list\r\n                        ));\r\n                    else return setPriorityTasks(priorityTasks =>\r\n                        priorityTasks.map(list => list.priority_level === 'low'\r\n                            ?\r\n                            {\r\n                                ...list,\r\n                                tasks: list.tasks.concat({\r\n                                    ...task,\r\n                                    location: 'priority_list',\r\n                                    priority_level: 'low'\r\n                                })\r\n                            }\r\n                            :\r\n                            list\r\n                        ));\r\n                })\r\n            )\r\n        );\r\n        setPanelControlButtons({\r\n                kanban_board: false,\r\n                priority_board: true\r\n            }\r\n        );\r\n    };\r\n\r\n    const handleResetMainKanbanView = () => setPanelControlButtons({\r\n            kanban_board: true,\r\n            priority_board: false\r\n        }\r\n    );\r\n\r\n    const handleResetAllErrors2 = () => setInputErrors(initialErrors);\r\n\r\n    const handleSubmitNewTaskItems2 = revised_task => {\r\n        fetch(`${URI_heroku}/tasks/${revised_task.id}`, {\r\n            method: 'PATCH',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify(revised_task)\r\n        })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                console.log(data);\r\n                const new_task = data.updatedTask;\r\n                console.log('task', new_task)\r\n                setBoards(boards => boards.map(board =>\r\n                    board.name === new_task.board\r\n                        ?\r\n                        {\r\n                            ...board,\r\n                            tasks: board.tasks.map(old_task =>\r\n                                old_task.id === new_task.id\r\n                                    ?\r\n                                    {\r\n                                        ...old_task,\r\n                                        ...new_task\r\n                                    }\r\n                                    :\r\n                                    old_task\r\n                            )\r\n                        }\r\n                        :\r\n                        board\r\n                ));\r\n            }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    };\r\n\r\n    const handleDeleteBoard2 = e => {\r\n        const data = boardsRef.current\r\n            .filter(board => board.id !== e.target.id)\r\n            .map((board, id) => ({...board, order: id}));\r\n        console.log(data);\r\n        fetch(`${URI_heroku}/boards/${e.target.id}`, {\r\n            method: 'DELETE',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify(data)\r\n        })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                console.log(data);\r\n                const {id} = data.deletedBoard;\r\n                setBoards(boards => boards.filter(board => board.id !== id));\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n        setBoards(boards => boards.map((board, id) => ({...board, order: id})));\r\n        setBoardsSchema(boardsSchema => [...boardsSchema].filter(elem => elem !== boards.length - 1));\r\n\r\n    };\r\n\r\n    const handleCreateNewTask2 = task => {\r\n        if (isEmpty(task) !== true) {\r\n            fetch(`${URI_heroku}/tasks`, {\r\n                method: 'POST',\r\n                headers: {'Content-Type': 'application/json'},\r\n                body: JSON.stringify({...task, board: 'todo'})\r\n            })\r\n                .then(response => response.json())\r\n                .then(data => {\r\n                    const task = data.createdTask;\r\n                    setBoards(boards => boards.map(board =>\r\n                        board.name === task.board\r\n                            ?\r\n                            {\r\n                                ...board,\r\n                                tasks: board.tasks.concat(\r\n                                    {\r\n                                        id: task._id,\r\n                                        visibility: true,\r\n                                        task_title: task.title,\r\n                                        location: task.location,\r\n                                        task_description: task.description,\r\n                                        task_priority: task.priority,\r\n                                        board: task.board,\r\n                                        first: task.first,\r\n                                        last: task.last\r\n                                    }\r\n                                )\r\n                            }\r\n                            :\r\n                            board\r\n                    ));\r\n                })\r\n                .catch(err => {\r\n                    console.log(err);\r\n                });\r\n        } else setNote('This list is empty');\r\n    };\r\n\r\n    const handleSwapTasksWithinKanbanBoard2 = e => {\r\n        const task_id = e.target.id;\r\n        const direction = e.target.getAttribute('name');\r\n        const board_name = e.target.getAttribute('board');\r\n\r\n        setBoards(boards => [...boards].map(board => {\r\n            if (board.name === board_name) {\r\n                const index1 = board.tasks.findIndex(task => task.id === task_id);\r\n                const tasks = direction === 'up'\r\n                    ? SwapArrayElements(board.tasks, index1, index1 - 1)\r\n                    : SwapArrayElements(board.tasks, index1, index1 + 1)\r\n                return {...board, tasks}\r\n            } else {\r\n                return board;\r\n            }\r\n        }));\r\n    };\r\n\r\n    const handleSwapTasksWithinPriorityList2 = e => {\r\n        const task_id = e.target.id;\r\n        const direction = e.target.getAttribute('name');\r\n        const list_priority_level = e.target.getAttribute('priority_level');\r\n\r\n        setPriorityTasks(priorityTasks => [...priorityTasks].map(list => {\r\n            if (list.priority_level === list_priority_level) {\r\n                const index1 = list.tasks.findIndex(task => task.id === task_id);\r\n                const tasks = direction === 'up'\r\n                    ? SwapArrayElements(list.tasks, index1, index1 - 1)\r\n                    : SwapArrayElements(list.tasks, index1, index1 + 1)\r\n                return {...list, tasks}\r\n            } else {\r\n                return list;\r\n            }\r\n        }));\r\n    };\r\n\r\n\r\n    const handleMoveTaskBetweenBoards2 = e => {\r\n        const id = e.target.getAttribute('id');\r\n        const direction = e.target.getAttribute('direction');\r\n        const boardOrder = e.target.getAttribute('order');\r\n        const location = e.target.getAttribute('location');\r\n        const task_priority = e.target.getAttribute('task_priority');\r\n\r\n        let isTrueSet = (task_priority === 'true');\r\n        let movingTask;\r\n        location === 'kanban_board'\r\n            ?\r\n            movingTask = boards.find(board => board.order === parseInt(boardOrder)).tasks.find(task => task.id === id)\r\n            :\r\n            movingTask = priorityTasks.find(list => list.order === parseInt(boardOrder)).tasks.find(task => task.id === id);\r\n\r\n        ///remove a task....\r\n\r\n        location === 'kanban_board'\r\n            ?\r\n            setBoards(boards => boards.map(board =>\r\n                    board.order === parseInt(boardOrder)\r\n                        ?\r\n                        {\r\n                            ...board,\r\n                            tasks: board.tasks.filter(task => task.id !== id)\r\n                        }\r\n                        :\r\n                        board\r\n                )\r\n            )\r\n            :\r\n            setPriorityTasks(priorityTasks => priorityTasks.map(list =>\r\n                    list.order === parseInt(boardOrder)\r\n                        ?\r\n                        {\r\n                            ...list,\r\n                            tasks: list.tasks.filter(task => task.id !== id)\r\n                        }\r\n                        :\r\n                        list\r\n                )\r\n            );\r\n        ////Add a task......\r\n\r\n        location === 'kanban_board'\r\n            ?\r\n            direction === 'right'\r\n                ?\r\n                setBoards(boards => boards.map(board =>\r\n                        board.order === parseInt(boardOrder) + 1\r\n                            ?\r\n                            {\r\n                                ...board,\r\n                                tasks: board.tasks.concat({...movingTask, board: board.name})\r\n                            }\r\n                            : board\r\n                    )\r\n                )\r\n                :\r\n                setBoards(boards => boards.map(board =>\r\n                        board.order === parseInt(boardOrder) - 1\r\n                            ?\r\n                            {\r\n                                ...board,\r\n                                tasks: board.tasks.concat({...movingTask, board: board.name})\r\n                            }\r\n                            : board\r\n                    )\r\n                )\r\n            :\r\n            direction === 'right'\r\n                ?\r\n                setPriorityTasks(priorityList => priorityList.map(list =>\r\n                        list.order === parseInt(boardOrder) + 1\r\n                            ?\r\n                            {\r\n                                ...list,\r\n                                tasks: list.tasks.concat({\r\n                                    ...movingTask,\r\n                                    priority_level: list.priority_level,\r\n                                    task_priority: false\r\n                                })\r\n                            }\r\n                            : list\r\n                    )\r\n                )\r\n                :\r\n                setPriorityTasks(priorityList => priorityList.map(list =>\r\n                        list.order === parseInt(boardOrder) - 1\r\n                            ?\r\n                            {\r\n                                ...list,\r\n                                tasks: list.tasks.concat({\r\n                                    ...movingTask,\r\n                                    priority_level: list.priority_level,\r\n                                    task_priority: true\r\n                                })\r\n                            }\r\n                            : list\r\n                    )\r\n                );\r\n        if (movingTask.location === 'priority_list')\r\n            setBoards(boards => [...boards].map(board =>\r\n                board.name === movingTask.board\r\n                    ?\r\n                    {\r\n                        ...board,\r\n                        tasks: board.tasks.map(task =>\r\n                            task.id === movingTask.id\r\n                                ?\r\n                                {\r\n                                    ...task,\r\n                                    task_priority: !isTrueSet\r\n                                }\r\n                                :\r\n                                task\r\n                        )\r\n                    }\r\n                    : board\r\n            ));\r\n        fetch(`${URI_heroku}/boards/${id}`, {\r\n            method: 'PATCH',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({\r\n                moveOutBoard: +boardOrder,\r\n                moveInBoard: direction === 'left' ? +boardOrder - 1 : +boardOrder + 1\r\n            })\r\n        })\r\n            .then(response => console.log(response))\r\n            .catch(err => console.log(err));\r\n    };\r\n\r\n    const handleDragAndDrop2 = (board_name, task_name, id) => {\r\n        const dragTask = boardsRef.current.find(board => board.name === task_name).tasks.find(task => task.id === id);\r\n\r\n        setBoards(boards => boards.map(board =>\r\n                board.name === task_name && board_name !== null\r\n                    ?\r\n                    {\r\n                        ...board,\r\n                        tasks: board.tasks.filter(task => task.id !== id)\r\n                    }\r\n                    :\r\n                    board\r\n            )\r\n        );\r\n        setBoards(boards => boards.map(board =>\r\n                board.name === board_name\r\n                    ?\r\n                    {\r\n                        ...board,\r\n                        tasks: board.tasks.concat({...dragTask, board: board.name})\r\n                    }\r\n                    : board\r\n            )\r\n        );\r\n\r\n        fetch(`${URI_heroku}/boards/${id}`, {\r\n            method: 'PATCH',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({\r\n                moveOutBoard: +boardsRef.current.find(board => board.name === task_name).order,\r\n                moveInBoard: +boardsRef.current.find(board => board.name === board_name).order\r\n            })\r\n        })\r\n            .then(response => console.log(response))\r\n            .catch(err => console.log(err));\r\n\r\n    };\r\n\r\n    const handleDeleteTaskItem2 = e => {\r\n        fetch(`${URI_heroku}/tasks/${e.target.id}`, {\r\n            method: 'DELETE',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({\r\n                id: e.target.id,\r\n                board: e.target.getAttribute('name')\r\n            })\r\n        })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                const {deletedTask: {id, board_name}} = data;\r\n                setBoards(boards => boards.map(board =>\r\n                    board.name === board_name\r\n                        ?\r\n                        {\r\n                            ...board,\r\n                            tasks: board.tasks.filter(task => task.id !== id)\r\n                        }\r\n                        :\r\n                        board\r\n                ));\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n        if (priorityTasks.length > 0) setPriorityTasks(priorityTasks.filter(task => task.id !== e.target.id));\r\n    };\r\n\r\n    const handleShowTaskItem2 = e => {\r\n        let visible;\r\n        const id = e.target.getAttribute('id');\r\n        const name = e.target.getAttribute('name');\r\n        const className = e.target.getAttribute('class').split(\" \")[0];\r\n        const location = e.target.getAttribute('location');\r\n        const priority_level = e.target.getAttribute('priority_level');\r\n        className === 'show' ? visible = true : visible = false;\r\n        location === 'kanban_board'\r\n            ?\r\n            setBoards(boards => boards.map(board =>\r\n                    board.name === name\r\n                        ?\r\n                        {\r\n                            ...board,\r\n                            tasks: board.tasks.map(task => task.id === id\r\n                                ?\r\n                                {\r\n                                    ...task,\r\n                                    visibility: visible\r\n                                }\r\n                                :\r\n                                task\r\n                            )\r\n                        }\r\n                        :\r\n                        board\r\n                )\r\n            )\r\n            :\r\n            setPriorityTasks(priorityTasks => priorityTasks.map(list =>\r\n                    list.priority_level === priority_level\r\n                        ?\r\n                        {\r\n                            ...list,\r\n                            tasks: list.tasks.map(task => task.id === id\r\n                                ?\r\n                                {\r\n                                    ...task,\r\n                                    visibility: visible\r\n                                }\r\n                                :\r\n                                task\r\n                            )\r\n                        }\r\n                        :\r\n                        list\r\n                )\r\n            )\r\n    };\r\n\r\n/////////////////////////////////////////////////////////////////\r\n////////////////////////////////////////////////////////////////////\r\n\r\n\r\n    const handleEventProps = {\r\n        createBoard: handleCreateNewBoard2,\r\n        createTask: handleCreateNewTask2,\r\n        moveTask: handleMoveTaskBetweenBoards2,\r\n        dragTask: handleDragAndDrop2,\r\n        deleteTask: handleDeleteTaskItem2,\r\n        hideTask: handleShowTaskItem2,\r\n        showTask: handleShowTaskItem2,\r\n        submitNewTaskItems: handleSubmitNewTaskItems2,\r\n        deleteBoard: handleDeleteBoard2,\r\n        validateInput: handleValidateUserInput2,\r\n        resetErrors: handleResetAllErrors2,\r\n        setBoardOrderState: setBoardOrderState,\r\n        userLoginAuth: handleUserLoginAuth,\r\n        swapTasks: {\r\n            swapKanbanTasks: handleSwapTasksWithinKanbanBoard2,\r\n            swapPriorityTasks: handleSwapTasksWithinPriorityList2\r\n        },\r\n        swapPriorityTasks: handleSwapTasksWithinPriorityList2,\r\n        filterPriorityTasks: handleGeneratePriorityTasksList2,\r\n        toggleEditModal: handleToggleEditTaskModal,\r\n        findTaskForEdit: handleFindForEditTaskModal,\r\n        resetMainKanbanView: handleResetMainKanbanView\r\n\r\n    };\r\n\r\n    const handleStateProps = {\r\n        // userLogin: userLogin,\r\n        boards: boards,\r\n        loading: loading,\r\n        priorityTasks: priorityTasks,\r\n        boardMessage: note,\r\n        errors: inputErrors,\r\n        boardsSchema: boardsSchema,\r\n        searchEditTask: searchEditTask,\r\n        modalButtonClick: editModalButtonClick,\r\n        panelControlButtons: panelControlButtons\r\n    };\r\n\r\n    return <Main {...handleEventProps} {...handleStateProps} />\r\n\r\n}\r\n\r\nexport default KanbanBoard;","import React from 'react';\nimport KanbanBoard from './KanbanBoard';\n\nexport default () => {\n    return (\n        <div className='container'>\n            <KanbanBoard/>\n        </div>\n    )\n};\n","import { transitions, positions } from 'react-alert';\r\n\r\nexport const options = {\r\n    position: positions.TOP_CENTER,\r\n    timeout: 5000,\r\n    offset: '20px',\r\n    containerStyle: {\r\n        zIndex: 9999,\r\n    },\r\n    transition: transitions.SCALE\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider as AlertProvider} from 'react-alert';\nimport App from './App';\nimport {options} from './helpers/AlertOptions';\nimport AlertTemplate from 'react-alert-template-basic';\n\nReactDOM.render(\n        <AlertProvider template={AlertTemplate} {...options}>\n            <App/>\n        </AlertProvider>,\n    document.getElementById('root'));\n\n"],"sourceRoot":""}