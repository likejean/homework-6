{"version":3,"sources":["components/main/LoadingComponent.js","components/task_modal/InputForm.js","components/task_modal/DescriptionTaskInput.js","components/board_modal/ErrorMessage.js","helpers/ValidateUserBlankInput.js","components/task_modal/ToggleSwitchPriority.js","components/task_modal/ModalPage.js","components/board_modal/OrderInput.js","components/board_modal/InsertionBoardSchema.js","components/board_modal/ModalPage.js","components/auth/LoginForm.js","components/auth/ModalPage.js","components/main/ButtonGroup.js","components/main/TaskItem.js","components/main/NewKanbanDashboard.js","components/main/PriorityOrderedTasks.js","components/edit_modal/ModalPage.js","components/main/ServerNotifications.js","components/main/index.js","helpers/EmptyObject.js","helpers/SwapArrayElements.js","helpers/ValidateUserInputChange.js","KanbanBoard.js","App.js","helpers/AlertOptions.js","index.js"],"names":["type","color","delay","height","width","handleDelegateNameChange","fullname","style","marginBottom","prepend","inputs","noTag","name","value","first","onChange","e","target","getAttribute","last","description","descriptionInputChange","className","label","outline","error","arr","some","input","SwitchButton","props","state","checked","handleChange","bind","this","setState","switchPriority","md","marginLeft","fontSize","Component","createTask","resetErrors","validateInput","errors","taskTitleError","taskDescriptionError","firstNameError","lastNameError","useState","modalButtonClick","setModalButtonClick","taskTitle","setTaskTitle","taskDescription","setTaskDescription","highTaskPriority","setHighTaskPriority","delegateName","setDelegateName","createNewTask","setCreateNewTask","alert","useAlert","stableDispatch","useCallback","useEffect","handleToggleModal","onClick","zIndex","isOpen","toggle","size","ErrorMessage","DescriptionTaskInput","id","task_priority","InputForm","attribute","disabled","inputStatus","ValidateUserBlankInput","timeout","onOpen","console","log","onClose","task_title","location","task_description","boardOrderChange","order","newBoardPlaceOrder","boardsSchema","isNaN","marginRight","map","block","idx","key","setBoardOrderState","createBoard","boards","boardOrderError","boardTitleError","boardTitle","setBoardTitle","boardOrder","setBoardOrder","createNewBoard","setCreateNewBoard","setNewBoardPlaceOrder","InsertionBoardSchema","OrderInput","title","board","userLoginAuth","email","password","userLoginCredentials","setUserLoginCredentials","handleUserLoginInputs","center","htmlFor","LoginForm","task","priority_level","login","handleFindForEditTaskModal","boardLength","moveTask","deleteTask","hideTask","boolStr","direction","aria-hidden","index","listLength","swapTasks","editTask","toggleModal","setToggleModal","DescriptionModal","handleToggleDescriptionModal","draggable","onDragStart","dataTransfer","setData","onDragOver","stopPropagation","display","justifyContent","onMouseOver","document","getElementById","querySelector","innerHTML","onMouseLeave","ButtonGroup","swapKanbanTasks","showTask","userLogin","dragTask","deleteBoard","boardMessage","dropTask","preventDefault","task_id","getData","tasks","visibility","dragTaskOver","handleDeleteBoard","onDrop","length","list","TaskItem","autoFocus","textAlign","priorityTasks","swapPriorityTasks","toUpperCase","priorityTasksList","handleToggleEditTaskModal","submitNewTaskItems","searchEditTask","editTaskItems","setEditTaskItems","toggleTaskPriority","setToggleTaskPriority","changeEvent","setChangeEvent","handleEditTaskItemChange","first_name","last_name","serverNote","resetServerNotes","autohide","bodyClassName","closeClassName","fade","icon","iconClassName","message","show","titleClassName","listProps","loading","panelControlButtons","eventProps","filterPriorityTasks","toggleEditModal","findTaskForEdit","resetMainKanbanView","marginTop","href","kanban_board","priority_board","ServerNotifications","NewKanbanDashboard","PriorityOrderedTasks","obj","hasOwnProperty","call","a","b","temp","titleFormat","personNameFormat","parseInt","match","initialPriorityTaskList","uuid","initialErrors","URI_heroku","KanbanBoard","note","setNote","setLoading","setBoards","setUserLogin","inputErrors","setInputErrors","setBoardsSchema","setPriorityTasks","editModalButtonClick","setEditModalButtonClick","setSearchEditTask","setPanelControlButtons","serverResponseNote","setServerResponseNote","boardsRef","useRef","fetch","json","then","data","_id","priority","sort","Array","keys","catch","err","store","JSON","parse","localStorage","getItem","token","jwt","decode","now","Date","expiryDate","getTime","isExpired","clear","handleSwapTasksWithinPriorityList2","list_priority_level","index1","findIndex","SwapArrayElements","handleShowTaskItem2","visible","split","handleEventProps","isEmpty","bearer","method","headers","body","stringify","toLowerCase","response","result","createdBoard","slice","Object","assign","concat","current","Error","createdTask","movingTask","isTrueSet","find","filter","priorityList","moveOutBoard","moveInBoard","board_name","task_name","deletedTask","revised_task","new_task","updatedTask","old_task","deletedBoard","elem","ValidateUserInput","credentials","warn","setItem","birthDate","tokenLife","exp","forEach","handleStateProps","options","position","positions","TOP_CENTER","offset","containerStyle","transition","transitions","SCALE","ReactDOM","render","template","AlertTemplate"],"mappings":"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","file":"static/js/main.890f92c4.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactLoading from 'react-loading';\r\n\r\nexport default ({ type, color, delay, height, width }) => (\r\n    <ReactLoading\r\n        type={type}\r\n        color={color}\r\n        delay={delay}\r\n        height={height}\r\n        width={width}\r\n    />\r\n);\r\n","import React from \"react\";\r\nimport { MDBInputGroup, MDBInput } from \"mdbreact\";\r\nexport default ( { handleDelegateNameChange, fullname } ) => {\r\n\r\n    const handleFirstNameInputChange = e => handleDelegateNameChange(e.target.getAttribute('name'), e.target.value);\r\n    const handleLastNameInputChange  = e => handleDelegateNameChange(e.target.getAttribute('name'), e.target.value);\r\n\r\n    return (\r\n        <MDBInputGroup style={{ marginBottom: 10 }}\r\n            prepend=\"Delegated to: \"\r\n            inputs={\r\n                <>\r\n                    <MDBInput noTag name=\"first\" value={fullname.first} onChange={handleFirstNameInputChange} type=\"text\" />\r\n                    <MDBInput noTag name=\"last\" value={fullname.last} onChange={handleLastNameInputChange} type=\"text\" />\r\n                </>\r\n            }\r\n        />\r\n    );\r\n}","import React from 'react';\r\nimport { MDBInput, MDBContainer } from 'mdbreact';\r\n\r\nexport default ({ description, descriptionInputChange }) =>\r\n    <MDBContainer className='task-description'>\r\n        <MDBInput\r\n            value={description}\r\n            name='task_description'\r\n            onChange={descriptionInputChange}\r\n            type=\"textarea\"\r\n            label=\"Task Description\"\r\n            outline\r\n        />\r\n    </MDBContainer>\r\n","import React from 'react';\r\nimport { MDBContainer, MDBAlert } from 'mdbreact';\r\n\r\nexport default ({ error }) => (\r\n        <MDBContainer>\r\n            <MDBAlert color=\"danger\" >\r\n                {error}\r\n            </MDBAlert>\r\n        </MDBContainer>\r\n    );\r\n\r\n","export default arr => arr.some(input => input === \" \" || input === \"\" || input == null);","import React, { Component } from \"react\";\r\nimport Switch from \"react-switch\";\r\nimport { MDBRow, MDBCol } from \"mdbreact\";\r\n\r\nexport default class SwitchButton extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { checked: false };\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    handleChange(checked) {\r\n        this.setState({ checked });\r\n        this.props.switchPriority(checked);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <label>\r\n                <MDBRow>\r\n                    <MDBCol md=\"2\">\r\n                        <Switch onChange={this.handleChange} checked={this.state.checked} />\r\n                    </MDBCol>\r\n                    <MDBCol md=\"10\">\r\n                        <span style={{ marginLeft: 15, fontSize: 20 }}>Please, select if this task is priority</span>\r\n                    </MDBCol>\r\n                </MDBRow>\r\n            </label>\r\n        );\r\n    }\r\n}","import React, {useState, useEffect, useCallback} from 'react';\r\nimport { MDBBtn, MDBModal, MDBModalBody, MDBModalHeader, MDBModalFooter, MDBInput } from 'mdbreact';\r\nimport InputForm from './InputForm';\r\nimport DescriptionTaskInput from \"./DescriptionTaskInput\";\r\nimport ErrorMessage from \"../board_modal/ErrorMessage\";\r\nimport ValidateUserBlankInput from '../../helpers/ValidateUserBlankInput';\r\nimport {useAlert} from 'react-alert';\r\nimport SwitchButton from \"./ToggleSwitchPriority\";\r\n\r\nexport default ({\r\n                    createTask,\r\n                    resetErrors,\r\n                    validateInput,\r\n                    errors: {\r\n                        taskTitleError,\r\n                        taskDescriptionError,\r\n                        firstNameError,\r\n                        lastNameError\r\n                    }\r\n                }) => {\r\n    const [modalButtonClick, setModalButtonClick] = useState(false);\r\n    const [taskTitle, setTaskTitle] = useState(\"\");\r\n    const [taskDescription, setTaskDescription] = useState(\"\");\r\n    const [highTaskPriority, setHighTaskPriority] = useState(false);\r\n    const [delegateName, setDelegateName] = useState({\r\n        first: \"\",\r\n        last: \"\"\r\n    });\r\n    const [createNewTask, setCreateNewTask] = useState({});\r\n\r\n    const handleTaskTitleChange = e => {\r\n        const {value, name} = e.target;\r\n        validateInput(value, name);\r\n        setTaskTitle(value);\r\n    }\r\n\r\n    const handleHighTaskPrioritySwitch = task_priority => {\r\n        setHighTaskPriority(task_priority);\r\n    }\r\n\r\n    const handleTaskDescriptionChange = e => {\r\n        const {value, name} = e.target;\r\n        validateInput(value, name);\r\n        setTaskDescription(value);\r\n    }\r\n    const handleDelegateNameChange = (attribute, value) => {\r\n        if (attribute === \"first\") {\r\n            validateInput(value, attribute);\r\n            setDelegateName({...delegateName, first: value});\r\n        }\r\n        if (attribute === \"last\") {\r\n            validateInput(value, attribute);\r\n            setDelegateName({...delegateName, last: value});\r\n        }\r\n    }\r\n\r\n    const alert = useAlert();\r\n\r\n    const handleStoreTaskItem = () => {\r\n        if (ValidateUserBlankInput(\r\n            [\r\n                taskTitle,\r\n                taskDescription,\r\n                delegateName.first,\r\n                delegateName.last\r\n            ])) {\r\n            alert.error(<div style={{color: 'red', fontSize: 15}}>Please, Fill Blank Fields...</div>, {\r\n                timeout: 5000,\r\n                onOpen: () => {\r\n                    console.log('hey')\r\n                },\r\n                onClose: () => {\r\n                    console.log('closed')\r\n                }\r\n            });\r\n        } else {\r\n            setCreateNewTask({\r\n                ...createNewTask,\r\n                task_title: taskTitle,\r\n                location: 'kanban_board',\r\n                task_description: taskDescription,\r\n                task_priority: highTaskPriority,\r\n                first: delegateName.first,\r\n                last: delegateName.last\r\n            });\r\n            setModalButtonClick(!modalButtonClick);\r\n            setHighTaskPriority(false);\r\n        }\r\n    };\r\n\r\n    const stableDispatch = useCallback(createTask, []);\r\n\r\n    useEffect(() => {\r\n        stableDispatch(createNewTask);\r\n    }, [stableDispatch, createNewTask]);\r\n\r\n\r\n    const handleToggleModal = () => {\r\n        setTaskTitle('');\r\n        setTaskDescription('');\r\n        setDelegateName({\r\n                first: \"\",\r\n                last: \"\"\r\n            }\r\n        );\r\n        setModalButtonClick(!modalButtonClick);\r\n        resetErrors();\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <MDBBtn className='start-modal-button' onClick={handleToggleModal}>CREATE TASK</MDBBtn>\r\n            <MDBModal style={{zIndex: 1}} isOpen={modalButtonClick} toggle={handleToggleModal}>\r\n                <MDBModalHeader toggle={handleToggleModal}>Task Form</MDBModalHeader>\r\n                <MDBModalBody>\r\n                    <MDBInput label=\"Enter Task Title\" name='task_title' type='text' value={taskTitle}\r\n                              onChange={handleTaskTitleChange} size=\"md\"/>\r\n                    {taskTitleError.errors && <ErrorMessage error={taskTitleError.errors}/>}\r\n                    <DescriptionTaskInput\r\n                        id='textArea'\r\n                        description={taskDescription}\r\n                        descriptionInputChange={handleTaskDescriptionChange}\r\n                    />\r\n                    {taskDescriptionError.errors && <ErrorMessage error={taskDescriptionError.errors}/>}\r\n                    <SwitchButton switchPriority={handleHighTaskPrioritySwitch}/>\r\n                    <InputForm fullname={delegateName} handleDelegateNameChange={handleDelegateNameChange}/>\r\n                    {firstNameError.errors && <ErrorMessage error={firstNameError.errors}/>}\r\n                    {lastNameError.errors && <ErrorMessage error={lastNameError.errors}/>}\r\n                </MDBModalBody>\r\n                <MDBModalFooter>\r\n                    <MDBBtn className='row' color=\"secondary\" onClick={handleToggleModal}>Close</MDBBtn>\r\n                    <MDBBtn\r\n                        disabled={taskTitleError.inputStatus || taskDescriptionError.inputStatus || firstNameError.inputStatus || lastNameError.inputStatus}\r\n                        className='row'\r\n                        color=\"primary\" onClick={handleStoreTaskItem}>Create Task</MDBBtn>\r\n                </MDBModalFooter>\r\n            </MDBModal>\r\n        </>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { MDBInput } from 'mdbreact';\r\nimport \"./style.css\";\r\n\r\nexport default ({ boardOrderChange, order }) => {\r\n    return (\r\n        <MDBInput label=\"Enter Board Order\" name='board_order' type=\"text\" value={order} onChange={boardOrderChange}/>\r\n    );\r\n}\r\n\r\n","import React from 'react';\r\n\r\nexport default ({ newBoardPlaceOrder, boardsSchema }) => {\r\n    const order = isNaN(newBoardPlaceOrder) || newBoardPlaceOrder === 0 ? 1 : newBoardPlaceOrder;\r\n    return (\r\n        <div className='schema-container'>\r\n            <i style={{color: 'red', order: order, marginRight: 7}} className=\"fas fa-level-down-alt fa-3x\"/>\r\n\r\n            {boardsSchema.map((block, idx) => (\r\n                idx + 1 < order\r\n                    ?\r\n                    <div style={{order: idx + 1}} key={idx} className='block-element'>{idx + 1}</div>\r\n                    :\r\n                    <div style={{order: idx + 2}} key={idx} className='block-element'>{idx + 1}</div>\r\n                )\r\n            )}\r\n        </div>\r\n    );\r\n}","import React, {useState, useEffect, useCallback} from 'react';\r\nimport { MDBBtn, MDBModal, MDBModalBody, MDBModalHeader, MDBModalFooter, MDBInput } from 'mdbreact';\r\nimport OrderInput from \"./OrderInput\";\r\nimport ErrorMessage from \"./ErrorMessage\";\r\nimport { useAlert } from 'react-alert';\r\nimport ValidateUserBlankInput from '../../helpers/ValidateUserBlankInput';\r\nimport InsertionBoardSchema from \"./InsertionBoardSchema\";\r\n\r\nexport default ({\r\n                    boardsSchema,\r\n                    setBoardOrderState,\r\n                    createBoard,\r\n                    validateInput,\r\n                    boards,\r\n                    errors: { boardOrderError, boardTitleError }\r\n}) => {\r\n    const [modalButtonClick, setModalButtonClick] = useState(false);\r\n    const [boardTitle, setBoardTitle] = useState(\"\");\r\n    const [boardOrder, setBoardOrder] = useState(0);\r\n    const [createNewBoard, setCreateNewBoard] = useState({});\r\n    const [newBoardPlaceOrder, setNewBoardPlaceOrder] = useState(1);\r\n\r\n    const alert = useAlert();\r\n\r\n    const handleStoreBoardItem = () => {\r\n        if(ValidateUserBlankInput([boardTitle])){\r\n            alert.error(<div style={{ color: 'red', fontSize: 15 }}>Please, Fill Blank Fields...</div>, {\r\n                timeout: 5000,\r\n                onOpen: () => {\r\n                    console.log('hey')\r\n                },\r\n                onClose: () => {\r\n                    console.log('closed')\r\n                }\r\n            });\r\n        }\r\n        else{\r\n            setCreateNewBoard({\r\n                ...createNewBoard,\r\n                title: boardTitle,\r\n                order: boardOrder\r\n            });\r\n            setModalButtonClick(!modalButtonClick);\r\n            setNewBoardPlaceOrder(1);\r\n            setBoardOrderState(boards.map(board => (\r\n                {\r\n                    id: board.id,\r\n                    order: board.order,\r\n                    name: board.name\r\n                }\r\n                ))\r\n            );\r\n        }\r\n    };\r\n    const handleBoardTitleChange = e => {\r\n        const { value, name } = e.target;\r\n        validateInput(value, name);\r\n        setBoardTitle(e.target.value);\r\n    }\r\n\r\n    const handleBoardOrderChange = e => {\r\n        const { value, name } = e.target;\r\n        validateInput(value, name);\r\n        setBoardOrder(value);\r\n        setNewBoardPlaceOrder(value);\r\n    }\r\n\r\n\r\n    const stableDispatch = useCallback(createBoard, []);\r\n\r\n    useEffect(() => {\r\n        stableDispatch(createNewBoard);\r\n    }, [stableDispatch, createNewBoard]);\r\n\r\n\r\n    const handleToggleModal = () => {\r\n        setBoardTitle('');\r\n        setBoardOrder(1);\r\n        setModalButtonClick(!modalButtonClick);\r\n        setNewBoardPlaceOrder(1);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <MDBBtn className='start-modal-button' onClick={handleToggleModal}>CREATE BOARD</MDBBtn>\r\n            <MDBModal isOpen={modalButtonClick} toggle={handleToggleModal}>\r\n                <MDBModalHeader toggle={handleToggleModal}>Board Form</MDBModalHeader>\r\n                <MDBModalBody>\r\n                    <div className=\"form-group\">\r\n                        <MDBInput label=\"Enter Board Title\" name='board_title' type='text' value={boardTitle} onChange={handleBoardTitleChange} size=\"md\" />\r\n                        {boardTitleError.errors && <ErrorMessage error={boardTitleError.errors}/>}\r\n                        <InsertionBoardSchema newBoardPlaceOrder={+newBoardPlaceOrder} boardsSchema={boardsSchema}/>\r\n                        <OrderInput order={boardOrder} boardOrderChange={handleBoardOrderChange}/>\r\n                        {boardOrderError.errors && <ErrorMessage error={boardOrderError.errors}/>}\r\n                    </div>\r\n                </MDBModalBody>\r\n                <MDBModalFooter>\r\n                    <MDBBtn className='row' color=\"secondary\" onClick={handleToggleModal}>Close</MDBBtn>\r\n                    <MDBBtn disabled={boardOrderError.inputStatus || boardTitleError.inputStatus} className='row' color=\"primary\" onClick={handleStoreBoardItem}>Create Board</MDBBtn>\r\n                </MDBModalFooter>\r\n            </MDBModal>\r\n        </>\r\n    );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { MDBContainer, MDBRow, MDBCol, MDBBtn } from 'mdbreact';\r\n\r\nexport default ({ userLoginAuth, handleToggleModal }) => {\r\n\r\n    const [userLoginCredentials, setUserLoginCredentials] = useState({\r\n        email: '',\r\n        password: ''\r\n    });\r\n\r\n    const handleUserLoginInputs = e => {\r\n        const { name, value } = e.target;\r\n        setUserLoginCredentials({\r\n            ...userLoginCredentials,\r\n            [name]: value\r\n        });\r\n    };\r\n\r\n    const handleUserCredentialSubmit = () => {\r\n        userLoginAuth({\r\n            email: userLoginCredentials.email,\r\n            password: userLoginCredentials.password\r\n        });\r\n        handleToggleModal();\r\n    };\r\n\r\n    return (\r\n        <MDBContainer>\r\n            <MDBRow center>\r\n                <MDBCol md=\"6\">\r\n                    <div>\r\n                        <h3 className=\"h4 text-center mb-4\">SIGN IN</h3>\r\n                        <label htmlFor=\"defaultFormLoginEmailEx\" className=\"grey-text\">\r\n                            Your email\r\n                        </label>\r\n                        <input\r\n                            type=\"email\"\r\n                            id=\"defaultFormLoginEmailEx\"\r\n                            name='email'\r\n                            className=\"form-control\"\r\n                            value={userLoginCredentials.email}\r\n                            onChange={handleUserLoginInputs}\r\n                        />\r\n                        <br />\r\n                        <label htmlFor=\"defaultFormLoginPasswordEx\" className=\"grey-text\">\r\n                            Your password\r\n                        </label>\r\n                        <input\r\n                            type=\"password\"\r\n                            id=\"defaultFormLoginPasswordEx\"\r\n                            name='password'\r\n                            className=\"form-control\"\r\n                            value={userLoginCredentials.password}\r\n                            onChange={handleUserLoginInputs}\r\n                        />\r\n                        <div className=\"text-center mt-4\">\r\n                            <MDBBtn\r\n                                onClick={handleUserCredentialSubmit}\r\n                                color=\"indigo\"\r\n                                type=\"submit\"\r\n                            >\r\n                                LOGIN\r\n                            </MDBBtn>\r\n                        </div>\r\n                    </div>\r\n                </MDBCol>\r\n            </MDBRow>\r\n        </MDBContainer>\r\n    );\r\n};\r\n\r\n","import React, { useState } from 'react';\r\nimport { MDBBtn, MDBModal, MDBModalBody, MDBModalHeader } from 'mdbreact';\r\nimport LoginForm from \"./LoginForm\";\r\n\r\nexport default ({ userLoginAuth }) => {\r\n    const [modalButtonClick, setModalButtonClick] = useState(false);\r\n\r\n    const handleToggleModal = () => setModalButtonClick(!modalButtonClick);\r\n    return (\r\n        <>\r\n            <MDBBtn className='login-modal-button' onClick={handleToggleModal}>LOGIN</MDBBtn>\r\n            <MDBModal isOpen={modalButtonClick} toggle={handleToggleModal}>\r\n                <MDBModalHeader\r\n                    toggle={handleToggleModal}\r\n                >\r\n                    Login Form\r\n                </MDBModalHeader>\r\n                <MDBModalBody>\r\n                    <LoginForm\r\n                        userLoginAuth={userLoginAuth}\r\n                        handleToggleModal={handleToggleModal}\r\n                    />\r\n                </MDBModalBody>\r\n            </MDBModal>\r\n        </>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport {MDBBtn, MDBBtnGroup} from \"mdbreact\";\r\n\r\nexport default ({task: {board, id, location, task_title, priority_level, task_priority}, login, boardOrder, handleFindForEditTaskModal, boardLength, moveTask, deleteTask, hideTask}) => {\r\n    const boolStr = task_priority ? 'true' : 'false';\r\n    return (\r\n        <MDBBtnGroup size=\"sm\" className=\"mb-4\">\r\n            <MDBBtn\r\n                disabled={boardOrder === 0}\r\n                className='task-button'\r\n                color=\"white\"\r\n            >\r\n                <span\r\n                    id={id}\r\n                    onClick={moveTask}\r\n                    direction='left'\r\n                    location={location}\r\n                    priority_level={priority_level}\r\n                    task_priority={boolStr}\r\n                    order={boardOrder}\r\n                    name={`left-${board}`}\r\n                    className=\"fa fa-angle-double-left\"\r\n                    aria-hidden=\"true\"\r\n                >\r\n                </span>\r\n            </MDBBtn>\r\n            <MDBBtn className='task-button' color=\"white\">\r\n                <span id={id} name={board} location={location} priority_level={priority_level} onClick={hideTask}\r\n                      className=\"hide fas fa-eye-slash\" aria-hidden=\"true\"/>\r\n            </MDBBtn>\r\n            {\r\n                location === 'kanban_board'\r\n                    ?\r\n                    <>\r\n                        <MDBBtn disabled={!login} className='task-button' color=\"white\">\r\n                            <span id={id} name={board} title={task_title} onClick={handleFindForEditTaskModal} className=\"edit fas fa-edit\"\r\n                                  aria-hidden=\"true\"/>\r\n                        </MDBBtn>\r\n                        <MDBBtn disabled={!login} className='task-button' color=\"white\">\r\n                            <span id={id} name={board} title={task_title} onClick={deleteTask} className=\"delete fas fa-trash-alt\"\r\n                                  aria-hidden=\"true\"/>\r\n                        </MDBBtn>\r\n                    </>\r\n                    :\r\n                    null\r\n            }\r\n            <MDBBtn\r\n                className='task-button'\r\n                disabled={boardOrder === boardLength - 1}\r\n                color=\"white\"\r\n            >\r\n                <span\r\n                    id={id}\r\n                    onClick={moveTask}\r\n                    direction='right'\r\n                    location={location}\r\n                    priority_level={priority_level}\r\n                    task_priority={boolStr}\r\n                    order={boardOrder}\r\n                    name={`right-${board}`}\r\n                    className=\"fa fa-angle-double-right\"\r\n                    aria-hidden=\"true\"\r\n                >\r\n                </span>\r\n            </MDBBtn>\r\n        </MDBBtnGroup>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport ButtonGroup from \"./ButtonGroup\";\r\nimport {MDBBtn, MDBRow, MDBCol, MDBContainer, MDBModal, MDBModalBody, MDBModalFooter, MDBModalHeader} from \"mdbreact\";\r\n\r\n\r\nexport default ({task, index, listLength, login, boardLength, swapTasks, handleFindForEditTaskModal, boardOrder, id, moveTask, editTask, deleteTask, hideTask}) => {\r\n\r\n    const [toggleModal, setToggleModal] = useState(false);\r\n    const dragTaskStart = e => {\r\n        const target = e.target;\r\n        e.dataTransfer.setData('task', target.id);\r\n    };\r\n\r\n    const DescriptionModal = () =>\r\n        <MDBContainer>\r\n            <MDBModal isOpen={toggleModal} toggle={handleToggleDescriptionModal} size=\"fluid\">\r\n                <MDBModalHeader toggle={handleToggleDescriptionModal}>{task.task_title}</MDBModalHeader>\r\n                <MDBModalBody>\r\n                    {task.task_description}\r\n                </MDBModalBody>\r\n                <MDBModalFooter>\r\n                    <MDBBtn color=\"secondary\" onClick={handleToggleDescriptionModal}>Close</MDBBtn>\r\n                </MDBModalFooter>\r\n            </MDBModal>\r\n        </MDBContainer>\r\n\r\n    const dragTaskOver = e => {\r\n        e.stopPropagation();\r\n    };\r\n\r\n    const handleOnMouseOver = e => {\r\n        let id = e.target.id;\r\n        if(id && document.getElementById(id).querySelector(\".task-details\") !== null) document.getElementById(id).querySelector(\".task-details\").innerHTML = 'Click Here...';\r\n\r\n    }\r\n    const handleOnMouseOff = e => {\r\n        let id = e.target.id;\r\n        if(id && document.getElementById(id).querySelector(\".task-details\") !== null) document.getElementById(id).querySelector(\".task-details\").innerHTML = 'Details...';\r\n    }\r\n\r\n    const handleToggleDescriptionModal = () => setToggleModal(!toggleModal)\r\n\r\n    return (\r\n        <MDBContainer\r\n            draggable='true'\r\n            name={task.board}\r\n            id={id}\r\n            onDragStart={dragTaskStart}\r\n            onDragOver={dragTaskOver}\r\n            className=\"d-flex flex-column task-card\"\r\n        >\r\n            <MDBBtn\r\n                disabled={index === 0}\r\n                name='up'\r\n                color='white'\r\n                priority_level={task.priority_level}\r\n                location={task.location}\r\n                board={task.board}\r\n                id={id}\r\n                className='up-button'\r\n                onClick={swapTasks}\r\n            >\r\n                Up\r\n            </MDBBtn>\r\n            <MDBRow>\r\n                <MDBCol size=\"8\" style={{display: 'flex', justifyContent: 'flex-start'}}>\r\n                    <h6 className=\"task-title\">{task.task_title}</h6>\r\n                </MDBCol>\r\n                {task.task_priority && <MDBCol style={{display: 'flex', justifyContent: 'flex-end'}} className=\"priority\"><i className=\"fas fa-exclamation-triangle fa-2x\"/></MDBCol>}\r\n            </MDBRow>\r\n            <span className=\"p-2 col-example text-left task-details\"\r\n                  id={id}\r\n                  onMouseOver={handleOnMouseOver}\r\n                  onMouseLeave={handleOnMouseOff}\r\n                  onClick={handleToggleDescriptionModal}\r\n            >\r\n                <i>Details...</i>\r\n            </span>\r\n            <DescriptionModal/>\r\n            <ButtonGroup\r\n                boardLength={boardLength}\r\n                boardOrder={boardOrder}\r\n                moveTask={moveTask}\r\n                login={login}\r\n                location={task.location}\r\n                editTask={editTask}\r\n                deleteTask={deleteTask}\r\n                hideTask={hideTask}\r\n                task={task}\r\n                handleFindForEditTaskModal={handleFindForEditTaskModal}\r\n            />\r\n            <MDBBtn\r\n                disabled={index === listLength - 1}\r\n                name='down'\r\n                priority_level={task.priority_level}\r\n                location={task.location}\r\n                board={task.board}\r\n                id={id}\r\n                color='white'\r\n                className='down-button'\r\n                onClick={swapTasks}>\r\n                Down\r\n            </MDBBtn>\r\n\r\n        </MDBContainer>\r\n    )\r\n}","import React from 'react';\r\nimport TaskItem from \"./TaskItem\";\r\nimport {MDBCol, MDBContainer, MDBRow} from \"mdbreact\";\r\n\r\nexport default ({\r\n                    boards,\r\n                    moveTask,\r\n                    deleteTask,\r\n                    hideTask,\r\n                    editTask,\r\n                    swapKanbanTasks,\r\n                    showTask,\r\n                    userLogin,\r\n                    dragTask,\r\n                    deleteBoard,\r\n                    boardMessage,\r\n                    handleFindForEditTaskModal,\r\n                    setBoardOrderState\r\n                }) => {\r\n\r\n    const dropTask = e => {\r\n        e.preventDefault();\r\n        const task_id = e.dataTransfer.getData('task');\r\n        const task = document.getElementById(task_id);\r\n        setBoardOrderState(boards.map(board => (\r\n                {\r\n                    id: board.id,\r\n                    order: board.order,\r\n                    name: board.name,\r\n                    title: board.title,\r\n                    tasks: board.tasks.map(task => ({\r\n                        id: task.id,\r\n                        visibility: true,\r\n                        task_title: task.task_title,\r\n                        location: task.location,\r\n                        task_description: task.task_description,\r\n                        task_priority: task.task_priority,\r\n                        board: task.board,\r\n                        first: task.first,\r\n                        last: task.last\r\n                    }))\r\n                }\r\n            ))\r\n        );\r\n        dragTask(e.target.getAttribute('name'), task.getAttribute('name'), task_id);\r\n    };\r\n\r\n    const dragTaskOver = e => {\r\n        e.preventDefault();\r\n    };\r\n\r\n    const handleDeleteBoard = e => {\r\n        setBoardOrderState(boards.map(board => (\r\n                {\r\n                    id: board.id,\r\n                    order: board.order,\r\n                    name: board.name\r\n                }\r\n            ))\r\n        );\r\n        deleteBoard(e);\r\n    };\r\n\r\n    const boardList = (list, order, login, length) => list.length\r\n        ? list.map((task, id) => task.visibility\r\n            ? <TaskItem\r\n                boardLength={length}\r\n                boardOrder={order}\r\n                moveTask={moveTask}\r\n                deleteTask={deleteTask}\r\n                hideTask={hideTask}\r\n                editTask={editTask}\r\n                listLength={list.length}\r\n                swapTasks={swapKanbanTasks}\r\n                login={login}\r\n                key={id}\r\n                index={id}\r\n                id={task.id}\r\n                task={task}\r\n                handleFindForEditTaskModal={handleFindForEditTaskModal}\r\n            />\r\n            : <p className='show' key={task.id}>Hidden Task... <span id={task.id} location={task.location}\r\n                                                                     name={task.board} autoFocus\r\n                                                                     onClick={showTask} className='show'>SHOW</span></p>\r\n        )\r\n        : <p style={{color: 'white', textAlign: 'center'}}><i>{boardMessage}</i></p>;\r\n\r\n    return (\r\n        <MDBContainer className=\"dashboard container-fluid\">\r\n            <MDBRow className=\"kanban-row\">\r\n                {boards.map(board => (\r\n                    <MDBCol\r\n                        key={board.id}\r\n                        onDrop={dropTask}\r\n                        name={board.name}\r\n                        onDragOver={dragTaskOver}\r\n                        className=\"kanban-col\"\r\n                        md=\"3\"\r\n                    >\r\n                        <div className='board-header container'>\r\n                            <div className='row'>\r\n\r\n                                <div className='col-10'>\r\n                                    <div className='row'>\r\n                                        <span className=\"task-list-title col-9\">{board.title}</span>\r\n                                        <span className='task-quantity col-2'>{board.tasks.length}</span>\r\n                                    </div>\r\n                                </div>\r\n                                {\r\n                                    userLogin ?\r\n                                        <div className='col-2'>\r\n                                            <i\r\n                                                id={board.id}\r\n                                                onClick={handleDeleteBoard}\r\n                                                className=\"far fa-calendar-times fa-2x\"/>\r\n                                        </div>\r\n                                        :\r\n                                        <div className='col-2'>\r\n                                            <i\r\n                                                id={board.id}\r\n                                                className=\"far fa-calendar-times fa-2x\"/>\r\n                                        </div>\r\n                                }\r\n\r\n                            </div>\r\n                        </div>\r\n                        {boardList(board.tasks, board.order, userLogin, boards.length)}\r\n                    </MDBCol>\r\n                ))\r\n                }\r\n            </MDBRow>\r\n        </MDBContainer>\r\n    );\r\n}","import React from 'react';\r\nimport {MDBCol, MDBContainer, MDBRow} from \"mdbreact\";\r\nimport TaskItem from \"./TaskItem\";\r\n\r\nexport default ({\r\n                    priorityTasks,\r\n                    moveTask,\r\n                    deleteTask,\r\n                    hideTask,\r\n                    editTask,\r\n                    swapPriorityTasks,\r\n                    showTask,\r\n                    boardMessage,\r\n                    handleFindForEditTaskModal\r\n                }) => {\r\n\r\n    const priorityTasksList = (list, order, length) => list.length\r\n        ? list.map((task, id) => task.visibility\r\n            ? <TaskItem\r\n                boardLength={length}\r\n                boardOrder={order}\r\n                moveTask={moveTask}\r\n                deleteTask={deleteTask}\r\n                hideTask={hideTask}\r\n                editTask={editTask}\r\n                listLength={list.length}\r\n                swapTasks={swapPriorityTasks}\r\n                key={id}\r\n                index={id}\r\n                id={task.id}\r\n                task={task}\r\n                handleFindForEditTaskModal={handleFindForEditTaskModal}\r\n            />\r\n            : <p className='show' key={task.id}>Hidden Task... <span id={task.id} priority_level={task.priority_level} name={task.board} autoFocus\r\n                                                                     onClick={showTask} className='show'>SHOW</span></p>\r\n        )\r\n        : <p style={{color: 'white', textAlign: 'center'}}><i>{boardMessage}</i></p>;\r\n    return (\r\n        <MDBContainer className=\"dashboard container-fluid\">\r\n            <MDBRow className=\"kanban-row\">\r\n                {priorityTasks.map((list, idx) => (\r\n                    <MDBCol\r\n                        key={idx}\r\n                        name={list.priority_level}\r\n                        className=\"kanban-col\"\r\n                        md=\"6\"\r\n                    >\r\n                        <div className='board-header container'>\r\n                            <div className='row'>\r\n                                <div className='col-12'>\r\n                                    <div className='row'>\r\n                                        <span className=\"task-list-title col-10\">{list.priority_level.toUpperCase()} Priority List</span>\r\n                                        <span className='task-quantity col-1'>{list.tasks.length}</span>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        {priorityTasksList(list.tasks, list.order, priorityTasks.length)}\r\n                    </MDBCol>\r\n                    ))\r\n                }\r\n            </MDBRow>\r\n        </MDBContainer>\r\n    );\r\n}\r\n","import React, {useState} from 'react';\r\nimport {MDBContainer, MDBBtn, MDBModal, MDBInput, MDBModalBody, MDBModalHeader, MDBModalFooter} from 'mdbreact';\r\nimport ErrorMessage from \"../board_modal/ErrorMessage\";\r\n\r\nexport default ({\r\n                    handleToggleEditTaskModal,\r\n                    errors: {\r\n                        taskTitleError,\r\n                        taskDescriptionError,\r\n                        firstNameError,\r\n                        lastNameError\r\n                    },\r\n                    modalButtonClick,\r\n                    validateInput,\r\n                    submitNewTaskItems,\r\n                    searchEditTask\r\n                }) => {\r\n    const [editTaskItems, setEditTaskItems] = useState({\r\n        task_title: \"\",\r\n        task_description: \"\",\r\n        task_priority: false,\r\n        first: \"\",\r\n        last: \"\"\r\n    });\r\n    const [toggleTaskPriority, setToggleTaskPriority] = useState(true);\r\n    const [changeEvent, setChangeEvent] = useState(false);\r\n\r\n    const handleTogglePriorityTaskStatus = () => setToggleTaskPriority(!toggleTaskPriority);\r\n\r\n    const handleEditTaskItemChange = e => {\r\n        if (!changeEvent) setChangeEvent(true);\r\n\r\n        if (e.target.name === \"task_priority\") {\r\n            handleTogglePriorityTaskStatus();\r\n            setEditTaskItems({\r\n                ...editTaskItems,\r\n                id: searchEditTask.id,\r\n                board: searchEditTask.board,\r\n                task_priority: e.target.checked\r\n            });\r\n        } else {\r\n            setEditTaskItems({\r\n                ...editTaskItems,\r\n                id: searchEditTask.id,\r\n                board: searchEditTask.board,\r\n                [e.target.name]: e.target.value\r\n            });\r\n        }\r\n        validateInput(e.target.value, e.target.name);\r\n    };\r\n\r\n    const handleEditTaskItemsSubmit = () => {\r\n        submitNewTaskItems(editTaskItems);\r\n        handleToggleEditTaskModal();\r\n    };\r\n\r\n    return (\r\n        <MDBContainer>\r\n            <MDBModal isOpen={modalButtonClick} toggle={handleToggleEditTaskModal}>\r\n                <MDBModalHeader toggle={handleToggleEditTaskModal}>Task Edit Form</MDBModalHeader>\r\n                <MDBModalBody>\r\n                    <MDBInput type='text'\r\n                              name='task_title'\r\n                              label=\"Edit Task Title\"\r\n                              value={editTaskItems.title}\r\n                              onChange={handleEditTaskItemChange}\r\n                    />\r\n                    {taskTitleError.errors && <ErrorMessage error={taskTitleError.errors}/>}\r\n                    <MDBContainer className='task-description'>\r\n                        <MDBInput\r\n                            value={editTaskItems.description}\r\n                            name='task_description'\r\n                            onChange={handleEditTaskItemChange}\r\n                            type=\"textarea\"\r\n                            label=\"Task Description\"\r\n                            outline\r\n                        />\r\n                    </MDBContainer>\r\n                    {taskDescriptionError.errors && <ErrorMessage error={taskDescriptionError.errors}/>}\r\n\r\n                    <div className=\"custom-control custom-checkbox\">\r\n                        <input\r\n                            name=\"task_priority\"\r\n                            checked={toggleTaskPriority}\r\n                            type=\"checkbox\"\r\n                            onChange={handleEditTaskItemChange}\r\n                            className=\"custom-control-input\"\r\n                            id=\"priority_task\"\r\n                        />\r\n                        <label className=\"custom-control-label\" htmlFor=\"priority_task\">This is Priority\r\n                            Task\r\n                        </label>\r\n                    </div>\r\n\r\n                    <MDBInput type='text' name='first' label=\"Edit Delegate First Name\"\r\n                              value={editTaskItems.first_name} onChange={handleEditTaskItemChange}/>\r\n                    {firstNameError.errors && <ErrorMessage error={firstNameError.errors}/>}\r\n                    <MDBInput type='text' name='last' label=\"Edit Delegate Last Name\"\r\n                              value={editTaskItems.last_name} onChange={handleEditTaskItemChange}/>\r\n                    {lastNameError.errors && <ErrorMessage error={lastNameError.errors}/>}\r\n                </MDBModalBody>\r\n                <MDBModalFooter>\r\n                    <MDBBtn color=\"secondary\" onClick={handleToggleEditTaskModal}>Close</MDBBtn>\r\n                    <MDBBtn\r\n                        disabled={!changeEvent || taskTitleError.inputStatus || taskDescriptionError.inputStatus || firstNameError.inputStatus || lastNameError.inputStatus}\r\n                        color=\"primary\"\r\n                        onClick={handleEditTaskItemsSubmit}\r\n                    >\r\n                        Save changes\r\n                    </MDBBtn>\r\n                </MDBModalFooter>\r\n            </MDBModal>\r\n        </MDBContainer>\r\n);\r\n}","import {MDBNotification} from 'mdbreact';\r\nimport React from \"react\";\r\n\r\nexport default ({ serverNote, resetServerNotes }) => {\r\n\r\n    return (\r\n        <MDBNotification\r\n            autohide={8000}\r\n            onClick={() => resetServerNotes()}\r\n            bodyClassName=\"p-5 font-weight-bold white-text\"\r\n            className=\"stylish-color-dark\"\r\n            closeClassName=\"blue-grey-text\"\r\n            fade\r\n            icon=\"bell\"\r\n            iconClassName=\"blue-grey-text\"\r\n            message={serverNote}\r\n            show\r\n            title=\"Server Notification\"\r\n            titleClassName=\"elegant-color-dark white-text\"\r\n        />\r\n    )\r\n}\r\n","import React from 'react';\r\nimport Loading from './LoadingComponent';\r\nimport TaskModalPage from '../task_modal/ModalPage';\r\nimport BoardModalPage from '../board_modal/ModalPage';\r\nimport LoginModalPage from '../auth/ModalPage';\r\nimport NewKanbanDashboard from './NewKanbanDashboard';\r\nimport PriorityOrderedTasks from './PriorityOrderedTasks';\r\nimport EditTaskModalPage from '../edit_modal/ModalPage';\r\nimport ServerNotifications from \"./ServerNotifications\";\r\nimport {MDBBtn, MDBCol, MDBContainer, MDBRow} from 'mdbreact';\r\n\r\nexport default props => {\r\n\r\n    const listProps = {\r\n        boards: props.boards,\r\n        loading: props.loading,\r\n        serverNote: props.serverNote,\r\n        boardMessage: props.boardMessage,\r\n        errors: props.errors,\r\n        userLogin: props.userLogin,\r\n        boardsSchema: props.boardsSchema,\r\n        priorityTasks: props.priorityTasks,\r\n        searchEditTask: props.searchEditTask,\r\n        modalButtonClick: props.modalButtonClick,\r\n        panelControlButtons: props.panelControlButtons\r\n    };\r\n    const eventProps = {\r\n        createBoard: props.createBoard,\r\n        createTask: props.createTask,\r\n        resetServerNotes: props.resetServerNotes,\r\n        swapKanbanTasks: props.swapTasks.swapKanbanTasks,\r\n        swapPriorityTasks: props.swapTasks.swapPriorityTasks,\r\n        moveTask: props.moveTask,\r\n        deleteTask: props.deleteTask,\r\n        deleteBoard: props.deleteBoard,\r\n        userLoginAuth: props.userLoginAuth,\r\n        filterPriorityTasks: props.filterPriorityTasks,\r\n        hideTask: props.hideTask,\r\n        showTask: props.showTask,\r\n        dragTask: props.dragTask,\r\n        submitNewTaskItems: props.submitNewTaskItems,\r\n        validateInput: props.validateInput,\r\n        resetErrors: props.resetErrors,\r\n        toggleEditModal: props.toggleEditModal,\r\n        findTaskForEdit: props.findTaskForEdit,\r\n        resetMainKanbanView: props.resetMainKanbanView,\r\n        setBoardOrderState: props.setBoardOrderState\r\n    };\r\n\r\n    if (listProps.loading) {\r\n        return (\r\n            <MDBContainer>\r\n                <MDBRow className='kanban-header'>\r\n                    <h1>Kanban Board</h1>\r\n                </MDBRow>\r\n                <MDBRow center style={{marginTop: 250}}>\r\n                    <Loading\r\n                        type='spin'\r\n                        color='#32083a'\r\n                        height='50%'\r\n                        width='50%'\r\n                        delay={0}\r\n                    />\r\n                </MDBRow>\r\n            </MDBContainer>\r\n        )\r\n    } else {\r\n        return (\r\n            <div>\r\n                <MDBContainer>\r\n                    <MDBRow className='kanban-header'>\r\n                        <h1>Kanban Board</h1>\r\n                    </MDBRow>\r\n                </MDBContainer>\r\n                <EditTaskModalPage\r\n                    errors={listProps.errors}\r\n                    validateInput={eventProps.validateInput}\r\n                    modalButtonClick={listProps.modalButtonClick}\r\n                    handleToggleEditTaskModal={eventProps.toggleEditModal}\r\n                    boards={listProps.boards}\r\n                    findTaskForEdit={listProps.findTaskForEdit}\r\n                    searchEditTask={listProps.searchEditTask}\r\n                    submitNewTaskItems={eventProps.submitNewTaskItems}\r\n                />\r\n                <MDBContainer className=\"main-control-panel\">\r\n                    {listProps.userLogin &&\r\n                    <MDBRow>\r\n                        <MDBCol>\r\n                            <TaskModalPage\r\n                                errors={listProps.errors}\r\n                                validateInput={eventProps.validateInput}\r\n                                createTask={eventProps.createTask}\r\n                                resetErrors={eventProps.resetErrors}\r\n                            />\r\n                        </MDBCol>\r\n                        <MDBCol>\r\n                            <BoardModalPage\r\n                                errors={listProps.errors}\r\n                                boards={listProps.boards}\r\n                                boardsSchema={listProps.boardsSchema}\r\n                                validateInput={eventProps.validateInput}\r\n                                createBoard={eventProps.createBoard}\r\n                                deleteBoard={eventProps.deleteBoard}\r\n                                resetErrors={eventProps.resetErrors}\r\n                                setBoardOrderState={eventProps.setBoardOrderState}\r\n                            />\r\n                        </MDBCol>\r\n                        <MDBCol>\r\n                            <MDBBtn href=\"https://github.com/likejean/homework-6/issues\"\r\n                                    className='report-issues-button'>Report Issues</MDBBtn>\r\n                        </MDBCol>\r\n                    </MDBRow>\r\n                    }\r\n                    <MDBRow>\r\n\r\n                        <MDBCol>\r\n                            <LoginModalPage userLoginAuth={eventProps.userLoginAuth}/>\r\n                        </MDBCol>\r\n                        <MDBCol>\r\n                            <MDBBtn\r\n                                disabled={listProps.panelControlButtons.kanban_board}\r\n                                onClick={eventProps.resetMainKanbanView}\r\n                                className='task-priority-button'\r\n                            >Kanban Board\r\n                            </MDBBtn>\r\n                        </MDBCol>\r\n                        <MDBCol>\r\n                            <MDBBtn\r\n                                disabled={listProps.panelControlButtons.priority_board}\r\n                                onClick={eventProps.filterPriorityTasks}\r\n                                className='task-priority-button'\r\n                            >Priority Tasks\r\n                            </MDBBtn>\r\n                        </MDBCol>\r\n                    </MDBRow>\r\n\r\n                </MDBContainer>\r\n                {listProps.serverNote\r\n                    ?\r\n                    <MDBContainer className='server-notification'>\r\n                        <MDBRow center>\r\n                            <MDBCol>\r\n                                <ServerNotifications\r\n                                    serverNote={listProps.serverNote}\r\n                                    resetServerNotes={eventProps.resetServerNotes}\r\n                                />\r\n                            </MDBCol>\r\n                        </MDBRow>\r\n                    </MDBContainer>\r\n                    : null\r\n                }\r\n                {\r\n                    listProps.panelControlButtons.kanban_board && !listProps.panelControlButtons.priority_board\r\n                        ?\r\n                        <NewKanbanDashboard\r\n                            boardMessage={listProps.boardMessage}\r\n                            handleFindForEditTaskModal={eventProps.findTaskForEdit}\r\n                            {...listProps}\r\n                            {...eventProps}\r\n                        />\r\n                        :\r\n                        <PriorityOrderedTasks\r\n                            boardMessage={listProps.boardMessage}\r\n                            handleFindForEditTaskModal={eventProps.findTaskForEdit}\r\n                            {...listProps}\r\n                            {...eventProps}\r\n                        />\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}","export default (obj) => {\r\n\r\n    // null and undefined are \"empty\"\r\n    if (obj == null) return true;\r\n\r\n    // Assume if it has a length property with a non-zero value\r\n    // that that property is correct.\r\n    if (obj.length > 0)    return false;\r\n    if (obj.length === 0)  return true;\r\n\r\n    // If it isn't an object at this point\r\n    // it is empty, but it can't be anything *but* empty\r\n    // Is it empty?  Depends on your application.\r\n    if (typeof obj !== \"object\") return true;\r\n\r\n    // Otherwise, does it have any properties of its own?\r\n    // Note that this doesn't handle\r\n    // toString and valueOf enumeration bugs in IE < 9\r\n    for (var key in obj) {\r\n        if (hasOwnProperty.call(obj, key)) return false;\r\n    }\r\n\r\n    return true;\r\n}","export default (arr, a, b) => {\r\n    let temp = arr[a];\r\n    arr[a] = arr[b];\r\n    arr[b] = temp;\r\n    return arr;\r\n}","export default (name, value, length) => {\r\n    const titleFormat = /^[0-9A-Za-z\\s]+$/;\r\n    const personNameFormat = /^[a-zA-Z]+$/;\r\n    switch (name) {\r\n        case 'board_order':\r\n            return {\r\n                errors:\r\n                    isNaN(value) || value === \"\"\r\n                        ? 'Input must be an INTEGER!'\r\n                        : parseInt(value) <= 0\r\n                        ? 'Must be greater than zero!'\r\n                        : parseInt(value) > length + 1\r\n                            ? `Must be less or equal ${length + 1}!`\r\n                            : '',\r\n                inputStatus:\r\n                    isNaN(value) || value === \"\" || parseInt(value) <= 0 || parseInt(value) > length + 1\r\n            };\r\n        case 'board_title':\r\n            return {\r\n                errors:\r\n                    !value.match(titleFormat)\r\n                        ? 'Please, input alphanumeric characters only!'\r\n                        : value.length > 10\r\n                            ? 'This title is too long'\r\n                            : '',\r\n                inputStatus:\r\n                    !value.match(titleFormat) || value.length > 10\r\n            };\r\n        case 'task_title':\r\n            return {\r\n                errors:\r\n                    !value.match(titleFormat)\r\n                        ? 'Please, input alphanumeric characters only!'\r\n                        : value.length > 13\r\n                        ? 'This title is too long'\r\n                        : '',\r\n                inputStatus:\r\n                    !value.match(titleFormat) || value.length > 13\r\n            };\r\n        case 'task_description':\r\n            return {\r\n                errors:\r\n                    value.length >= 100\r\n                        ? 'Description must be less than 100 characters'\r\n                        : '',\r\n                inputStatus:\r\n                    value.length >= 100\r\n            };\r\n        case 'first':\r\n            return {\r\n                errors:\r\n                    !value.match(personNameFormat)\r\n                        ? 'Please, input alphabetical characters only!'\r\n                        : value.length < 3\r\n                        ? 'First name is too short'\r\n                        : '',\r\n                inputStatus:\r\n                    !value.match(personNameFormat) || value.length < 3\r\n            };\r\n        case 'last':\r\n            return {\r\n                errors:\r\n                    !value.match(personNameFormat)\r\n                        ? 'Please, input alphabetical characters only!'\r\n                        : value.length < 3\r\n                        ? 'Last name is too short'\r\n                        : '',\r\n                inputStatus:\r\n                    !value.match(personNameFormat) || value.length < 3\r\n            };\r\n        default:\r\n            return {\r\n                errors : '',\r\n                inputStatus: false\r\n            }\r\n    }\r\n}\r\n","import React, {useState, useEffect, useRef} from 'react';\r\nimport Main from './components/main';\r\nimport '@fortawesome/fontawesome-free/css/all.min.css';\r\nimport 'bootstrap-css-only/css/bootstrap.min.css';\r\nimport 'mdbreact/dist/css/mdb.css';\r\nimport uuid from 'react-uuid';\r\nimport jwt from 'jsonwebtoken';\r\nimport './App.css';\r\nimport isEmpty from './helpers/EmptyObject';\r\nimport SwapArrayElements from \"./helpers/SwapArrayElements\";\r\nimport ValidateUserInput from \"./helpers/ValidateUserInputChange\";\r\n\r\n\r\nconst initialPriorityTaskList = [\r\n    {\r\n        priority_level: 'high',\r\n        id: uuid(),\r\n        order: 0,\r\n        tasks: []\r\n    },\r\n    {\r\n        priority_level: 'low',\r\n        order: 1,\r\n        id: uuid(),\r\n        tasks: []\r\n    }\r\n];\r\n\r\nconst initialErrors = {\r\n    boardTitleError: {\r\n        errors: '',\r\n        inputStatus: false\r\n    },\r\n    taskTitleError: {\r\n        errors: '',\r\n        inputStatus: false\r\n    },\r\n    boardOrderError: {\r\n        errors: '',\r\n        inputStatus: false\r\n    },\r\n    taskDescriptionError: {\r\n        errors: '',\r\n        inputStatus: false\r\n    },\r\n    firstNameError: {\r\n        errors: '',\r\n        inputStatus: false\r\n    },\r\n    lastNameError: {\r\n        errors: '',\r\n        inputStatus: false\r\n    }\r\n};\r\n\r\n//const URI_heroku = 'http://localhost:8080';\r\nconst URI_heroku = 'https://rest-api-server-kanban.herokuapp.com';\r\n\r\nfunction KanbanBoard() {\r\n\r\n    const [note, setNote] = useState(\"\");\r\n    const [loading, setLoading] = useState(true);\r\n    const [boards, setBoards] = useState([]);\r\n    const [userLogin, setUserLogin] = useState(false);\r\n    const [inputErrors, setInputErrors] = useState(initialErrors);\r\n    const [boardsSchema, setBoardsSchema] = useState([]);\r\n    const [priorityTasks, setPriorityTasks] = useState(initialPriorityTaskList);\r\n    const [editModalButtonClick, setEditModalButtonClick] = useState(false);\r\n    const [searchEditTask, setSearchEditTask] = useState({});\r\n    const [panelControlButtons, setPanelControlButtons] = useState({\r\n        kanban_board: true,\r\n        priority_board: false\r\n    });\r\n    const [serverResponseNote, setServerResponseNote] = useState('');\r\n\r\n    //Pull the latest board order from the child component...\r\n    const boardsRef = useRef();\r\n    const setBoardOrderState = data => {\r\n        boardsRef.current = data;\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        async function getData() {\r\n            const res = await fetch(\r\n                `${URI_heroku}/boards`);\r\n            res.json()\r\n                .then(data => {\r\n                    setBoards(data.boards.map(board => (\r\n                            {\r\n                                id: board._id,\r\n                                order: board.order,\r\n                                name: board.name,\r\n                                title: board.title,\r\n                                tasks: board.tasks.map(task => ({\r\n                                    id: task._id,\r\n                                    visibility: true,\r\n                                    task_title: task.title,\r\n                                    location: task.location,\r\n                                    task_description: task.description,\r\n                                    task_priority: task.priority,\r\n                                    board: task.board,\r\n                                    first: task.first,\r\n                                    last: task.last\r\n                                }))\r\n                            }\r\n                        ))\r\n                    );\r\n                    setLoading(false);\r\n                    setBoards(boards => boards.sort((a, b) => a.order - b.order));\r\n                    setBoardsSchema([...Array(data.boards.length).keys()]);\r\n                })\r\n                .catch(err => console.log(err));\r\n        };\r\n\r\n        getData()\r\n            .then(() => console.log('Successfully rendered!'))\r\n            .catch(() => console.log('Rendering failed'));\r\n\r\n        let store = JSON.parse(localStorage.getItem('login'));\r\n\r\n        const isExpired = store => {\r\n            if (store.token && jwt.decode(store.token)) {\r\n                const now = new Date();\r\n                return store.expiryDate < now.getTime();\r\n            }\r\n            return false;\r\n        }\r\n        if (store && store.token) {\r\n            if(isExpired(store)) {\r\n                console.log('Your login session expired!')\r\n                setUserLogin(false);\r\n                localStorage.clear();\r\n            }\r\n            else {\r\n                setUserLogin(true);\r\n            }\r\n        }\r\n    }, []);\r\n\r\n\r\n    const handleUserLoginAuth = credentials => {\r\n        fetch(`${URI_heroku}/users/login`,\r\n            {\r\n                method: 'POST',\r\n                headers: {'Content-Type': 'application/json'},\r\n                body: JSON.stringify(credentials)\r\n            })\r\n            .then(response =>\r\n                response.json()\r\n                    .then(result => {\r\n                    console.warn('result', result);\r\n                    if (result.token) {\r\n                        const now = new Date();\r\n                        localStorage.setItem('login', JSON.stringify({\r\n                                login: true,\r\n                                token: result.token,\r\n                                birthDate: now.getTime(),\r\n                                tokenLife: jwt.decode(result.token).exp * 1000 - now.getTime(),\r\n                                expiryDate: jwt.decode(result.token).exp * 1000\r\n                            }\r\n                        ));\r\n                    } else {\r\n                        localStorage.setItem('login', JSON.stringify({\r\n                                login: false,\r\n                                error: {\r\n                                    message: result.message,\r\n                                    description: result.description\r\n                                }\r\n                            }\r\n                        ));\r\n                    }\r\n                    let store = JSON.parse(localStorage.getItem('login'));\r\n                    if (store && store.token) {\r\n                        setUserLogin(true);\r\n                    }\r\n                }))\r\n            .catch(() => console.log('error occurred'))\r\n    };\r\n\r\n    const handleFindForEditTaskModal = e => {\r\n        const name = e.target.getAttribute('name');\r\n        const id = e.target.id;\r\n        if (id) setSearchEditTask(boards.find(board => board.name === name).tasks.find(task => task.id === id));\r\n        setEditModalButtonClick(!editModalButtonClick);\r\n    }\r\n\r\n    const handleToggleEditTaskModal = () => setEditModalButtonClick(!editModalButtonClick);\r\n\r\n    const handleCreateNewBoard2 = board => {\r\n        const index = board.order - 1;\r\n\r\n        if (!isEmpty(board)) {\r\n\r\n            const bearer = 'Bearer ' + JSON.parse(localStorage.getItem('login')).token;\r\n            fetch(`${URI_heroku}/boards`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': bearer\r\n                },\r\n                body: JSON.stringify({\r\n                    ...board,\r\n                    order: index,\r\n                    name: board.title.toLowerCase()\r\n                })\r\n            })\r\n                .then(response => response.json())\r\n                .then(result => {\r\n                    const board = result.createdBoard;\r\n                    if(board) {\r\n                        setServerResponseNote(result.message);\r\n                        console.log('NOTE: ', result.message);\r\n                        setBoards(boards => [\r\n                            ...boards.slice(0, index),\r\n                            Object.assign({},\r\n                                {\r\n                                    ...board,\r\n                                    order: index\r\n                                }),\r\n                            ...boards.slice(index)\r\n                        ]);\r\n                        setBoards(boards => boards.map((board, id) =>\r\n                            board.order <= id ?\r\n                                {\r\n                                    ...board,\r\n                                    order: id\r\n                                }\r\n                                :\r\n                                {\r\n                                    ...board,\r\n                                    order: id + 1\r\n                                }\r\n                        ));\r\n                        setBoardsSchema(boardsSchema => [...boardsSchema].concat(boardsSchema.length));\r\n\r\n                        return [\r\n                            ...boardsRef.current.slice(0, index),\r\n                            Object.assign({},\r\n                                {\r\n                                    id: board.id,\r\n                                    order: board.order,\r\n                                    name: board.name\r\n                                }),\r\n                            ...boardsRef.current.slice(index)\r\n                        ].map((board, id) =>\r\n                            board.order <= id ?\r\n                                {\r\n                                    ...board,\r\n                                    order: id\r\n                                }\r\n                                :\r\n                                {\r\n                                    ...board,\r\n                                    order: id + 1\r\n                                }\r\n                        );\r\n                    }else{\r\n                        throw new Error('Your login session is expired or you do not have a permission to perform this operation!');\r\n                    }\r\n                })\r\n                .then(data => {\r\n                    fetch(`${URI_heroku}/boards`, {\r\n                        method: 'PATCH',\r\n                        headers: {'Content-Type': 'application/json'},\r\n                        body: JSON.stringify(data)\r\n                    })\r\n                        .then(response => response.json())\r\n                        .then(result => {\r\n                            console.log('NOTE: ', result.message);\r\n                            setServerResponseNote(result.message);\r\n                        })\r\n                        .catch(err => {\r\n                            console.log(err)\r\n                        })\r\n                })\r\n                .catch(err => {\r\n                    console.log(err);\r\n                });\r\n        }\r\n        ;\r\n    };\r\n\r\n\r\n    const handleValidateUserInput2 = (input, name) => {\r\n        if (name === 'board_order') setInputErrors(inputErrors => ({\r\n            ...inputErrors,\r\n            boardOrderError: ValidateUserInput(name, input, boards.length)\r\n        }));\r\n        if (name === 'board_title') setInputErrors(inputErrors => ({\r\n            ...inputErrors,\r\n            boardTitleError: ValidateUserInput(name, input, boards.length)\r\n        }));\r\n        if (name === 'task_title') setInputErrors(inputErrors => ({\r\n            ...inputErrors,\r\n            taskTitleError: ValidateUserInput(name, input, boards.length)\r\n        }));\r\n        if (name === 'task_description') setInputErrors(inputErrors => ({\r\n            ...inputErrors,\r\n            taskDescriptionError: ValidateUserInput(name, input, boards.length)\r\n        }));\r\n        if (name === 'first') setInputErrors(inputErrors => ({\r\n            ...inputErrors,\r\n            firstNameError: ValidateUserInput(name, input, boards.length)\r\n        }));\r\n        if (name === 'last') setInputErrors(inputErrors => ({\r\n            ...inputErrors,\r\n            lastNameError: ValidateUserInput(name, input, boards.length)\r\n        }));\r\n    };\r\n\r\n    const handleGeneratePriorityTasksList2 = () => {\r\n        setPriorityTasks(initialPriorityTaskList);\r\n        boards.map(board => (\r\n                board.tasks.forEach(task => {\r\n                    if (task.task_priority) return setPriorityTasks(priorityTasks =>\r\n                        priorityTasks.map(list => list.priority_level === 'high'\r\n                            ?\r\n                            {\r\n                                ...list,\r\n                                tasks: list.tasks.concat({\r\n                                    ...task,\r\n                                    location: 'priority_list',\r\n                                    priority_level: 'high'\r\n                                })\r\n                            }\r\n                            :\r\n                            list\r\n                        ));\r\n                    else return setPriorityTasks(priorityTasks =>\r\n                        priorityTasks.map(list => list.priority_level === 'low'\r\n                            ?\r\n                            {\r\n                                ...list,\r\n                                tasks: list.tasks.concat({\r\n                                    ...task,\r\n                                    location: 'priority_list',\r\n                                    priority_level: 'low'\r\n                                })\r\n                            }\r\n                            :\r\n                            list\r\n                        ));\r\n                })\r\n            )\r\n        );\r\n        setPanelControlButtons({\r\n                kanban_board: false,\r\n                priority_board: true\r\n            }\r\n        );\r\n    };\r\n\r\n    const handleResetMainKanbanView = () => setPanelControlButtons({\r\n            kanban_board: true,\r\n            priority_board: false\r\n        }\r\n    );\r\n\r\n    const handleResetAllErrors2 = () => setInputErrors(initialErrors);\r\n\r\n    const handleSubmitNewTaskItems2 = revised_task => {\r\n        fetch(`${URI_heroku}/tasks/${revised_task.id}`, {\r\n            method: 'PATCH',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify(revised_task)\r\n        })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                const new_task = data.updatedTask;\r\n                setBoards(boards => boards.map(board =>\r\n                    board.name === new_task.board\r\n                        ?\r\n                        {\r\n                            ...board,\r\n                            tasks: board.tasks.map(old_task =>\r\n                                old_task.id === new_task.id\r\n                                    ?\r\n                                    {\r\n                                        ...old_task,\r\n                                        ...new_task\r\n                                    }\r\n                                    :\r\n                                    old_task\r\n                            )\r\n                        }\r\n                        :\r\n                        board\r\n                ));\r\n            }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    };\r\n\r\n    const handleDeleteBoard2 = e => {\r\n        const bearer = 'Bearer ' + JSON.parse(localStorage.getItem('login')).token;\r\n        const data = boardsRef.current\r\n            .filter(board => board.id !== e.target.id)\r\n            .map((board, id) => ({...board, order: id}));\r\n        fetch(`${URI_heroku}/boards/${e.target.id}`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': bearer\r\n            },\r\n            body: JSON.stringify(data)\r\n        })\r\n            .then(response => response.json())\r\n            .then((result, err) => {\r\n                setServerResponseNote(result.message);\r\n                console.log('NOTE: ', result.message);\r\n                if (err) throw new Error('Your login session is expired or you do not have a permission to perform this operation!')\r\n                else {\r\n                    const id = result.deletedBoard;\r\n                    setBoards(boards => boards.filter(board => board.id !== id));\r\n                }\r\n\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n        setBoards(boards => boards.map((board, id) => ({...board, order: id})));\r\n        setBoardsSchema(boardsSchema => [...boardsSchema].filter(elem => elem !== boards.length - 1));\r\n\r\n    };\r\n\r\n    const handleCreateNewTask2 = task => {\r\n\r\n        const bearer = 'Bearer ' + JSON.parse(localStorage.getItem('login')).token;\r\n        if (isEmpty(task) !== true) {\r\n            fetch(`${URI_heroku}/tasks`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Authorization': bearer,\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({...task, board: 'todo'})\r\n            })\r\n                .then(response => response.json())\r\n                .then((result, err) => {\r\n                    console.log('NOTE: ', result.message);\r\n                    setServerResponseNote(result.message);\r\n                    if (result.err) throw new Error('Your login session is expired or you do not have a permission to perform this action...');\r\n                    else {\r\n                        const task = result.createdTask;\r\n                        setBoards(boards => boards.map(board =>\r\n                            board.name === task.board\r\n                                ?\r\n                                {\r\n                                    ...board,\r\n                                    tasks: board.tasks.concat(\r\n                                        {\r\n                                            id: task._id,\r\n                                            visibility: true,\r\n                                            task_title: task.title,\r\n                                            location: task.location,\r\n                                            task_description: task.description,\r\n                                            task_priority: task.priority,\r\n                                            board: task.board,\r\n                                            first: task.first,\r\n                                            last: task.last\r\n                                        }\r\n                                    )\r\n                                }\r\n                                :\r\n                                board\r\n                        ));\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    console.log(err);\r\n                });\r\n        } else setNote('This list is empty');\r\n    };\r\n\r\n    const handleSwapTasksWithinKanbanBoard2 = e => {\r\n        const task_id = e.target.id;\r\n        const direction = e.target.getAttribute('name');\r\n        const board_name = e.target.getAttribute('board');\r\n\r\n        setBoards(boards => [...boards].map(board => {\r\n            if (board.name === board_name) {\r\n                const index1 = board.tasks.findIndex(task => task.id === task_id);\r\n                const tasks = direction === 'up'\r\n                    ? SwapArrayElements(board.tasks, index1, index1 - 1)\r\n                    : SwapArrayElements(board.tasks, index1, index1 + 1)\r\n                return {...board, tasks}\r\n            } else {\r\n                return board;\r\n            }\r\n        }));\r\n    };\r\n\r\n    const handleSwapTasksWithinPriorityList2 = e => {\r\n        const task_id = e.target.id;\r\n        const direction = e.target.getAttribute('name');\r\n        const list_priority_level = e.target.getAttribute('priority_level');\r\n\r\n        setPriorityTasks(priorityTasks => [...priorityTasks].map(list => {\r\n            if (list.priority_level === list_priority_level) {\r\n                const index1 = list.tasks.findIndex(task => task.id === task_id);\r\n                const tasks = direction === 'up'\r\n                    ? SwapArrayElements(list.tasks, index1, index1 - 1)\r\n                    : SwapArrayElements(list.tasks, index1, index1 + 1)\r\n                return {...list, tasks}\r\n            } else {\r\n                return list;\r\n            }\r\n        }));\r\n    };\r\n\r\n\r\n    const handleMoveTaskBetweenBoards2 = e => {\r\n        const id = e.target.getAttribute('id');\r\n        const direction = e.target.getAttribute('direction');\r\n        const boardOrder = e.target.getAttribute('order');\r\n        const location = e.target.getAttribute('location');\r\n        const task_priority = e.target.getAttribute('task_priority');\r\n\r\n        let isTrueSet = (task_priority === 'true');\r\n        let movingTask;\r\n        location === 'kanban_board'\r\n            ?\r\n            movingTask = boards.find(board => board.order === parseInt(boardOrder)).tasks.find(task => task.id === id)\r\n            :\r\n            movingTask = priorityTasks.find(list => list.order === parseInt(boardOrder)).tasks.find(task => task.id === id);\r\n\r\n        ///remove a task....\r\n\r\n        location === 'kanban_board'\r\n            ?\r\n            setBoards(boards => boards.map(board =>\r\n                    board.order === parseInt(boardOrder)\r\n                        ?\r\n                        {\r\n                            ...board,\r\n                            tasks: board.tasks.filter(task => task.id !== id)\r\n                        }\r\n                        :\r\n                        board\r\n                )\r\n            )\r\n            :\r\n            setPriorityTasks(priorityTasks => priorityTasks.map(list =>\r\n                    list.order === parseInt(boardOrder)\r\n                        ?\r\n                        {\r\n                            ...list,\r\n                            tasks: list.tasks.filter(task => task.id !== id)\r\n                        }\r\n                        :\r\n                        list\r\n                )\r\n            );\r\n        ////Add a task......\r\n\r\n        location === 'kanban_board'\r\n            ?\r\n            direction === 'right'\r\n                ?\r\n                setBoards(boards => boards.map(board =>\r\n                        board.order === parseInt(boardOrder) + 1\r\n                            ?\r\n                            {\r\n                                ...board,\r\n                                tasks: board.tasks.concat({...movingTask, board: board.name})\r\n                            }\r\n                            : board\r\n                    )\r\n                )\r\n                :\r\n                setBoards(boards => boards.map(board =>\r\n                        board.order === parseInt(boardOrder) - 1\r\n                            ?\r\n                            {\r\n                                ...board,\r\n                                tasks: board.tasks.concat({...movingTask, board: board.name})\r\n                            }\r\n                            : board\r\n                    )\r\n                )\r\n            :\r\n            direction === 'right'\r\n                ?\r\n                setPriorityTasks(priorityList => priorityList.map(list =>\r\n                        list.order === parseInt(boardOrder) + 1\r\n                            ?\r\n                            {\r\n                                ...list,\r\n                                tasks: list.tasks.concat({\r\n                                    ...movingTask,\r\n                                    priority_level: list.priority_level,\r\n                                    task_priority: false\r\n                                })\r\n                            }\r\n                            : list\r\n                    )\r\n                )\r\n                :\r\n                setPriorityTasks(priorityList => priorityList.map(list =>\r\n                        list.order === parseInt(boardOrder) - 1\r\n                            ?\r\n                            {\r\n                                ...list,\r\n                                tasks: list.tasks.concat({\r\n                                    ...movingTask,\r\n                                    priority_level: list.priority_level,\r\n                                    task_priority: true\r\n                                })\r\n                            }\r\n                            : list\r\n                    )\r\n                );\r\n        if (movingTask.location === 'priority_list')\r\n            setBoards(boards => [...boards].map(board =>\r\n                board.name === movingTask.board\r\n                    ?\r\n                    {\r\n                        ...board,\r\n                        tasks: board.tasks.map(task =>\r\n                            task.id === movingTask.id\r\n                                ?\r\n                                {\r\n                                    ...task,\r\n                                    task_priority: !isTrueSet\r\n                                }\r\n                                :\r\n                                task\r\n                        )\r\n                    }\r\n                    : board\r\n            ));\r\n        if (location === 'kanban_board') fetch(`${URI_heroku}/boards/${id}`, {\r\n            method: 'PATCH',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({\r\n                moveOutBoard: +boardOrder,\r\n                moveInBoard: direction === 'left' ? +boardOrder - 1 : +boardOrder + 1\r\n            })\r\n        })\r\n            .then(response => response.json())\r\n            .then(result => {\r\n                console.log(result);\r\n            })\r\n            .catch(err => console.log(err));\r\n    };\r\n\r\n    const handleDragAndDrop2 = (board_name, task_name, id) => {\r\n        const dragTask = boardsRef.current.find(board => board.name === task_name).tasks.find(task => task.id === id);\r\n\r\n        setBoards(boards => boards.map(board =>\r\n                board.name === task_name && board_name !== null\r\n                    ?\r\n                    {\r\n                        ...board,\r\n                        tasks: board.tasks.filter(task => task.id !== id)\r\n                    }\r\n                    :\r\n                    board\r\n            )\r\n        );\r\n        setBoards(boards => boards.map(board =>\r\n                board.name === board_name\r\n                    ?\r\n                    {\r\n                        ...board,\r\n                        tasks: board.tasks.concat({...dragTask, board: board.name})\r\n                    }\r\n                    : board\r\n            )\r\n        );\r\n        fetch(`${URI_heroku}/boards/${id}`, {\r\n            method: 'PATCH',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                moveOutBoard: +boardsRef.current.find(board => board.name === task_name).order,\r\n                moveInBoard: +boardsRef.current.find(board => board.name === board_name).order\r\n            })\r\n        })\r\n            .then(response => response.json())\r\n            .then(result => {\r\n                console.log(result);\r\n            })\r\n            .catch(err => console.log(err));\r\n\r\n    };\r\n\r\n    const handleDeleteTaskItem2 = e => {\r\n        const bearer = 'Bearer ' + JSON.parse(localStorage.getItem('login')).token;\r\n        fetch(`${URI_heroku}/tasks/${e.target.id}`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Authorization': bearer,\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                id: e.target.id,\r\n                board: e.target.getAttribute('name'),\r\n                title: e.target.getAttribute('title')\r\n            })\r\n        })\r\n            .then(response => response.json())\r\n            .then(result => {\r\n                console.log(result.message);\r\n                setServerResponseNote(result.message);\r\n                if (result.err) throw new Error('Your login session is expired or you do not have a permission to perform this operation!')\r\n                else {\r\n                    const { deletedTask: {id, board_name} } = result;\r\n                    setBoards(boards => boards.map(board =>\r\n                        board.name === board_name\r\n                            ?\r\n                            {\r\n                                ...board,\r\n                                tasks: board.tasks.filter(task => task.id !== id)\r\n                            }\r\n                            :\r\n                            board\r\n                    ));\r\n                }\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n        if (priorityTasks.length > 0) setPriorityTasks(priorityTasks.filter(task => task.id !== e.target.id));\r\n    };\r\n\r\n    const handleShowTaskItem2 = e => {\r\n        let visible;\r\n        const id = e.target.getAttribute('id');\r\n        const name = e.target.getAttribute('name');\r\n        const className = e.target.getAttribute('class').split(\" \")[0];\r\n        const location = e.target.getAttribute('location');\r\n        const priority_level = e.target.getAttribute('priority_level');\r\n        className === 'show' ? visible = true : visible = false;\r\n        location === 'kanban_board'\r\n            ?\r\n            setBoards(boards => boards.map(board =>\r\n                    board.name === name\r\n                        ?\r\n                        {\r\n                            ...board,\r\n                            tasks: board.tasks.map(task => task.id === id\r\n                                ?\r\n                                {\r\n                                    ...task,\r\n                                    visibility: visible\r\n                                }\r\n                                :\r\n                                task\r\n                            )\r\n                        }\r\n                        :\r\n                        board\r\n                )\r\n            )\r\n            :\r\n            setPriorityTasks(priorityTasks => priorityTasks.map(list =>\r\n                    list.priority_level === priority_level\r\n                        ?\r\n                        {\r\n                            ...list,\r\n                            tasks: list.tasks.map(task => task.id === id\r\n                                ?\r\n                                {\r\n                                    ...task,\r\n                                    visibility: visible\r\n                                }\r\n                                :\r\n                                task\r\n                            )\r\n                        }\r\n                        :\r\n                        list\r\n                )\r\n            )\r\n    };\r\n\r\n    const handleResetServerNotes = () => {\r\n        console.log('Reset');\r\n    }\r\n\r\n////////////////////////////////////////////////////////////////////\r\n////////////////////////////////////////////////////////////////////\r\n////////////////////////////////////////////////////////////////////\r\n\r\n    const handleEventProps = {\r\n        createBoard: handleCreateNewBoard2,\r\n        createTask: handleCreateNewTask2,\r\n        moveTask: handleMoveTaskBetweenBoards2,\r\n        dragTask: handleDragAndDrop2,\r\n        deleteTask: handleDeleteTaskItem2,\r\n        hideTask: handleShowTaskItem2,\r\n        showTask: handleShowTaskItem2,\r\n        submitNewTaskItems: handleSubmitNewTaskItems2,\r\n        deleteBoard: handleDeleteBoard2,\r\n        validateInput: handleValidateUserInput2,\r\n        resetErrors: handleResetAllErrors2,\r\n        setBoardOrderState: setBoardOrderState,\r\n        userLoginAuth: handleUserLoginAuth,\r\n        resetServerNotes: handleResetServerNotes,\r\n        swapTasks: {\r\n            swapKanbanTasks: handleSwapTasksWithinKanbanBoard2,\r\n            swapPriorityTasks: handleSwapTasksWithinPriorityList2\r\n        },\r\n        swapPriorityTasks: handleSwapTasksWithinPriorityList2,\r\n        filterPriorityTasks: handleGeneratePriorityTasksList2,\r\n        toggleEditModal: handleToggleEditTaskModal,\r\n        findTaskForEdit: handleFindForEditTaskModal,\r\n        resetMainKanbanView: handleResetMainKanbanView\r\n\r\n    };\r\n\r\n    const handleStateProps = {\r\n        userLogin: userLogin,\r\n        serverNote: serverResponseNote,\r\n        boards: boards,\r\n        loading: loading,\r\n        priorityTasks: priorityTasks,\r\n        boardMessage: note,\r\n        errors: inputErrors,\r\n        boardsSchema: boardsSchema,\r\n        searchEditTask: searchEditTask,\r\n        modalButtonClick: editModalButtonClick,\r\n        panelControlButtons: panelControlButtons\r\n    };\r\n\r\n    return <Main {...handleEventProps} {...handleStateProps} />\r\n\r\n}\r\n\r\nexport default KanbanBoard;","import React from 'react';\nimport KanbanBoard from './KanbanBoard';\n\nexport default () => {\n    return (\n        <div className='container'>\n            <KanbanBoard/>\n        </div>\n    )\n};\n","import { transitions, positions } from 'react-alert';\r\n\r\nexport const options = {\r\n    position: positions.TOP_CENTER,\r\n    timeout: 5000,\r\n    offset: '20px',\r\n    containerStyle: {\r\n        zIndex: 9999,\r\n    },\r\n    transition: transitions.SCALE\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider as AlertProvider} from 'react-alert';\nimport App from './App';\nimport {options} from './helpers/AlertOptions';\nimport AlertTemplate from 'react-alert-template-basic';\n\nReactDOM.render(\n        <AlertProvider template={AlertTemplate} {...options}>\n            <App/>\n        </AlertProvider>,\n    document.getElementById('root'));\n\n"],"sourceRoot":""}