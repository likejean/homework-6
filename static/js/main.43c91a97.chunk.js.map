{"version":3,"sources":["components/task_modal/InputForm.js","components/task_modal/DescriptionTaskInput.js","components/board_modal/ErrorMessage.js","helpers/ValidateUserBlankInput.js","components/task_modal/ToggleSwitchPriority.js","components/task_modal/ModalPage.js","components/board_modal/OrderInput.js","components/board_modal/InsertionBoardSchema.js","components/board_modal/ModalPage.js","components/main/ButtonGroup.js","components/main/TaskItem.js","components/main/NewKanbanDashboard.js","components/main/PriorityOrderedTasks.js","components/edit_modal/ModalPage.js","components/main/index.js","helpers/EmptyObject.js","helpers/SwapArrayElements.js","helpers/ValidateUserInputChange.js","App.js","helpers/AlertOptions.js","index.js"],"names":["handleDelegateNameChange","fullname","style","marginBottom","prepend","inputs","noTag","name","value","first","onChange","e","target","getAttribute","type","last","description","descriptionInputChange","className","label","outline","error","color","arr","some","input","SwitchButton","props","state","checked","handleChange","bind","this","setState","switchPriority","md","marginLeft","fontSize","Component","createTask","resetErrors","validateInput","errors","taskTitleError","taskDescriptionError","firstNameError","lastNameError","useState","modalButtonClick","setModalButtonClick","taskTitle","setTaskTitle","taskDescription","setTaskDescription","highTaskPriority","setHighTaskPriority","delegateName","setDelegateName","createNewTask","setCreateNewTask","alert","useAlert","stableDispatch","useCallback","useEffect","handleToggleModal","onClick","zIndex","isOpen","toggle","size","ErrorMessage","DescriptionTaskInput","id","task_priority","InputForm","attribute","disabled","inputStatus","ValidateUserBlankInput","timeout","onOpen","console","log","onClose","task_title","task_description","boardOrderChange","order","newBoardPlaceOrder","boardsSchema","isNaN","marginRight","map","block","idx","key","createBoard","boardOrderError","boardTitleError","boardTitle","setBoardTitle","boardOrder","setBoardOrder","createNewBoard","setCreateNewBoard","setNewBoardPlaceOrder","InsertionBoardSchema","OrderInput","title","task","board","handleFindForEditTaskModal","boardLength","moveTask","deleteTask","hideTask","direction","aria-hidden","index","listLength","swapTasks","editTask","toggleModal","setToggleModal","DescriptionModal","handleToggleDescriptionModal","draggable","onDragStart","dataTransfer","setData","onDragOver","stopPropagation","onMouseOver","document","getElementById","querySelector","innerHTML","onMouseLeave","ButtonGroup","boards","showTask","dragTask","deleteBoard","boardMessage","dropTask","preventDefault","task_id","getData","dragTaskOver","onDrop","tasks","length","list","visibility","TaskItem","autoFocus","textAlign","priorityTasks","handleToggleEditTaskModal","submitNewTaskItems","searchEditTask","editTaskItems","setEditTaskItems","handleEditTaskItemChange","first_name","last_name","listProps","eventProps","filterPriorityTasks","toggleEditModal","findTaskForEdit","href","NewKanbanDashboard","PriorityOrderedTasks","obj","hasOwnProperty","call","a","b","temp","titleFormat","personNameFormat","parseInt","match","initialBoards","uuid","initialErrors","App","note","setNote","setBoards","inputErrors","setInputErrors","Array","keys","setBoardsSchema","setPriorityTasks","setSearchEditTask","handleShowTaskItem2","visible","split","handleEventProps","isEmpty","slice","Object","assign","toLowerCase","concat","movingTask","find","filter","board_name","task_name","revised_task","old_task","elem","ValidateUserInput","index1","findIndex","SwapArrayElements","forEach","handleStateProps","options","position","positions","TOP_CENTER","offset","containerStyle","transition","transitions","SCALE","ReactDOM","render","template","AlertTemplate"],"mappings":"8QAEe,cAA+C,IAA3CA,EAA0C,EAA1CA,yBAA0BC,EAAgB,EAAhBA,SAKzC,OACI,kBAAC,IAAD,CAAeC,MAAO,CAAEC,aAAc,IAClCC,QAAQ,iBACRC,OACI,oCACI,kBAAC,IAAD,CAAUC,OAAK,EAACC,KAAK,QAAQC,MAAOP,EAASQ,MAAOC,SARjC,SAAAC,GAAC,OAAIX,EAAyBW,EAAEC,OAAOC,aAAa,QAASF,EAAEC,OAAOJ,QAQCM,KAAK,SAC/F,kBAAC,IAAD,CAAUR,OAAK,EAACC,KAAK,OAAOC,MAAOP,EAASc,KAAML,SAR/B,SAAAC,GAAC,OAAIX,EAAyBW,EAAEC,OAAOC,aAAa,QAASF,EAAEC,OAAOJ,QAQFM,KAAK,aCVjG,kBAAGE,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,uBAAhB,OACX,kBAAC,IAAD,CAAcC,UAAU,oBACpB,kBAAC,IAAD,CACIV,MAAOQ,EACPT,KAAK,mBACLG,SAAUO,EACVH,KAAK,WACLK,MAAM,mBACNC,SAAO,MCRJ,kBAAGC,EAAH,EAAGA,MAAH,OACP,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAUC,MAAM,UACXD,KCNF,WAAAE,GAAG,OAAIA,EAAIC,MAAK,SAAAC,GAAK,MAAc,MAAVA,GAA2B,KAAVA,GAAyB,MAATA,M,yDCIpDC,E,kDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CAAEC,SAAS,GACxB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBAHL,E,yDAMNF,GACTG,KAAKC,SAAS,CAAEJ,YAChBG,KAAKL,MAAMO,eAAeL,K,+BAI1B,OACI,+BACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAQM,GAAG,KACP,kBAAC,IAAD,CAAQzB,SAAUsB,KAAKF,aAAcD,QAASG,KAAKJ,MAAMC,WAE7D,kBAAC,IAAD,CAAQM,GAAG,MACP,0BAAMjC,MAAO,CAAEkC,WAAY,GAAIC,SAAU,KAAzC,kD,GApBkBC,aCK3B,cAUQ,IATHC,EASE,EATFA,WACAC,EAQE,EARFA,YACAC,EAOE,EAPFA,cAOE,IANFC,OACIC,EAKF,EALEA,eACAC,EAIF,EAJEA,qBACAC,EAGF,EAHEA,eACAC,EAEF,EAFEA,cAEF,EAC8BC,oBAAS,GADvC,mBACXC,EADW,KACOC,EADP,OAEgBF,mBAAS,IAFzB,mBAEXG,EAFW,KAEAC,EAFA,OAG4BJ,mBAAS,IAHrC,mBAGXK,EAHW,KAGMC,EAHN,OAI8BN,oBAAS,GAJvC,mBAIXO,EAJW,KAIOC,EAJP,OAKsBR,mBAAS,CAC7CtC,MAAO,GACPM,KAAM,KAPQ,mBAKXyC,EALW,KAKGC,EALH,OASwBV,mBAAS,IATjC,mBASXW,EATW,KASIC,EATJ,KAqCZC,EAAQC,cAiCRC,EAAiBC,sBAAYxB,EAAY,IAE/CyB,qBAAU,WACNF,EAAeJ,KAChB,CAACI,EAAgBJ,IAGpB,IAAMO,EAAoB,WACtBd,EAAa,IACbE,EAAmB,IACnBI,EAAgB,CACRhD,MAAO,GACPM,KAAM,KAGdkC,GAAqBD,GACrBR,KAGJ,OACI,oCACI,kBAAC,IAAD,CAAQtB,UAAU,qBAAqBgD,QAASD,GAAhD,eACA,kBAAC,IAAD,CAAU/D,MAAO,CAACiE,OAAQ,GAAIC,OAAQpB,EAAkBqB,OAAQJ,GAC5D,kBAAC,IAAD,CAAgBI,OAAQJ,GAAxB,aACA,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAU9C,MAAM,mBAAmBZ,KAAK,aAAaO,KAAK,OAAON,MAAO0C,EAC9DxC,SArFI,SAAAC,GAAM,IAAD,EACTA,EAAEC,OAAjBJ,EADwB,EACxBA,MAAOD,EADiB,EACjBA,KACdkC,EAAcjC,EAAOD,GACrB4C,EAAa3C,IAkF0C8D,KAAK,OAC/C3B,EAAeD,QAAU,kBAAC6B,EAAD,CAAclD,MAAOsB,EAAeD,SAC9D,kBAAC8B,EAAD,CACIC,GAAG,WACHzD,YAAaoC,EACbnC,uBAhFgB,SAAAN,GAAM,IAAD,EACfA,EAAEC,OAAjBJ,EAD8B,EAC9BA,MAAOD,EADuB,EACvBA,KACdkC,EAAcjC,EAAOD,GACrB8C,EAAmB7C,MA+ENoC,EAAqBF,QAAU,kBAAC6B,EAAD,CAAclD,MAAOuB,EAAqBF,SAC1E,kBAAC,EAAD,CAAcR,eAvFO,SAAAwC,GACjCnB,EAAoBmB,MAuFR,kBAACC,EAAD,CAAW1E,SAAUuD,EAAcxD,yBA/ElB,SAAC4E,EAAWpE,GACvB,UAAdoE,IACAnC,EAAcjC,EAAOoE,GACrBnB,EAAgB,eAAID,EAAL,CAAmB/C,MAAOD,MAE3B,SAAdoE,IACAnC,EAAcjC,EAAOoE,GACrBnB,EAAgB,eAAID,EAAL,CAAmBzC,KAAMP,SAyE/BqC,EAAeH,QAAU,kBAAC6B,EAAD,CAAclD,MAAOwB,EAAeH,SAC7DI,EAAcJ,QAAU,kBAAC6B,EAAD,CAAclD,MAAOyB,EAAcJ,UAEhE,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAQxB,UAAU,MAAMI,MAAM,YAAY4C,QAASD,GAAnD,SACA,kBAAC,IAAD,CACIY,SAAUlC,EAAemC,aAAelC,EAAqBkC,aAAejC,EAAeiC,aAAehC,EAAcgC,YACxH5D,UAAU,MACVI,MAAM,UAAU4C,QA3ER,WACpBa,EACA,CACI7B,EACAE,EACAI,EAAa/C,MACb+C,EAAazC,OAEjB6C,EAAMvC,MAAM,yBAAKnB,MAAO,CAACoB,MAAO,MAAOe,SAAU,KAArC,gCAA8E,CACtF2C,QAAS,IACTC,OAAQ,WACJC,QAAQC,IAAI,QAEhBC,QAAS,WACLF,QAAQC,IAAI,cAIpBxB,EAAiB,eACVD,EADS,CAEZ2B,WAAYnC,EACZoC,iBAAkBlC,EAClBsB,cAAepB,EACf7C,MAAO+C,EAAa/C,MACpBM,KAAMyC,EAAazC,QAEvBkC,GAAqBD,GACrBO,GAAoB,MA6CZ,mBC9HL,G,MAAA,YAAkC,IAA/BgC,EAA8B,EAA9BA,iBAAkBC,EAAY,EAAZA,MAChC,OACI,kBAAC,IAAD,CAAUrE,MAAM,oBAAoBZ,KAAK,cAAcO,KAAK,OAAON,MAAOgF,EAAO9E,SAAU6E,MCJpF,cAA2C,IAAxCE,EAAuC,EAAvCA,mBAAoBC,EAAmB,EAAnBA,aAC5BF,EAAQG,MAAMF,IAA8C,IAAvBA,EAA2B,EAAIA,EAC1E,OACI,yBAAKvE,UAAU,oBACX,uBAAGhB,MAAO,CAACoB,MAAO,MAAOkE,MAAOA,EAAOI,YAAa,GAAI1E,UAAU,gCAEjEwE,EAAaG,KAAI,SAACC,EAAOC,GAAR,OACdA,EAAM,EAAIP,EAEN,yBAAKtF,MAAO,CAACsF,MAAOO,EAAM,GAAIC,IAAKD,EAAK7E,UAAU,iBAAiB6E,EAAM,GAEzE,yBAAK7F,MAAO,CAACsF,MAAOO,EAAM,GAAIC,IAAKD,EAAK7E,UAAU,iBAAiB6E,EAAM,QCL9E,cAAiG,IAA9FL,EAA6F,EAA7FA,aAAcO,EAA+E,EAA/EA,YAAaxD,EAAkE,EAAlEA,cAAkE,IAAnDC,OAAUwD,EAAyC,EAAzCA,gBAAiBC,EAAwB,EAAxBA,gBAAwB,EAC3DpD,oBAAS,GADkD,mBACpGC,EADoG,KAClFC,EADkF,OAEvEF,mBAAS,IAF8D,mBAEpGqD,EAFoG,KAExFC,EAFwF,OAGvEtD,mBAAS,GAH8D,mBAGpGuD,EAHoG,KAGxFC,EAHwF,OAI/DxD,mBAAS,IAJsD,mBAIpGyD,EAJoG,KAIpFC,EAJoF,OAKvD1D,mBAAS,GAL8C,mBAKpG0C,EALoG,KAKhFiB,EALgF,KAOrG9C,EAAQC,cAsCRC,EAAiBC,sBAAYkC,EAAa,IAEhDjC,qBAAU,WACNF,EAAe0C,KAChB,CAAC1C,EAAgB0C,IAGpB,IAAMvC,EAAoB,WACtBoC,EAAc,IACdE,EAAc,GACdtD,GAAqBD,GACrB0D,EAAsB,IAG1B,OACI,oCACI,kBAAC,IAAD,CAAQxF,UAAU,qBAAqBgD,QAASD,GAAhD,gBACA,kBAAC,IAAD,CAAUG,OAAQpB,EAAkBqB,OAAQJ,GACxC,kBAAC,IAAD,CAAgBI,OAAQJ,GAAxB,cACA,kBAAC,IAAD,KACI,yBAAK/C,UAAU,cACX,kBAAC,IAAD,CAAUC,MAAM,oBAAoBZ,KAAK,cAAcO,KAAK,OAAON,MAAO4F,EAAY1F,SAnC3E,SAAAC,GAAM,IAAD,EACRA,EAAEC,OAAlBJ,EADwB,EACxBA,MAAOD,EADiB,EACjBA,KACfkC,EAAcjC,EAAOD,GACrB8F,EAAc1F,EAAEC,OAAOJ,QAgCiH8D,KAAK,OAC5H6B,EAAgBzD,QAAU,kBAAC6B,EAAD,CAAclD,MAAO8E,EAAgBzD,SAChE,kBAACiE,EAAD,CAAsBlB,oBAAqBA,EAAoBC,aAAcA,IAC7E,kBAACkB,EAAD,CAAYpB,MAAOc,EAAYf,iBAhCpB,SAAA5E,GAAM,IAAD,EACRA,EAAEC,OAAlBJ,EADwB,EACxBA,MAAOD,EADiB,EACjBA,KACfkC,EAAcjC,EAAOD,GACrBgG,EAAc/F,GACdkG,EAAsBlG,MA6BL0F,EAAgBxD,QAAU,kBAAC6B,EAAD,CAAclD,MAAO6E,EAAgBxD,WAGxE,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAQxB,UAAU,MAAMI,MAAM,YAAY4C,QAASD,GAAnD,SACA,kBAAC,IAAD,CAAQY,SAAUqB,EAAgBpB,aAAeqB,EAAgBrB,YAAa5D,UAAU,MAAMI,MAAM,UAAU4C,QAlEjG,WACtBa,EAAuB,CAACqB,IACvBxC,EAAMvC,MAAM,yBAAKnB,MAAO,CAAEoB,MAAO,MAAOe,SAAU,KAAtC,gCAAgF,CACxF2C,QAAS,IACTC,OAAQ,WACJC,QAAQC,IAAI,QAEhBC,QAAS,WACLF,QAAQC,IAAI,cAKpBsB,EAAkB,eACXD,EADU,CAEbK,MAAOT,EACPZ,MAAOc,KAEXrD,GAAqBD,GACrB0D,EAAsB,MA+Cd,oBChFL,cAAiH,IAAD,IAA9GI,KAAQC,EAAsG,EAAtGA,MAAOtC,EAA+F,EAA/FA,GAAM6B,EAAyF,EAAzFA,WAAYU,EAA6E,EAA7EA,2BAA4BC,EAAiD,EAAjDA,YAAaC,EAAoC,EAApCA,SAAUC,EAA0B,EAA1BA,WAAYC,EAAc,EAAdA,SAC7G,OACI,kBAAC,IAAD,CAAa9C,KAAK,KAAKpD,UAAU,QAC7B,kBAAC,IAAD,CACI2D,SAAyB,IAAfyB,EACVpF,UAAU,cACVI,MAAM,UAEN,0BACImD,GAAIA,EACJP,QAASgD,EACTG,UAAU,OACV7B,MAAOc,EACP/F,KAAI,eAAUwG,GACd7F,UAAU,0BACVoG,cAAY,UAIpB,kBAAC,IAAD,CAAQpG,UAAU,cAAcI,MAAM,QAClC,0BAAMmD,GAAIA,EAAIlE,KAAMwG,EAAO7C,QAASkD,EAAUlG,UAAU,wBAAwBoG,cAAY,UAEhG,kBAAC,IAAD,CAAQpG,UAAU,cAAcI,MAAM,QAClC,0BAAMmD,GAAIA,EAAIlE,KAAMwG,EAAO7C,QAAS8C,EAA4B9F,UAAU,mBAAmBoG,cAAY,UAE7G,kBAAC,IAAD,CAAQpG,UAAU,cAAcI,MAAM,QAClC,0BAAMmD,GAAIA,EAAIlE,KAAMwG,EAAO7C,QAASiD,EAAYjG,UAAU,0BAA0BoG,cAAY,UAEpG,kBAAC,IAAD,CACIpG,UAAU,cACV2D,SAAUyB,IAAeW,EAAc,EACvC3F,MAAM,UAEN,0BACImD,GAAIA,EACJP,QAASgD,EACTG,UAAU,QACV7B,MAAOc,EACP/F,KAAI,gBAAWwG,GACf7F,UAAU,2BACVoG,cAAY,YCtCjB,cAA8I,IAA5IR,EAA2I,EAA3IA,KAAMS,EAAqI,EAArIA,MAAOC,EAA8H,EAA9HA,WAAYP,EAAkH,EAAlHA,YAAaQ,EAAqG,EAArGA,UAAWT,EAA0F,EAA1FA,2BAA4BV,EAA8D,EAA9DA,WAAY7B,EAAkD,EAAlDA,GAAIyC,EAA8C,EAA9CA,SAAUQ,EAAoC,EAApCA,SAAUP,EAA0B,EAA1BA,WAAYC,EAAc,EAAdA,SAAc,EAElHrE,oBAAS,GAFyG,mBAEjJ4E,EAFiJ,KAEpIC,EAFoI,KAQlJC,EAAmB,kBACrB,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAUzD,OAAQuD,EAAatD,OAAQyD,EAA8BxD,KAAK,SACtE,kBAAC,IAAD,CAAgBD,OAAQyD,GAA+BhB,EAAKzB,YAC5D,kBAAC,IAAD,KACKyB,EAAKxB,kBAEV,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAQhE,MAAM,YAAY4C,QAAS4D,GAAnC,aAmBVA,EAA+B,kBAAMF,GAAgBD,IAE3D,OACI,kBAAC,IAAD,CACII,UAAU,OACVxH,KAAMuG,EAAKC,MACXtC,GAAIA,EACJuD,YAvCc,SAAArH,GAClB,IAAMC,EAASD,EAAEC,OACjBD,EAAEsH,aAAaC,QAAQ,OAAQtH,EAAO6D,KAsClC0D,WAtBa,SAAAxH,GACjBA,EAAEyH,mBAsBElH,UAAU,gCAEV,kBAAC,IAAD,CAAQ2D,SAAoB,IAAV0C,EAAahH,KAAK,KAAKwG,MAAOD,EAAKC,MAAOtC,GAAIA,EAAIvD,UAAU,YAAYgD,QAASuD,GAAnG,MACA,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAQnD,KAAK,KACT,wBAAIpD,UAAU,cAAc4F,EAAKzB,aAEpCyB,EAAKpC,eAAiB,kBAAC,IAAD,CAAQxD,UAAU,YAAW,uBAAGA,UAAU,wCAErE,0BAAMA,UAAU,yCACVuD,GAAIA,EACJ4D,YA9BY,SAAA1H,GACtB,IAAI8D,EAAK9D,EAAEC,OAAO6D,GACfA,GAAqE,OAA/D6D,SAASC,eAAe9D,GAAI+D,cAAc,mBAA2BF,SAASC,eAAe9D,GAAI+D,cAAc,iBAAiBC,UAAY,kBA6B3IC,aA1BW,SAAA/H,GACrB,IAAI8D,EAAK9D,EAAEC,OAAO6D,GACfA,GAAqE,OAA/D6D,SAASC,eAAe9D,GAAI+D,cAAc,mBAA2BF,SAASC,eAAe9D,GAAI+D,cAAc,iBAAiBC,UAAY,eAyB3IvE,QAAS4D,GAEX,0CAEJ,kBAACD,EAAD,MACA,kBAACc,EAAD,CACI1B,YAAaA,EACbX,WAAYA,EACZY,SAAUA,EACVQ,SAAUA,EACVP,WAAYA,EACZC,SAAUA,EACVN,KAAMA,EACNE,2BAA4BA,IAEhC,kBAAC,IAAD,CAAQnC,SAAU0C,IAAUC,EAAa,EAAGjH,KAAK,OAAOwG,MAAOD,EAAKC,MAAOtC,GAAIA,EAAIvD,UAAU,cAAcgD,QAASuD,GAApH,UCzEG,cAYQ,IAXHmB,EAWE,EAXFA,OACA1B,EAUE,EAVFA,SACAC,EASE,EATFA,WACAC,EAQE,EARFA,SACAM,EAOE,EAPFA,SACAD,EAME,EANFA,UACAoB,EAKE,EALFA,SACAC,EAIE,EAJFA,SACAC,EAGE,EAHFA,YACAC,EAEE,EAFFA,aACAhC,EACE,EADFA,2BAGViC,EAAW,SAAAtI,GACbA,EAAEuI,iBACF,IAAMC,EAAUxI,EAAEsH,aAAamB,QAAQ,QACjCtC,EAAOwB,SAASC,eAAeY,GACrCL,EAASnI,EAAEC,OAAOC,aAAa,QAASiG,EAAKjG,aAAa,QAASsI,IAGjEE,EAAe,SAAA1I,GACjBA,EAAEuI,kBAyBN,OACI,kBAAC,IAAD,CAAchI,UAAU,6BACpB,kBAAC,IAAD,CAAQA,UAAU,cACb0H,EAAO/C,KAAI,SAAAkB,GAAK,OACb,kBAAC,IAAD,CACIf,IAAKe,EAAMtC,GACX6E,OAAQL,EACR1I,KAAMwG,EAAMxG,KACZ4H,WAAYkB,EACZnI,UAAU,aACViB,GAAG,KAEH,yBAAKjB,UAAU,0BACX,yBAAKA,UAAU,OAEX,yBAAKA,UAAU,UACX,yBAAKA,UAAU,OACX,0BAAMA,UAAU,0BAA0B6F,EAAMF,OAChD,0BAAM3F,UAAU,uBAAuB6F,EAAMwC,MAAMC,UAG3D,yBAAKtI,UAAU,SACX,uBACIuD,GAAIsC,EAAMtC,GACVP,QAAS6E,EACT7H,UAAU,oCA/C3BuI,EAmDY1C,EAAMwC,MAnDZ/D,EAmDmBuB,EAAMvB,MAnDlBgE,EAmDyBZ,EAAOY,OAnDrBC,EAAKD,OAC1CC,EAAK5D,KAAI,SAACiB,EAAMrC,GAAP,OAAcqC,EAAK4C,WACxB,kBAACC,EAAD,CACE1C,YAAauC,EACblD,WAAYd,EACZ0B,SAAUA,EACVC,WAAYA,EACZC,SAAUA,EACVM,SAAUA,EACVF,WAAYiC,EAAKD,OACjB/B,UAAWA,EACXzB,IAAKvB,EACL8C,MAAO9C,EACPA,GAAIqC,EAAKrC,GACTqC,KAAMA,EACNE,2BAA4BA,IAE9B,uBAAG9F,UAAU,OAAO8E,IAAKc,EAAKrC,IAA9B,kBAAiD,0BAAMA,GAAIqC,EAAKrC,GAAIlE,KAAMuG,EAAKC,MAAO6C,WAAS,EACxC1F,QAAS2E,EAAU3H,UAAU,QADnC,YAGrD,uBAAGhB,MAAO,CAACoB,MAAO,QAASuI,UAAW,WAAW,2BAAIb,MApBzC,IAACS,EAAMjE,EAAOgE,QCzBrB,cAUQ,IAEQC,EAAMjE,EAAOgE,EAXxBM,EASE,EATFA,cACA5C,EAQE,EARFA,SACAC,EAOE,EAPFA,WACAC,EAME,EANFA,SACAM,EAKE,EALFA,SACAD,EAIE,EAJFA,UACAoB,EAGE,EAHFA,SACAG,EAEE,EAFFA,aACAhC,EACE,EADFA,2BAwBhB,OACI,kBAAC,IAAD,CAAc9F,UAAU,6BACpB,kBAAC,IAAD,CAAQA,UAAU,cACd,kBAAC,IAAD,CACIX,KAAK,gBACLW,UAAU,aACViB,GAAG,KAEH,yBAAKjB,UAAU,0BACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,UACX,yBAAKA,UAAU,OACX,0BAAMA,UAAU,0BAAhB,sBACA,0BAAMA,UAAU,uBAAuB4I,EAAcN,aAlCpDhE,EAuCiB,EAvCVgE,EAuCa,GAvC1BC,EAuCQK,GAvCqBN,OAClDC,EAAK5D,KAAI,SAACiB,EAAMrC,GAAP,OAAcqC,EAAK4C,WACxB,kBAACC,EAAD,CACE1C,YAAauC,EACblD,WAAYd,EACZ0B,SAAUA,EACVC,WAAYA,EACZC,SAAUA,EACVM,SAAUA,EACVF,WAAYiC,EAAKD,OACjB/B,UAAWA,EACXzB,IAAKvB,EACL8C,MAAO9C,EACPA,GAAIqC,EAAKrC,GACTqC,KAAMA,EACNE,2BAA4BA,IAE9B,uBAAG9F,UAAU,OAAO8E,IAAKc,EAAKrC,IAA9B,kBAAiD,0BAAMA,GAAIqC,EAAKrC,GAAIlE,KAAMuG,EAAKC,MAAO6C,WAAS,EACxC1F,QAAS2E,EAAU3H,UAAU,QADnC,YAGrD,uBAAGhB,MAAO,CAACoB,MAAO,QAASuI,UAAW,WAAW,2BAAIb,S,QChChD,cAYQ,IAXHe,EAWE,EAXFA,0BAWE,IAVFrH,OACIC,EASF,EATEA,eACAC,EAQF,EAREA,qBACAC,EAOF,EAPEA,eACAC,EAMF,EANEA,cAEJE,EAIE,EAJFA,iBACAP,EAGE,EAHFA,cACAuH,EAEE,EAFFA,mBACAC,EACE,EADFA,eACE,EACwBlH,mBAAS,CAC/CsC,WAAY,GACZC,iBAAkB,GAClB7E,MAAO,GACPM,KAAM,KALQ,mBACXmJ,EADW,KACIC,EADJ,KAQZC,EAA2B,SAAAzJ,GAC7BwJ,EAAiB,eACVD,EADS,aAEZzF,GAAIwF,EAAexF,GACnBsC,MAAOkD,EAAelD,OACrBpG,EAAEC,OAAOL,KAAOI,EAAEC,OAAOJ,SAE9BiC,EAAc9B,EAAEC,OAAOJ,MAAOG,EAAEC,OAAOL,OAO3C,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAU6D,OAAQpB,EAAkBqB,OAAQ0F,GACxC,kBAAC,IAAD,CAAgB1F,OAAQ0F,GAAxB,kBACA,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAUjJ,KAAK,OAAOP,KAAK,aAAaY,MAAM,kBAAkBX,MAAO0J,EAAcrD,MAC3EnG,SAAU0J,IACnBzH,EAAeD,QAAU,kBAAC6B,EAAD,CAAclD,MAAOsB,EAAeD,SAC9D,kBAAC,IAAD,CAAcxB,UAAU,oBACpB,kBAAC,IAAD,CACIV,MAAO0J,EAAclJ,YACrBT,KAAK,mBACLG,SAAU0J,EACVtJ,KAAK,WACLK,MAAM,mBACNC,SAAO,KAGdwB,EAAqBF,QAAU,kBAAC6B,EAAD,CAAclD,MAAOuB,EAAqBF,SAC1E,kBAAC,IAAD,CAAU5B,KAAK,OAAOP,KAAK,QAAQY,MAAM,2BAC/BX,MAAO0J,EAAcG,WAAY3J,SAAU0J,IACpDvH,EAAeH,QAAU,kBAAC6B,EAAD,CAAclD,MAAOwB,EAAeH,SAC9D,kBAAC,IAAD,CAAU5B,KAAK,OAAOP,KAAK,OAAOY,MAAM,0BAC9BX,MAAO0J,EAAcI,UAAW5J,SAAU0J,IACnDtH,EAAcJ,QAAU,kBAAC6B,EAAD,CAAclD,MAAOyB,EAAcJ,UAEhE,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAQpB,MAAM,YAAY4C,QAAS6F,GAAnC,SACA,kBAAC,IAAD,CAAQlF,SAAUlC,EAAemC,aAAelC,EAAqBkC,aAAejC,EAAeiC,aAAehC,EAAcgC,YACxHxD,MAAM,UACN4C,QAnCU,WAC9B8F,EAAmBE,GACnBH,MA+BY,oBC1DL,WAAApI,GAEX,IAAM4I,EAAY,CACd3B,OAAQjH,EAAMiH,OACdI,aAAcrH,EAAMqH,aACpBtG,OAAQf,EAAMe,OACdgD,aAAc/D,EAAM+D,aACpBoE,cAAenI,EAAMmI,cACrBG,eAAgBtI,EAAMsI,eACtBjH,iBAAkBrB,EAAMqB,kBAEtBwH,EAAa,CACfvE,YAAatE,EAAMsE,YACnB1D,WAAYZ,EAAMY,WAClBkF,UAAW9F,EAAM8F,UACjBP,SAAUvF,EAAMuF,SAChBC,WAAYxF,EAAMwF,WAClB4B,YAAapH,EAAMoH,YACnB0B,oBAAqB9I,EAAM8I,oBAC3BrD,SAAUzF,EAAMyF,SAChByB,SAAUlH,EAAMkH,SAChBC,SAAUnH,EAAMmH,SAChBkB,mBAAoBrI,EAAMqI,mBAC1BvH,cAAed,EAAMc,cACrBD,YAAab,EAAMa,YACnBkI,gBAAiB/I,EAAM+I,gBACvBC,gBAAiBhJ,EAAMgJ,iBAE3B,OACI,6BACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAQzJ,UAAU,iBACd,8CAGR,kBAAC,EAAD,CACIwB,OAAQ6H,EAAU7H,OAClBD,cAAe+H,EAAW/H,cAC1BO,iBAAkBuH,EAAUvH,iBAC5B+G,0BAA2BS,EAAWE,gBACtC9B,OAAQ2B,EAAU3B,OAClBqB,eAAgBM,EAAUN,eAC1BD,mBAAoBQ,EAAWR,qBAEnC,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAQ9I,UAAU,sBACd,kBAAC,IAAD,KACI,kBAAC,EAAD,CACIwB,OAAQ6H,EAAU7H,OAClBD,cAAe+H,EAAW/H,cAC1BF,WAAYiI,EAAWjI,WACvBC,YAAagI,EAAWhI,eAGhC,kBAAC,IAAD,KACI,kBAAC,EAAD,CACIE,OAAQ6H,EAAU7H,OAClBgD,aAAc6E,EAAU7E,aACxBjD,cAAe+H,EAAW/H,cAC1BwD,YAAauE,EAAWvE,YACxB8C,YAAayB,EAAWzB,YACxBvG,YAAagI,EAAWhI,eAGhC,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAQ0B,QAASsG,EAAWC,oBAAqBvJ,UAAU,wBAA3D,mBAEJ,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAQ0J,KAAK,gDAAgD1J,UAAU,wBAAvE,oBAMZ,kBAAC2J,EAAD,eACI7B,aAAcuB,EAAUvB,aACxBhC,2BAA4BwD,EAAWG,iBACnCJ,EACAC,IAER,kBAACM,EAAD,eACI9B,aAAcuB,EAAUvB,aACxBhC,2BAA4BwD,EAAWG,iBACnCJ,EACAC,M,qCC5FL,G,MAAA,SAACO,GAGZ,GAAW,MAAPA,EAAa,OAAO,EAIxB,GAAIA,EAAIvB,OAAS,EAAM,OAAO,EAC9B,GAAmB,IAAfuB,EAAIvB,OAAe,OAAO,EAK9B,GAAmB,kBAARuB,EAAkB,OAAO,EAKpC,IAAK,IAAI/E,KAAO+E,EACZ,GAAIC,eAAeC,KAAKF,EAAK/E,GAAM,OAAO,EAG9C,OAAO,ICtBI,WAACzE,EAAK2J,EAAGC,GACpB,IAAIC,EAAO7J,EAAI2J,GAGf,OAFA3J,EAAI2J,GAAK3J,EAAI4J,GACb5J,EAAI4J,GAAKC,EACF7J,GCJI,WAAChB,EAAMC,EAAOgJ,GACzB,IAAM6B,EAAc,mBACdC,EAAmB,cACzB,OAAQ/K,GACJ,IAAK,cACD,MAAO,CACHmC,OACIiD,MAAMnF,IAAoB,KAAVA,EACV,4BACA+K,SAAS/K,IAAU,EACnB,6BACA+K,SAAS/K,GAASgJ,EAAS,EAA3B,gCAC6BA,EAAS,EADtC,KAEI,GACd1E,YACIa,MAAMnF,IAAoB,KAAVA,GAAgB+K,SAAS/K,IAAU,GAAK+K,SAAS/K,GAASgJ,EAAS,GAE/F,IAAK,cACD,MAAO,CACH9G,OACKlC,EAAMgL,MAAMH,GAEP7K,EAAMgJ,OAAS,GACX,yBACA,GAHJ,8CAIV1E,aACKtE,EAAMgL,MAAMH,IAAgB7K,EAAMgJ,OAAS,IAExD,IAAK,aACD,MAAO,CACH9G,OACKlC,EAAMgL,MAAMH,GAEP7K,EAAMgJ,OAAS,GACf,yBACA,GAHA,8CAIV1E,aACKtE,EAAMgL,MAAMH,IAAgB7K,EAAMgJ,OAAS,IAExD,IAAK,mBACD,MAAO,CACH9G,OACIlC,EAAMgJ,QAAU,IACV,+CACA,GACV1E,YACItE,EAAMgJ,QAAU,KAE5B,IAAK,QACD,MAAO,CACH9G,OACKlC,EAAMgL,MAAMF,GAEP9K,EAAMgJ,OAAS,EACf,0BACA,GAHA,8CAIV1E,aACKtE,EAAMgL,MAAMF,IAAqB9K,EAAMgJ,OAAS,GAE7D,IAAK,OACD,MAAO,CACH9G,OACKlC,EAAMgL,MAAMF,GAEP9K,EAAMgJ,OAAS,EACf,yBACA,GAHA,8CAIV1E,aACKtE,EAAMgL,MAAMF,IAAqB9K,EAAMgJ,OAAS,GAE7D,QACI,MAAO,CACH9G,OAAS,GACToC,aAAa,KC7DvB2G,EAAgB,CAClB,CACIlL,KAAM,OACNiF,MAAO,EACPqB,MAAO,QACPpC,GAAIiH,MACJnC,MAAO,IAEX,CACIhJ,KAAM,cACNiF,MAAO,EACPqB,MAAO,cACPpC,GAAIiH,MACJnC,MAAO,IAGX,CACIhJ,KAAM,SACNiF,MAAO,EACPqB,MAAO,YACPpC,GAAIiH,MACJnC,MAAO,IAGX,CACIhJ,KAAM,OACNiF,MAAO,EACPqB,MAAO,YACPpC,GAAIiH,MACJnC,MAAO,IAEX,CACIhJ,KAAM,QACNiF,MAAO,EACPqB,MAAO,QACPpC,GAAIiH,MACJnC,MAAO,KAIToC,EAAgB,CAClBxF,gBAAiB,CACbzD,OAAQ,GACRoC,aAAa,GAEjBnC,eAAgB,CACZD,OAAQ,GACRoC,aAAa,GAEjBoB,gBAAiB,CACbxD,OAAQ,GACRoC,aAAa,GAEjBlC,qBAAsB,CAClBF,OAAQ,GACRoC,aAAa,GAEjBjC,eAAgB,CACZH,OAAQ,GACRoC,aAAa,GAEjBhC,cAAe,CACXJ,OAAQ,GACRoC,aAAa,IAuSN8G,MAnSf,WAAgB,IAAD,EAEa7I,mBAAS,IAFtB,mBAEJ8I,EAFI,KAEEC,EAFF,OAGiB/I,mBAAS0I,GAH1B,mBAGJ7C,EAHI,KAGImD,EAHJ,OAI2BhJ,mBAAS4I,GAJpC,mBAIJK,EAJI,KAISC,EAJT,OAK6BlJ,mBAAS,YAAImJ,MAAMT,EAAcjC,QAAQ2C,SALtE,mBAKJzG,EALI,KAKU0G,EALV,OAM+BrJ,mBAAS,IANxC,mBAMJ+G,EANI,KAMWuC,EANX,OAOqCtJ,oBAAS,GAP9C,mBAOJC,EAPI,KAOcC,EAPd,OAQiCF,mBAAS,IAR1C,mBAQJkH,EARI,KAQYqC,EARZ,KAwNLC,EAAsB,SAAA5L,GACxB,IAAI6L,EACE/H,EAAK9D,EAAEC,OAAOC,aAAa,MAC3BN,EAAOI,EAAEC,OAAOC,aAAa,QAC7BK,EAAYP,EAAEC,OAAOC,aAAa,SAAS4L,MAAM,KAAK,GACrCD,EAAT,SAAdtL,EAEA6K,GAAU,SAAAnD,GAAM,OAAIA,EAAO/C,KAAI,SAAAkB,GAAK,OAChCA,EAAMxG,OAASA,EAAf,eAGWwG,EAHX,CAIQwC,MAAOxC,EAAMwC,MAAM1D,KAAI,SAAAiB,GAAI,OAAIA,EAAKrC,KAAOA,EAAZ,eAGpBqC,EAHoB,CAIvB4C,WAAY8C,IAGhB1F,OAIRC,QAGL+C,EAAcN,OAAS,GACtB6C,GAAiB,SAAAvC,GAAa,OAAIA,EAAcjE,KAAI,SAAAiB,GAAI,OAAIA,EAAKrC,KAAOA,EAAZ,eAGjDqC,EAHiD,CAIpD4C,WAAY8C,IAGhB1F,SASN4F,EAAmB,CACrBzG,YAhP0B,SAAAc,GAC1B,IAAIQ,EAAQgE,SAASxE,EAAMvB,OAAS,EAC/BmH,EAAQ5F,KACTgF,GAAU,SAAAnD,GAAM,4BACTA,EAAOgE,MAAM,EAAGrF,IADP,CAEZsF,OAAOC,OAAO,GAAdD,OAAA,IAAAA,CAAA,GAEW9F,EAFX,CAGQtC,GAAIiH,MACJnL,KAAMwG,EAAMF,MAAMkG,cAClBxD,MAAO,OAPH,YASTX,EAAOgE,MAAMrF,QAEpBwE,GAAU,SAAAnD,GAAM,OAAIA,EAAO/C,KAAI,SAACkB,EAAOtC,GAAR,sBAAoBsC,EAApB,CAA2BvB,MAAOf,UACjE2H,GAAgB,SAAA1G,GAAY,OAAI,YAAIA,GAAcsH,OAAOtH,EAAa8D,aAkO1EjH,WAzKyB,SAAAuE,IACH,IAAlB6F,EAAQ7F,GAAgBiF,GAAU,SAAAnD,GAAM,OAAIA,EAAO/C,KAAI,SAAAkB,GAAK,MAC7C,SAAfA,EAAMxG,KAAN,eAGWwG,EAHX,CAIQwC,MAAOxC,EAAMwC,MAAMyD,OAAZ,eAEIlG,EAFJ,CAGCrC,GAAIiH,MACJ3E,MAAO,OACP2C,YAAY,OAKxB3C,QAGH+E,EAAQ,uBAuJb5E,SAjIiC,SAAAvG,GACjC,IAAM8D,EAAK9D,EAAEC,OAAOC,aAAa,MAC3BwG,EAAY1G,EAAEC,OAAOC,aAAa,aAClCyF,EAAa3F,EAAEC,OAAOC,aAAa,SACnCoM,EAAarE,EAAOsE,MAAK,SAAAnG,GAAK,OAAIA,EAAMvB,QAAU+F,SAASjF,MAAaiD,MAAM2D,MAAK,SAAApG,GAAI,OAAIA,EAAKrC,KAAOA,KAG7GsH,GAAU,SAAAnD,GAAM,OAAIA,EAAO/C,KAAI,SAAAkB,GAAK,OAChCA,EAAMvB,QAAU+F,SAASjF,GAAzB,eAGWS,EAHX,CAIQwC,MAAOxC,EAAMwC,MAAM4D,QAAO,SAAArG,GAAI,OAAIA,EAAKrC,KAAOA,OAGlDsC,QAKRgF,GAAU,SAAAnD,GAAM,OAAIA,EAAO/C,KAAI,SAAAkB,GAAK,OAChCA,EAAMvB,QAAU+F,SAASjF,GAAc,GAAmB,UAAde,EAA5C,eAGWN,EAHX,CAIQwC,MAAOxC,EAAMwC,MAAMyD,OAAZ,eAAuBC,EAAvB,CAAmClG,MAAOA,EAAMxG,UAEzDwG,QAGVgF,GAAU,SAAAnD,GAAM,OAAIA,EAAO/C,KAAI,SAAAkB,GAAK,OAChCA,EAAMvB,QAAU+F,SAASjF,GAAc,GAAmB,SAAde,EAA5C,eAGWN,EAHX,CAIQwC,MAAOxC,EAAMwC,MAAMyD,OAAZ,eAAuBC,EAAvB,CAAmClG,MAAOA,EAAMxG,UAEzDwG,SA6FV+B,SAxFuB,SAACsE,EAAYC,EAAW5I,GAC/C,IAAMqE,EAAWF,EAAOsE,MAAK,SAAAnG,GAAK,OAAIA,EAAMxG,OAAS8M,KAAW9D,MAAM2D,MAAK,SAAApG,GAAI,OAAIA,EAAKrC,KAAOA,KAE/FsH,GAAU,SAAAnD,GAAM,OAAIA,EAAO/C,KAAI,SAAAkB,GAAK,OAChCA,EAAMxG,OAAS8M,GAA4B,OAAfD,EAA5B,eAGWrG,EAHX,CAIQwC,MAAOxC,EAAMwC,MAAM4D,QAAO,SAAArG,GAAI,OAAIA,EAAKrC,KAAOA,OAGlDsC,QAGRgF,GAAU,SAAAnD,GAAM,OAAIA,EAAO/C,KAAI,SAAAkB,GAAK,OAC5BA,EAAMxG,OAAS6M,EAAf,eAGOrG,EAHP,CAIIwC,MAAOxC,EAAMwC,MAAMyD,OAAZ,eAAuBlE,EAAvB,CAAiC/B,MAAOA,EAAMxG,UAEvDwG,SAoEVI,WA/D0B,SAAAxG,GAC1BoL,GAAU,SAAAnD,GAAM,OAAIA,EAAO/C,KAAI,SAAAkB,GAAK,OAC5BA,EAAMxG,OAASI,EAAEC,OAAOC,aAAa,QAArC,eAGWkG,EAHX,CAIQwC,MAAOxC,EAAMwC,MAAM4D,QAAO,SAAArG,GAAI,OAAIA,EAAKrC,KAAO9D,EAAEC,OAAO6D,QAG3DsC,QAGT+C,EAAcN,OAAS,GAAG6C,EAAiBvC,EAAcqD,QAAO,SAAArG,GAAI,OAAIA,EAAKrC,KAAO9D,EAAEC,OAAO6D,QAoDhG2C,SAAUmF,EACV1D,SAAU0D,EACVvC,mBA7M8B,SAAAsD,GAC9BvB,GAAU,SAAAnD,GAAM,OAAIA,EAAO/C,KAAI,SAAAkB,GAAK,OAChCA,EAAMxG,OAAS+M,EAAavG,MAA5B,eAGWA,EAHX,CAIQwC,MAAOxC,EAAMwC,MAAM1D,KAAI,SAAA0H,GAAQ,OAAIA,EAAS9I,KAAO6I,EAAa7I,GAA7B,eACzB8I,EADyB,GACZD,GAChBC,OAIXxG,QAGL+C,EAAcN,OAAS,GAAG6C,EAAiBvC,EAAcjE,KAAI,SAAA0H,GAAQ,OAAIA,EAAS9I,KAAO6I,EAAa7I,GAA7B,eAClE8I,EADkE,GACrDD,GAChBC,OA6LPxE,YAzLuB,SAAApI,GACvB,IAAI8D,EAAK9D,EAAEC,OAAO6D,GAClBsH,GAAU,SAAAnD,GAAM,OAAIA,EAAOuE,QAAO,SAAApG,GAAK,OAAIA,EAAMtC,KAAOA,QACxDsH,GAAU,SAAAnD,GAAM,OAAIA,EAAO/C,KAAI,SAACkB,EAAOtC,GAAR,sBAAoBsC,EAApB,CAA2BvB,MAAOf,UACjE2H,GAAgB,SAAA1G,GAAY,OAAI,YAAIA,GAAcyH,QAAO,SAAAK,GAAI,OAAIA,IAAS5E,EAAOY,OAAS,SAsL1F/G,cArO6B,SAAChB,EAAOlB,GACxB,gBAATA,GAAwB0L,GAAe,SAAAD,GAAW,sBAAUA,EAAV,CAAuB9F,gBAAiBuH,EAAkBlN,EAAMkB,EAAOmH,EAAOY,aACvH,gBAATjJ,GAAwB0L,GAAe,SAAAD,GAAW,sBAAUA,EAAV,CAAuB7F,gBAAiBsH,EAAkBlN,EAAMkB,EAAOmH,EAAOY,aACvH,eAATjJ,GAAuB0L,GAAe,SAAAD,GAAW,sBAAUA,EAAV,CAAuBrJ,eAAgB8K,EAAkBlN,EAAMkB,EAAOmH,EAAOY,aACrH,qBAATjJ,GAA6B0L,GAAe,SAAAD,GAAW,sBAAUA,EAAV,CAAuBpJ,qBAAsB6K,EAAkBlN,EAAMkB,EAAOmH,EAAOY,aACjI,UAATjJ,GAAkB0L,GAAe,SAAAD,GAAW,sBAAUA,EAAV,CAAuBnJ,eAAgB4K,EAAkBlN,EAAMkB,EAAOmH,EAAOY,aAChH,SAATjJ,GAAiB0L,GAAe,SAAAD,GAAW,sBAAUA,EAAV,CAAuBlJ,cAAe2K,EAAkBlN,EAAMkB,EAAOmH,EAAOY,cAgO3HhH,YAlN0B,kBAAMyJ,EAAeN,IAmN/ClE,UA7JgC,SAAA9G,GAChC,IAAMwI,EAAUxI,EAAEC,OAAO6D,GACnB4C,EAAY1G,EAAEC,OAAOC,aAAa,QAClCuM,EAAazM,EAAEC,OAAOC,aAAa,SAEzCkL,GAAU,SAAAnD,GAAM,OAAI,YAAIA,GAAQ/C,KAAI,SAAAkB,GAChC,GAAIA,EAAMxG,OAAS6M,EAAY,CAC3B,IAAMM,EAAS3G,EAAMwC,MAAMoE,WAAU,SAAA7G,GAAI,OAAIA,EAAKrC,KAAO0E,KACnDI,EACAqE,EAAkB7G,EAAMwC,MAAOmE,EADT,OAAdrG,EAC8BqG,EAAS,EACTA,EAAS,GACrD,OAAO,eAAK3G,EAAZ,CAAmBwC,UAEnB,OAAOxC,SAiJf0D,oBA/NqC,WACrC4B,EAAiB,IACjBzD,EAAO/C,KAAI,SAACkB,GAAD,OACHA,EAAMwC,MAAMsE,SAAQ,SAAA/G,GAChB,OAAIA,EAAKpC,cAAsB2H,GAAiB,SAAAvC,GAAa,4BAAQA,GAAR,CAAuBhD,OACxE,YA2NxB4D,gBA/P8B,kBAAMzH,GAAqBD,IAgQzD2H,gBAvQ+B,SAAAhK,GAC/B,IAAMJ,EAAOI,EAAEC,OAAOC,aAAa,QAC7B4D,EAAK9D,EAAEC,OAAO6D,GAChBA,GAAI6H,EAAkB1D,EAAOsE,MAAK,SAAAnG,GAAK,OAAIA,EAAMxG,OAASA,KAAMgJ,MAAM2D,MAAK,SAAApG,GAAI,OAAIA,EAAKrC,KAAOA,MACnGxB,GAAqBD,KAsQnB8K,EAAmB,CACrBlF,OAAQA,EACRI,aAAc6C,EACdnJ,OAAQsJ,EACRtG,aAAcA,EACdoE,cAAeA,EACfG,eAAgBA,EAChBjH,iBAAkBA,GAGtB,OAAO,kBAAC,EAAD,iBAAU0J,EAAsBoB,KC5W9BC,EAAU,CACnBC,SAAUC,IAAUC,WACpBlJ,QAAS,IACTmJ,OAAQ,OACRC,eAAgB,CACZjK,OAAQ,MAEZkK,WAAYC,IAAYC,O,QCF5BC,IAASC,OACL,kBAAC,IAAD,eAAeC,SAAUC,KAAmBZ,GACxC,kBAAC,EAAD,OACczF,SAASC,eAAe,W","file":"static/js/main.43c91a97.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { MDBInputGroup, MDBInput } from \"mdbreact\";\r\nexport default ( { handleDelegateNameChange, fullname } ) => {\r\n\r\n    const handleFirstNameInputChange = e => handleDelegateNameChange(e.target.getAttribute('name'), e.target.value);\r\n    const handleLastNameInputChange  = e => handleDelegateNameChange(e.target.getAttribute('name'), e.target.value);\r\n\r\n    return (\r\n        <MDBInputGroup style={{ marginBottom: 10 }}\r\n            prepend=\"Delegated to: \"\r\n            inputs={\r\n                <>\r\n                    <MDBInput noTag name=\"first\" value={fullname.first} onChange={handleFirstNameInputChange} type=\"text\" />\r\n                    <MDBInput noTag name=\"last\" value={fullname.last} onChange={handleLastNameInputChange} type=\"text\" />\r\n                </>\r\n            }\r\n        />\r\n    );\r\n}","import React from 'react';\r\nimport { MDBInput, MDBContainer } from 'mdbreact';\r\n\r\nexport default ({ description, descriptionInputChange }) =>\r\n    <MDBContainer className='task-description'>\r\n        <MDBInput\r\n            value={description}\r\n            name='task_description'\r\n            onChange={descriptionInputChange}\r\n            type=\"textarea\"\r\n            label=\"Task Description\"\r\n            outline\r\n        />\r\n    </MDBContainer>\r\n","import React from 'react';\r\nimport { MDBContainer, MDBAlert } from 'mdbreact';\r\n\r\nexport default ({ error }) => (\r\n        <MDBContainer>\r\n            <MDBAlert color=\"danger\" >\r\n                {error}\r\n            </MDBAlert>\r\n        </MDBContainer>\r\n    );\r\n\r\n","export default arr => arr.some(input => input === \" \" || input === \"\" || input == null);","import React, { Component } from \"react\";\r\nimport Switch from \"react-switch\";\r\nimport { MDBRow, MDBCol } from \"mdbreact\";\r\n\r\nexport default class SwitchButton extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { checked: false };\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    handleChange(checked) {\r\n        this.setState({ checked });\r\n        this.props.switchPriority(checked);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <label>\r\n                <MDBRow>\r\n                    <MDBCol md=\"2\">\r\n                        <Switch onChange={this.handleChange} checked={this.state.checked} />\r\n                    </MDBCol>\r\n                    <MDBCol md=\"10\">\r\n                        <span style={{ marginLeft: 15, fontSize: 20 }}>Please, select if this task is priority</span>\r\n                    </MDBCol>\r\n                </MDBRow>\r\n            </label>\r\n        );\r\n    }\r\n}","import React, {useState, useEffect, useCallback} from 'react';\r\nimport { MDBBtn, MDBModal, MDBModalBody, MDBModalHeader, MDBModalFooter, MDBInput } from 'mdbreact';\r\nimport InputForm from './InputForm';\r\nimport DescriptionTaskInput from \"./DescriptionTaskInput\";\r\nimport ErrorMessage from \"../board_modal/ErrorMessage\";\r\nimport ValidateUserBlankInput from '../../helpers/ValidateUserBlankInput';\r\nimport {useAlert} from 'react-alert';\r\nimport SwitchButton from \"./ToggleSwitchPriority\";\r\n\r\nexport default ({\r\n                    createTask,\r\n                    resetErrors,\r\n                    validateInput,\r\n                    errors: {\r\n                        taskTitleError,\r\n                        taskDescriptionError,\r\n                        firstNameError,\r\n                        lastNameError\r\n                    }\r\n                }) => {\r\n    const [modalButtonClick, setModalButtonClick] = useState(false);\r\n    const [taskTitle, setTaskTitle] = useState(\"\");\r\n    const [taskDescription, setTaskDescription] = useState(\"\");\r\n    const [highTaskPriority, setHighTaskPriority] = useState(false);\r\n    const [delegateName, setDelegateName] = useState({\r\n        first: \"\",\r\n        last: \"\"\r\n    });\r\n    const [createNewTask, setCreateNewTask] = useState({});\r\n\r\n    const handleTaskTitleChange = e => {\r\n        const {value, name} = e.target;\r\n        validateInput(value, name);\r\n        setTaskTitle(value);\r\n    }\r\n\r\n    const handleHighTaskPrioritySwitch = task_priority => {\r\n        setHighTaskPriority(task_priority);\r\n    }\r\n\r\n    const handleTaskDescriptionChange = e => {\r\n        const {value, name} = e.target;\r\n        validateInput(value, name);\r\n        setTaskDescription(value);\r\n    }\r\n    const handleDelegateNameChange = (attribute, value) => {\r\n        if (attribute === \"first\") {\r\n            validateInput(value, attribute);\r\n            setDelegateName({...delegateName, first: value});\r\n        }\r\n        if (attribute === \"last\") {\r\n            validateInput(value, attribute);\r\n            setDelegateName({...delegateName, last: value});\r\n        }\r\n    }\r\n\r\n    const alert = useAlert();\r\n\r\n    const handleStoreTaskItem = () => {\r\n        if (ValidateUserBlankInput(\r\n            [\r\n                taskTitle,\r\n                taskDescription,\r\n                delegateName.first,\r\n                delegateName.last\r\n            ])) {\r\n            alert.error(<div style={{color: 'red', fontSize: 15}}>Please, Fill Blank Fields...</div>, {\r\n                timeout: 5000,\r\n                onOpen: () => {\r\n                    console.log('hey')\r\n                },\r\n                onClose: () => {\r\n                    console.log('closed')\r\n                }\r\n            });\r\n        } else {\r\n            setCreateNewTask({\r\n                ...createNewTask,\r\n                task_title: taskTitle,\r\n                task_description: taskDescription,\r\n                task_priority: highTaskPriority,\r\n                first: delegateName.first,\r\n                last: delegateName.last\r\n            });\r\n            setModalButtonClick(!modalButtonClick);\r\n            setHighTaskPriority(false);\r\n        }\r\n    };\r\n\r\n    const stableDispatch = useCallback(createTask, []);\r\n\r\n    useEffect(() => {\r\n        stableDispatch(createNewTask);\r\n    }, [stableDispatch, createNewTask]);\r\n\r\n\r\n    const handleToggleModal = () => {\r\n        setTaskTitle('');\r\n        setTaskDescription('');\r\n        setDelegateName({\r\n                first: \"\",\r\n                last: \"\"\r\n            }\r\n        );\r\n        setModalButtonClick(!modalButtonClick);\r\n        resetErrors();\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <MDBBtn className='start-modal-button' onClick={handleToggleModal}>CREATE TASK</MDBBtn>\r\n            <MDBModal style={{zIndex: 1}} isOpen={modalButtonClick} toggle={handleToggleModal}>\r\n                <MDBModalHeader toggle={handleToggleModal}>Task Form</MDBModalHeader>\r\n                <MDBModalBody>\r\n                    <MDBInput label=\"Enter Task Title\" name='task_title' type='text' value={taskTitle}\r\n                              onChange={handleTaskTitleChange} size=\"md\"/>\r\n                    {taskTitleError.errors && <ErrorMessage error={taskTitleError.errors}/>}\r\n                    <DescriptionTaskInput\r\n                        id='textArea'\r\n                        description={taskDescription}\r\n                        descriptionInputChange={handleTaskDescriptionChange}\r\n                    />\r\n                    {taskDescriptionError.errors && <ErrorMessage error={taskDescriptionError.errors}/>}\r\n                    <SwitchButton switchPriority={handleHighTaskPrioritySwitch}/>\r\n                    <InputForm fullname={delegateName} handleDelegateNameChange={handleDelegateNameChange}/>\r\n                    {firstNameError.errors && <ErrorMessage error={firstNameError.errors}/>}\r\n                    {lastNameError.errors && <ErrorMessage error={lastNameError.errors}/>}\r\n                </MDBModalBody>\r\n                <MDBModalFooter>\r\n                    <MDBBtn className='row' color=\"secondary\" onClick={handleToggleModal}>Close</MDBBtn>\r\n                    <MDBBtn\r\n                        disabled={taskTitleError.inputStatus || taskDescriptionError.inputStatus || firstNameError.inputStatus || lastNameError.inputStatus}\r\n                        className='row'\r\n                        color=\"primary\" onClick={handleStoreTaskItem}>Create Task</MDBBtn>\r\n                </MDBModalFooter>\r\n            </MDBModal>\r\n        </>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { MDBInput } from 'mdbreact';\r\nimport \"./style.css\";\r\n\r\nexport default ({ boardOrderChange, order }) => {\r\n    return (\r\n        <MDBInput label=\"Enter Board Order\" name='board_order' type=\"text\" value={order} onChange={boardOrderChange}/>\r\n    );\r\n}\r\n\r\n","import React from 'react';\r\n\r\nexport default ({ newBoardPlaceOrder, boardsSchema }) => {\r\n    const order = isNaN(newBoardPlaceOrder) || newBoardPlaceOrder === 0 ? 1 : newBoardPlaceOrder;\r\n    return (\r\n        <div className='schema-container'>\r\n            <i style={{color: 'red', order: order, marginRight: 7}} className=\"fas fa-level-down-alt fa-3x\"/>\r\n\r\n            {boardsSchema.map((block, idx) => (\r\n                idx + 1 < order\r\n                    ?\r\n                    <div style={{order: idx + 1}} key={idx} className='block-element'>{idx + 1}</div>\r\n                    :\r\n                    <div style={{order: idx + 2}} key={idx} className='block-element'>{idx + 1}</div>\r\n                )\r\n            )}\r\n        </div>\r\n    );\r\n}","import React, {useState, useEffect, useCallback} from 'react';\r\nimport { MDBBtn, MDBModal, MDBModalBody, MDBModalHeader, MDBModalFooter, MDBInput } from 'mdbreact';\r\nimport OrderInput from \"./OrderInput\";\r\nimport ErrorMessage from \"./ErrorMessage\";\r\nimport { useAlert } from 'react-alert';\r\nimport ValidateUserBlankInput from '../../helpers/ValidateUserBlankInput';\r\nimport InsertionBoardSchema from \"./InsertionBoardSchema\";\r\n\r\nexport default ({ boardsSchema, createBoard, validateInput, errors: { boardOrderError, boardTitleError } }) => {\r\n    const [modalButtonClick, setModalButtonClick] = useState(false);\r\n    const [boardTitle, setBoardTitle] = useState(\"\");\r\n    const [boardOrder, setBoardOrder] = useState(0);\r\n    const [createNewBoard, setCreateNewBoard] = useState({});\r\n    const [newBoardPlaceOrder, setNewBoardPlaceOrder] = useState(1);\r\n\r\n    const alert = useAlert();\r\n\r\n    const handleStoreBoardItem = () => {\r\n        if(ValidateUserBlankInput([boardTitle])){\r\n            alert.error(<div style={{ color: 'red', fontSize: 15 }}>Please, Fill Blank Fields...</div>, {\r\n                timeout: 5000,\r\n                onOpen: () => {\r\n                    console.log('hey')\r\n                },\r\n                onClose: () => {\r\n                    console.log('closed')\r\n                }\r\n            });\r\n        }\r\n        else{\r\n            setCreateNewBoard({\r\n                ...createNewBoard,\r\n                title: boardTitle,\r\n                order: boardOrder\r\n            });\r\n            setModalButtonClick(!modalButtonClick);\r\n            setNewBoardPlaceOrder(1);\r\n        }\r\n    };\r\n    const handleBoardTitleChange = e => {\r\n        const { value, name } = e.target;\r\n        validateInput(value, name);\r\n        setBoardTitle(e.target.value);\r\n    }\r\n\r\n    const handleBoardOrderChange = e => {\r\n        const { value, name } = e.target;\r\n        validateInput(value, name);\r\n        setBoardOrder(value);\r\n        setNewBoardPlaceOrder(value);\r\n    }\r\n\r\n\r\n    const stableDispatch = useCallback(createBoard, []);\r\n\r\n    useEffect(() => {\r\n        stableDispatch(createNewBoard);\r\n    }, [stableDispatch, createNewBoard]);\r\n\r\n\r\n    const handleToggleModal = () => {\r\n        setBoardTitle('');\r\n        setBoardOrder(1);\r\n        setModalButtonClick(!modalButtonClick);\r\n        setNewBoardPlaceOrder(1);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <MDBBtn className='start-modal-button' onClick={handleToggleModal}>CREATE BOARD</MDBBtn>\r\n            <MDBModal isOpen={modalButtonClick} toggle={handleToggleModal}>\r\n                <MDBModalHeader toggle={handleToggleModal}>Board Form</MDBModalHeader>\r\n                <MDBModalBody>\r\n                    <div className=\"form-group\">\r\n                        <MDBInput label=\"Enter Board Title\" name='board_title' type='text' value={boardTitle} onChange={handleBoardTitleChange} size=\"md\" />\r\n                        {boardTitleError.errors && <ErrorMessage error={boardTitleError.errors}/>}\r\n                        <InsertionBoardSchema newBoardPlaceOrder={+newBoardPlaceOrder} boardsSchema={boardsSchema}/>\r\n                        <OrderInput order={boardOrder} boardOrderChange={handleBoardOrderChange}/>\r\n                        {boardOrderError.errors && <ErrorMessage error={boardOrderError.errors}/>}\r\n                    </div>\r\n                </MDBModalBody>\r\n                <MDBModalFooter>\r\n                    <MDBBtn className='row' color=\"secondary\" onClick={handleToggleModal}>Close</MDBBtn>\r\n                    <MDBBtn disabled={boardOrderError.inputStatus || boardTitleError.inputStatus} className='row' color=\"primary\" onClick={handleStoreBoardItem}>Create Board</MDBBtn>\r\n                </MDBModalFooter>\r\n            </MDBModal>\r\n        </>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport {MDBBtn, MDBBtnGroup} from \"mdbreact\";\r\n\r\nexport default ({task: { board, id }, boardOrder, handleFindForEditTaskModal, boardLength, moveTask, deleteTask, hideTask}) => {\r\n    return (\r\n        <MDBBtnGroup size=\"sm\" className=\"mb-4\">\r\n            <MDBBtn\r\n                disabled={boardOrder === 0}\r\n                className='task-button'\r\n                color=\"danger\"\r\n            >\r\n                <span\r\n                    id={id}\r\n                    onClick={moveTask}\r\n                    direction='left'\r\n                    order={boardOrder}\r\n                    name={`left-${board}`}\r\n                    className=\"fa fa-angle-double-left\"\r\n                    aria-hidden=\"true\"\r\n                >\r\n                </span>\r\n            </MDBBtn>\r\n            <MDBBtn className='task-button' color=\"pink\">\r\n                <span id={id} name={board} onClick={hideTask} className=\"hide fas fa-eye-slash\" aria-hidden=\"true\"/>\r\n            </MDBBtn>\r\n            <MDBBtn className='task-button' color=\"pink\">\r\n                <span id={id} name={board} onClick={handleFindForEditTaskModal} className=\"edit fas fa-edit\" aria-hidden=\"true\"/>\r\n            </MDBBtn>\r\n            <MDBBtn className='task-button' color=\"pink\">\r\n                <span id={id} name={board} onClick={deleteTask} className=\"delete fas fa-trash-alt\" aria-hidden=\"true\"/>\r\n            </MDBBtn>\r\n            <MDBBtn\r\n                className='task-button'\r\n                disabled={boardOrder === boardLength - 1}\r\n                color=\"danger\"\r\n            >\r\n                <span\r\n                    id={id}\r\n                    onClick={moveTask}\r\n                    direction='right'\r\n                    order={boardOrder}\r\n                    name={`right-${board}`}\r\n                    className=\"fa fa-angle-double-right\"\r\n                    aria-hidden=\"true\"\r\n                >\r\n                </span>\r\n            </MDBBtn>\r\n        </MDBBtnGroup>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport ButtonGroup from \"./ButtonGroup\";\r\nimport {MDBBtn, MDBRow, MDBCol, MDBContainer, MDBModal, MDBModalBody, MDBModalFooter, MDBModalHeader} from \"mdbreact\";\r\n\r\n\r\nexport default ({task, index, listLength, boardLength, swapTasks, handleFindForEditTaskModal, boardOrder, id, moveTask, editTask, deleteTask, hideTask}) => {\r\n\r\n    const [toggleModal, setToggleModal] = useState(false);\r\n    const dragTaskStart = e => {\r\n        const target = e.target;\r\n        e.dataTransfer.setData('task', target.id);\r\n    };\r\n\r\n    const DescriptionModal = () =>\r\n        <MDBContainer>\r\n            <MDBModal isOpen={toggleModal} toggle={handleToggleDescriptionModal} size=\"fluid\">\r\n                <MDBModalHeader toggle={handleToggleDescriptionModal}>{task.task_title}</MDBModalHeader>\r\n                <MDBModalBody>\r\n                    {task.task_description}\r\n                </MDBModalBody>\r\n                <MDBModalFooter>\r\n                    <MDBBtn color=\"secondary\" onClick={handleToggleDescriptionModal}>Close</MDBBtn>\r\n                </MDBModalFooter>\r\n            </MDBModal>\r\n        </MDBContainer>\r\n\r\n    const dragTaskOver = e => {\r\n        e.stopPropagation();\r\n    };\r\n\r\n    const handleOnMouseOver = e => {\r\n        let id = e.target.id;\r\n        if(id && document.getElementById(id).querySelector(\".task-details\") !== null) document.getElementById(id).querySelector(\".task-details\").innerHTML = 'Click Here...';\r\n\r\n    }\r\n    const handleOnMouseOff = e => {\r\n        let id = e.target.id;\r\n        if(id && document.getElementById(id).querySelector(\".task-details\") !== null) document.getElementById(id).querySelector(\".task-details\").innerHTML = 'Details...';\r\n    }\r\n\r\n    const handleToggleDescriptionModal = () => setToggleModal(!toggleModal)\r\n\r\n    return (\r\n        <MDBContainer\r\n            draggable='true'\r\n            name={task.board}\r\n            id={id}\r\n            onDragStart={dragTaskStart}\r\n            onDragOver={dragTaskOver}\r\n            className=\"d-flex flex-column task-card\"\r\n        >\r\n            <MDBBtn disabled={index === 0} name='up' board={task.board} id={id} className='up-button' onClick={swapTasks}>Up</MDBBtn>\r\n            <MDBRow>\r\n                <MDBCol size=\"8\">\r\n                    <h6 className=\"task-title\">{task.task_title}</h6>\r\n                </MDBCol>\r\n                {task.task_priority && <MDBCol className=\"priority\"><i className=\"fas fa-exclamation-triangle fa-2x\"></i></MDBCol>}\r\n            </MDBRow>\r\n            <span className=\"p-2 col-example text-left task-details\"\r\n                  id={id}\r\n                  onMouseOver={handleOnMouseOver}\r\n                  onMouseLeave={handleOnMouseOff}\r\n                  onClick={handleToggleDescriptionModal}\r\n            >\r\n                <i>Details...</i>\r\n            </span>\r\n            <DescriptionModal/>\r\n            <ButtonGroup\r\n                boardLength={boardLength}\r\n                boardOrder={boardOrder}\r\n                moveTask={moveTask}\r\n                editTask={editTask}\r\n                deleteTask={deleteTask}\r\n                hideTask={hideTask}\r\n                task={task}\r\n                handleFindForEditTaskModal={handleFindForEditTaskModal}\r\n            />\r\n            <MDBBtn disabled={index === listLength - 1} name='down' board={task.board} id={id} className='down-button' onClick={swapTasks}>Down</MDBBtn>\r\n\r\n        </MDBContainer>\r\n    )\r\n}","import React from 'react';\r\nimport TaskItem from \"./TaskItem\";\r\nimport {MDBCol, MDBContainer, MDBRow} from \"mdbreact\";\r\n\r\nexport default ({\r\n                    boards,\r\n                    moveTask,\r\n                    deleteTask,\r\n                    hideTask,\r\n                    editTask,\r\n                    swapTasks,\r\n                    showTask,\r\n                    dragTask,\r\n                    deleteBoard,\r\n                    boardMessage,\r\n                    handleFindForEditTaskModal\r\n                }) => {\r\n\r\n    const dropTask = e => {\r\n        e.preventDefault();\r\n        const task_id = e.dataTransfer.getData('task');\r\n        const task = document.getElementById(task_id);\r\n        dragTask(e.target.getAttribute('name'), task.getAttribute('name'), task_id);\r\n    };\r\n\r\n    const dragTaskOver = e => {\r\n        e.preventDefault();\r\n    };\r\n\r\n    const boardList = (list, order, length) => list.length\r\n        ? list.map((task, id) => task.visibility\r\n            ? <TaskItem\r\n                boardLength={length}\r\n                boardOrder={order}\r\n                moveTask={moveTask}\r\n                deleteTask={deleteTask}\r\n                hideTask={hideTask}\r\n                editTask={editTask}\r\n                listLength={list.length}\r\n                swapTasks={swapTasks}\r\n                key={id}\r\n                index={id}\r\n                id={task.id}\r\n                task={task}\r\n                handleFindForEditTaskModal={handleFindForEditTaskModal}\r\n            />\r\n            : <p className='show' key={task.id}>Hidden Task... <span id={task.id} name={task.board} autoFocus\r\n                                                                     onClick={showTask} className='show'>SHOW</span></p>\r\n        )\r\n        : <p style={{color: 'white', textAlign: 'center'}}><i>{boardMessage}</i></p>;\r\n\r\n    return (\r\n        <MDBContainer className=\"dashboard container-fluid\">\r\n            <MDBRow className=\"kanban-row\">\r\n                {boards.map(board => (\r\n                    <MDBCol\r\n                        key={board.id}\r\n                        onDrop={dropTask}\r\n                        name={board.name}\r\n                        onDragOver={dragTaskOver}\r\n                        className=\"kanban-col\"\r\n                        md=\"3\"\r\n                    >\r\n                        <div className='board-header container'>\r\n                            <div className='row'>\r\n\r\n                                <div className='col-10'>\r\n                                    <div className='row'>\r\n                                        <span className=\"task-list-title col-10\">{board.title}</span>\r\n                                        <span className='task-quantity col-1'>{board.tasks.length}</span>\r\n                                    </div>\r\n                                </div>\r\n                                <div className='col-2'>\r\n                                    <i\r\n                                        id={board.id}\r\n                                        onClick={deleteBoard}\r\n                                        className=\"far fa-calendar-times fa-2x\"/>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        {boardList(board.tasks, board.order, boards.length)}\r\n                    </MDBCol>\r\n                ))\r\n                }\r\n            </MDBRow>\r\n        </MDBContainer>\r\n    );\r\n}","import React from 'react';\r\nimport {MDBCol, MDBContainer, MDBRow} from \"mdbreact\";\r\nimport TaskItem from \"./TaskItem\";\r\n\r\nexport default ({\r\n                    priorityTasks,\r\n                    moveTask,\r\n                    deleteTask,\r\n                    hideTask,\r\n                    editTask,\r\n                    swapTasks,\r\n                    showTask,\r\n                    boardMessage,\r\n                    handleFindForEditTaskModal\r\n                }) => {\r\n\r\n    const priorityTasksList = (list, order, length) => list.length\r\n        ? list.map((task, id) => task.visibility\r\n            ? <TaskItem\r\n                boardLength={length}\r\n                boardOrder={order}\r\n                moveTask={moveTask}\r\n                deleteTask={deleteTask}\r\n                hideTask={hideTask}\r\n                editTask={editTask}\r\n                listLength={list.length}\r\n                swapTasks={swapTasks}\r\n                key={id}\r\n                index={id}\r\n                id={task.id}\r\n                task={task}\r\n                handleFindForEditTaskModal={handleFindForEditTaskModal}\r\n            />\r\n            : <p className='show' key={task.id}>Hidden Task... <span id={task.id} name={task.board} autoFocus\r\n                                                                     onClick={showTask} className='show'>SHOW</span></p>\r\n        )\r\n        : <p style={{color: 'white', textAlign: 'center'}}><i>{boardMessage}</i></p>;\r\n    return (\r\n        <MDBContainer className=\"dashboard container-fluid\">\r\n            <MDBRow className=\"kanban-row\">\r\n                <MDBCol\r\n                    name='priority-list'\r\n                    className=\"kanban-col\"\r\n                    md=\"6\"\r\n                >\r\n                    <div className='board-header container'>\r\n                        <div className='row'>\r\n                            <div className='col-12'>\r\n                                <div className='row'>\r\n                                    <span className=\"task-list-title col-10\">High Priority List</span>\r\n                                    <span className='task-quantity col-1'>{priorityTasks.length}</span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    {priorityTasksList(priorityTasks, 0, 1)}\r\n                </MDBCol>\r\n            </MDBRow>\r\n        </MDBContainer>\r\n    );\r\n}\r\n","import React, {useState} from 'react';\r\nimport {MDBContainer, MDBBtn, MDBModal, MDBInput, MDBModalBody, MDBModalHeader, MDBModalFooter} from 'mdbreact';\r\nimport ErrorMessage from \"../board_modal/ErrorMessage\";\r\n\r\nexport default ({\r\n                    handleToggleEditTaskModal,\r\n                    errors: {\r\n                        taskTitleError,\r\n                        taskDescriptionError,\r\n                        firstNameError,\r\n                        lastNameError\r\n                    },\r\n                    modalButtonClick,\r\n                    validateInput,\r\n                    submitNewTaskItems,\r\n                    searchEditTask\r\n                }) => {\r\n    const [editTaskItems, setEditTaskItems] = useState({\r\n        task_title: \"\",\r\n        task_description: \"\",\r\n        first: \"\",\r\n        last: \"\"\r\n    })\r\n\r\n    const handleEditTaskItemChange = e => {\r\n        setEditTaskItems({\r\n            ...editTaskItems,\r\n            id: searchEditTask.id,\r\n            board: searchEditTask.board,\r\n            [e.target.name]: e.target.value\r\n        });\r\n        validateInput(e.target.value, e.target.name);\r\n    }\r\n    const handleEditTaskItemsSubmit = () => {\r\n        submitNewTaskItems(editTaskItems);\r\n        handleToggleEditTaskModal();\r\n    }\r\n\r\n    return (\r\n        <MDBContainer>\r\n            <MDBModal isOpen={modalButtonClick} toggle={handleToggleEditTaskModal}>\r\n                <MDBModalHeader toggle={handleToggleEditTaskModal}>Task Edit Form</MDBModalHeader>\r\n                <MDBModalBody>\r\n                    <MDBInput type='text' name='task_title' label=\"Edit Task Title\" value={editTaskItems.title}\r\n                              onChange={handleEditTaskItemChange}/>\r\n                    {taskTitleError.errors && <ErrorMessage error={taskTitleError.errors}/>}\r\n                    <MDBContainer className='task-description'>\r\n                        <MDBInput\r\n                            value={editTaskItems.description}\r\n                            name='task_description'\r\n                            onChange={handleEditTaskItemChange}\r\n                            type=\"textarea\"\r\n                            label=\"Task Description\"\r\n                            outline\r\n                        />\r\n                    </MDBContainer>\r\n                    {taskDescriptionError.errors && <ErrorMessage error={taskDescriptionError.errors}/>}\r\n                    <MDBInput type='text' name='first' label=\"Edit Delegate First Name\"\r\n                              value={editTaskItems.first_name} onChange={handleEditTaskItemChange}/>\r\n                    {firstNameError.errors && <ErrorMessage error={firstNameError.errors}/>}\r\n                    <MDBInput type='text' name='last' label=\"Edit Delegate Last Name\"\r\n                              value={editTaskItems.last_name} onChange={handleEditTaskItemChange}/>\r\n                    {lastNameError.errors && <ErrorMessage error={lastNameError.errors}/>}\r\n                </MDBModalBody>\r\n                <MDBModalFooter>\r\n                    <MDBBtn color=\"secondary\" onClick={handleToggleEditTaskModal}>Close</MDBBtn>\r\n                    <MDBBtn disabled={taskTitleError.inputStatus || taskDescriptionError.inputStatus || firstNameError.inputStatus || lastNameError.inputStatus}\r\n                            color=\"primary\"\r\n                            onClick={handleEditTaskItemsSubmit}\r\n                    >\r\n                        Save changes\r\n                    </MDBBtn>\r\n                </MDBModalFooter>\r\n            </MDBModal>\r\n        </MDBContainer>\r\n    );\r\n}","import React from 'react';\r\nimport TaskModalPage from '../task_modal/ModalPage';\r\nimport BoardModalPage from '../board_modal/ModalPage'\r\nimport NewKanbanDashboard from \"./NewKanbanDashboard\";\r\nimport PriorityOrderedTasks from \"./PriorityOrderedTasks\";\r\nimport EditTaskModalPage from \"../edit_modal/ModalPage\";\r\nimport {MDBBtn, MDBCol, MDBContainer, MDBRow} from \"mdbreact\";\r\n\r\nexport default props => {\r\n\r\n    const listProps = {\r\n        boards: props.boards,\r\n        boardMessage: props.boardMessage,\r\n        errors: props.errors,\r\n        boardsSchema: props.boardsSchema,\r\n        priorityTasks: props.priorityTasks,\r\n        searchEditTask: props.searchEditTask,\r\n        modalButtonClick: props.modalButtonClick\r\n    };\r\n    const eventProps = {\r\n        createBoard: props.createBoard,\r\n        createTask: props.createTask,\r\n        swapTasks: props.swapTasks,\r\n        moveTask: props.moveTask,\r\n        deleteTask: props.deleteTask,\r\n        deleteBoard: props.deleteBoard,\r\n        filterPriorityTasks: props.filterPriorityTasks,\r\n        hideTask: props.hideTask,\r\n        showTask: props.showTask,\r\n        dragTask: props.dragTask,\r\n        submitNewTaskItems: props.submitNewTaskItems,\r\n        validateInput: props.validateInput,\r\n        resetErrors: props.resetErrors,\r\n        toggleEditModal: props.toggleEditModal,\r\n        findTaskForEdit: props.findTaskForEdit\r\n    };\r\n    return (\r\n        <div>\r\n            <MDBContainer>\r\n                <MDBRow className='kanban-header'>\r\n                    <h1>Kanban Board</h1>\r\n                </MDBRow>\r\n            </MDBContainer>\r\n            <EditTaskModalPage\r\n                errors={listProps.errors}\r\n                validateInput={eventProps.validateInput}\r\n                modalButtonClick={listProps.modalButtonClick}\r\n                handleToggleEditTaskModal={eventProps.toggleEditModal}\r\n                boards={listProps.boards}\r\n                searchEditTask={listProps.searchEditTask}\r\n                submitNewTaskItems={eventProps.submitNewTaskItems}\r\n            />\r\n            <MDBContainer>\r\n                <MDBRow className=\"main-control-panel\">\r\n                    <MDBCol>\r\n                        <TaskModalPage\r\n                            errors={listProps.errors}\r\n                            validateInput={eventProps.validateInput}\r\n                            createTask={eventProps.createTask}\r\n                            resetErrors={eventProps.resetErrors}\r\n                        />\r\n                    </MDBCol>\r\n                    <MDBCol>\r\n                        <BoardModalPage\r\n                            errors={listProps.errors}\r\n                            boardsSchema={listProps.boardsSchema}\r\n                            validateInput={eventProps.validateInput}\r\n                            createBoard={eventProps.createBoard}\r\n                            deleteBoard={eventProps.deleteBoard}\r\n                            resetErrors={eventProps.resetErrors}\r\n                        />\r\n                    </MDBCol>\r\n                    <MDBCol>\r\n                        <MDBBtn onClick={eventProps.filterPriorityTasks} className='task-priority-button' >Priority Tasks</MDBBtn>\r\n                    </MDBCol>\r\n                    <MDBCol>\r\n                        <MDBBtn href=\"https://github.com/likejean/homework-6/issues\" className='report-issues-button' >Report Issues</MDBBtn>\r\n                    </MDBCol>\r\n                </MDBRow>\r\n\r\n            </MDBContainer>\r\n\r\n            <NewKanbanDashboard\r\n                boardMessage={listProps.boardMessage}\r\n                handleFindForEditTaskModal={eventProps.findTaskForEdit}\r\n                {...listProps}\r\n                {...eventProps}\r\n            />\r\n            <PriorityOrderedTasks\r\n                boardMessage={listProps.boardMessage}\r\n                handleFindForEditTaskModal={eventProps.findTaskForEdit}\r\n                {...listProps}\r\n                {...eventProps}\r\n            />\r\n        </div>\r\n    )\r\n}","export default (obj) => {\r\n\r\n    // null and undefined are \"empty\"\r\n    if (obj == null) return true;\r\n\r\n    // Assume if it has a length property with a non-zero value\r\n    // that that property is correct.\r\n    if (obj.length > 0)    return false;\r\n    if (obj.length === 0)  return true;\r\n\r\n    // If it isn't an object at this point\r\n    // it is empty, but it can't be anything *but* empty\r\n    // Is it empty?  Depends on your application.\r\n    if (typeof obj !== \"object\") return true;\r\n\r\n    // Otherwise, does it have any properties of its own?\r\n    // Note that this doesn't handle\r\n    // toString and valueOf enumeration bugs in IE < 9\r\n    for (var key in obj) {\r\n        if (hasOwnProperty.call(obj, key)) return false;\r\n    }\r\n\r\n    return true;\r\n}","export default (arr, a, b) => {\r\n    let temp = arr[a];\r\n    arr[a] = arr[b];\r\n    arr[b] = temp;\r\n    return arr;\r\n}","export default (name, value, length) => {\r\n    const titleFormat = /^[0-9A-Za-z\\s]+$/;\r\n    const personNameFormat = /^[a-zA-Z]+$/;\r\n    switch (name) {\r\n        case 'board_order':\r\n            return {\r\n                errors:\r\n                    isNaN(value) || value === \"\"\r\n                        ? 'Input must be an INTEGER!'\r\n                        : parseInt(value) <= 0\r\n                        ? 'Must be greater than zero!'\r\n                        : parseInt(value) > length + 1\r\n                            ? `Must be less or equal ${length + 1}!`\r\n                            : '',\r\n                inputStatus:\r\n                    isNaN(value) || value === \"\" || parseInt(value) <= 0 || parseInt(value) > length + 1\r\n            };\r\n        case 'board_title':\r\n            return {\r\n                errors:\r\n                    !value.match(titleFormat)\r\n                        ? 'Please, input alphanumeric characters only!'\r\n                        : value.length > 10\r\n                            ? 'This title is too long'\r\n                            : '',\r\n                inputStatus:\r\n                    !value.match(titleFormat) || value.length > 10\r\n            };\r\n        case 'task_title':\r\n            return {\r\n                errors:\r\n                    !value.match(titleFormat)\r\n                        ? 'Please, input alphanumeric characters only!'\r\n                        : value.length > 13\r\n                        ? 'This title is too long'\r\n                        : '',\r\n                inputStatus:\r\n                    !value.match(titleFormat) || value.length > 13\r\n            };\r\n        case 'task_description':\r\n            return {\r\n                errors:\r\n                    value.length >= 100\r\n                        ? 'Description must be less than 100 characters'\r\n                        : '',\r\n                inputStatus:\r\n                    value.length >= 100\r\n            };\r\n        case 'first':\r\n            return {\r\n                errors:\r\n                    !value.match(personNameFormat)\r\n                        ? 'Please, input alphabetical characters only!'\r\n                        : value.length < 3\r\n                        ? 'First name is too short'\r\n                        : '',\r\n                inputStatus:\r\n                    !value.match(personNameFormat) || value.length < 3\r\n            };\r\n        case 'last':\r\n            return {\r\n                errors:\r\n                    !value.match(personNameFormat)\r\n                        ? 'Please, input alphabetical characters only!'\r\n                        : value.length < 3\r\n                        ? 'Last name is too short'\r\n                        : '',\r\n                inputStatus:\r\n                    !value.match(personNameFormat) || value.length < 3\r\n            };\r\n        default:\r\n            return {\r\n                errors : '',\r\n                inputStatus: false\r\n            }\r\n    }\r\n}\r\n","import React, {useState} from 'react';\nimport Main from './components/main';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\nimport uuid from 'react-uuid';\nimport './App.css';\nimport isEmpty from './helpers/EmptyObject';\nimport SwapArrayElements from \"./helpers/SwapArrayElements\";\nimport ValidateUserInput from \"./helpers/ValidateUserInputChange\";\n\n\nconst initialBoards = [\n    {\n        name: 'todo',\n        order: 0,\n        title: 'To-Do',\n        id: uuid(),\n        tasks: []\n    },\n    {\n        name: 'in-progress',\n        order: 1,\n        title: 'In-Progress',\n        id: uuid(),\n        tasks: []\n\n    },\n    {\n        name: 'review',\n        order: 2,\n        title: 'To-Review',\n        id: uuid(),\n        tasks: []\n\n    },\n    {\n        name: 'done',\n        order: 3,\n        title: 'Completed',\n        id: uuid(),\n        tasks: []\n    },\n    {\n        name: 'extra',\n        order: 4,\n        title: 'Extra',\n        id: uuid(),\n        tasks: []\n    }\n];\n\nconst initialErrors = {\n    boardTitleError: {\n        errors: '',\n        inputStatus: false\n    },\n    taskTitleError: {\n        errors: '',\n        inputStatus: false\n    },\n    boardOrderError: {\n        errors: '',\n        inputStatus: false\n    },\n    taskDescriptionError: {\n        errors: '',\n        inputStatus: false\n    },\n    firstNameError: {\n        errors: '',\n        inputStatus: false\n    },\n    lastNameError: {\n        errors: '',\n        inputStatus: false\n    }\n}\n\nfunction App() {\n\n    const [note, setNote] = useState(\"\");\n    const [boards, setBoards] = useState(initialBoards);\n    const [inputErrors, setInputErrors] = useState(initialErrors);\n    const [boardsSchema, setBoardsSchema] = useState([...Array(initialBoards.length).keys()]);\n    const [priorityTasks, setPriorityTasks] = useState([]);\n    const [modalButtonClick, setModalButtonClick] = useState(false);\n    const [searchEditTask, setSearchEditTask] = useState({});\n\n\n    const handleFindForEditTaskModal = e => {\n        const name = e.target.getAttribute('name');\n        const id = e.target.id;\n        if (id) setSearchEditTask(boards.find(board => board.name === name).tasks.find(task => task.id === id));\n        setModalButtonClick(!modalButtonClick);\n    }\n\n    const handleToggleEditTaskModal = () => setModalButtonClick(!modalButtonClick);\n\n    const handleCreateNewBoard2 = board => {\n        let index = parseInt(board.order) - 1;\n        if (!isEmpty(board)) {\n            setBoards(boards => [\n                ...boards.slice(0, index),\n                Object.assign({},\n                    {\n                        ...board,\n                        id: uuid(),\n                        name: board.title.toLowerCase(),\n                        tasks: []\n                    }),\n                ...boards.slice(index)\n            ]);\n            setBoards(boards => boards.map((board, id) => ({...board, order: id })));\n            setBoardsSchema(boardsSchema => [...boardsSchema].concat(boardsSchema.length));\n        }\n    };\n\n\n    const handleValidateUserInput2 = (input, name) => {\n        if (name === 'board_order') setInputErrors(inputErrors => ({ ...inputErrors, boardOrderError: ValidateUserInput(name, input, boards.length)} ));\n        if (name === 'board_title') setInputErrors(inputErrors => ({ ...inputErrors, boardTitleError: ValidateUserInput(name, input, boards.length)} ));\n        if (name === 'task_title') setInputErrors(inputErrors => ({ ...inputErrors, taskTitleError: ValidateUserInput(name, input, boards.length)} ));\n        if (name === 'task_description') setInputErrors(inputErrors => ({ ...inputErrors, taskDescriptionError: ValidateUserInput(name, input, boards.length)} ));\n        if (name === 'first') setInputErrors(inputErrors => ({ ...inputErrors, firstNameError: ValidateUserInput(name, input, boards.length)} ));\n        if (name === 'last') setInputErrors(inputErrors => ({ ...inputErrors, lastNameError: ValidateUserInput(name, input, boards.length)} ));\n    };\n\n    const handleGeneratePriorityTasksList2 = () => {\n        setPriorityTasks([]);\n        boards.map((board) => (\n                board.tasks.forEach(task => {\n                    if (task.task_priority) return setPriorityTasks(priorityTasks => [...priorityTasks, task]);\n                    else return null;\n                })\n            )\n        );\n    };\n\n    const handleResetAllErrors2 = () => setInputErrors(initialErrors);\n\n    const handleSubmitNewTaskItems2 = revised_task => {\n        setBoards(boards => boards.map(board =>\n            board.name === revised_task.board\n                ?\n                {\n                    ...board,\n                    tasks: board.tasks.map(old_task => old_task.id === revised_task.id\n                        ? {...old_task, ...revised_task}\n                        :  old_task\n                    )\n                }\n                :\n                board\n            )\n        );\n        if(priorityTasks.length > 0) setPriorityTasks(priorityTasks.map(old_task => old_task.id === revised_task.id\n            ? {...old_task, ...revised_task}\n            :  old_task\n        ));\n    };\n\n    const handleDeleteBoard2 = e => {\n        let id = e.target.id;\n        setBoards(boards => boards.filter(board => board.id !== id));\n        setBoards(boards => boards.map((board, id) => ({...board, order: id })));\n        setBoardsSchema(boardsSchema => [...boardsSchema].filter(elem => elem !== boards.length - 1));\n\n    };\n\n\n    const handleCreateNewTask2 = task => {\n        if (isEmpty(task) !== true) setBoards(boards => boards.map(board =>\n            board.name === 'todo'\n                ?\n                {\n                    ...board,\n                    tasks: board.tasks.concat(\n                        {\n                            ...task,\n                            id: uuid(),\n                            board: \"todo\",\n                            visibility: true\n                        }\n                    )\n                }\n                :\n                board\n            )\n        )\n        else setNote('This list is empty');\n    };\n\n    const handleSwapTasksWithinBoard2 = e => {\n        const task_id = e.target.id;\n        const direction = e.target.getAttribute('name');\n        const board_name = e.target.getAttribute('board');\n\n        setBoards(boards => [...boards].map(board => {\n            if (board.name === board_name) {\n                const index1 = board.tasks.findIndex(task => task.id === task_id);\n                const tasks = direction === 'up'\n                    ? SwapArrayElements(board.tasks, index1,index1 - 1)\n                    : SwapArrayElements(board.tasks, index1,index1 + 1)\n                return { ...board, tasks }\n            }else{\n                return board;\n            }\n        }));\n    };\n\n\n    const handleMoveTaskBetweenBoards2 = e => {\n        const id = e.target.getAttribute('id');\n        const direction = e.target.getAttribute('direction');\n        const boardOrder = e.target.getAttribute('order');\n        const movingTask = boards.find(board => board.order === parseInt(boardOrder)).tasks.find(task => task.id === id);\n\n        ///remove a task....\n        setBoards(boards => boards.map(board =>\n            board.order === parseInt(boardOrder)\n                ?\n                {\n                    ...board,\n                    tasks: board.tasks.filter(task => task.id !== id)\n                }\n                :\n                board\n            )\n        );\n\n        ////Add a task......\n        setBoards(boards => boards.map(board =>\n            board.order === parseInt(boardOrder) + 1 && direction === 'right'\n                ?\n                {\n                    ...board,\n                    tasks: board.tasks.concat({...movingTask, board: board.name})\n                }\n                : board\n            )\n        );\n        setBoards(boards => boards.map(board =>\n            board.order === parseInt(boardOrder) - 1 && direction === 'left'\n                ?\n                {\n                    ...board,\n                    tasks: board.tasks.concat({...movingTask, board: board.name})\n                }\n                : board\n            )\n        );\n    };\n\n    const handleDragAndDrop2 = (board_name, task_name, id) => {\n        const dragTask = boards.find(board => board.name === task_name).tasks.find(task => task.id === id);\n\n        setBoards(boards => boards.map(board =>\n            board.name === task_name && board_name !== null\n                ?\n                {\n                    ...board,\n                    tasks: board.tasks.filter(task => task.id !== id)\n                }\n                :\n                board\n            )\n        );\n        setBoards(boards => boards.map(board =>\n                board.name === board_name\n                ?\n                {\n                    ...board,\n                    tasks: board.tasks.concat({...dragTask, board: board.name})\n                }\n                : board\n            )\n        );\n    };\n\n    const handleDeleteTaskItem2 = e => {\n        setBoards(boards => boards.map(board =>\n                board.name === e.target.getAttribute('name')\n                    ?\n                    {\n                        ...board,\n                        tasks: board.tasks.filter(task => task.id !== e.target.id)\n                    }\n                    :\n                    board\n            )\n        );\n        if(priorityTasks.length > 0) setPriorityTasks(priorityTasks.filter(task => task.id !== e.target.id));\n    };\n\n    const handleShowTaskItem2 = e => {\n        let visible;\n        const id = e.target.getAttribute('id');\n        const name = e.target.getAttribute('name');\n        const className = e.target.getAttribute('class').split(\" \")[0];\n        className === 'show' ? visible = true : visible = false;\n\n        setBoards(boards => boards.map(board =>\n            board.name === name\n                ?\n                {\n                    ...board,\n                    tasks: board.tasks.map(task => task.id === id\n                        ?\n                        {\n                            ...task,\n                            visibility: visible\n                        }\n                        :\n                        task\n                    )\n                }\n                :\n                board\n            )\n        );\n        if(priorityTasks.length > 0) {\n            setPriorityTasks(priorityTasks => priorityTasks.map(task => task.id === id\n                ?\n                {\n                    ...task,\n                    visibility: visible\n                }\n                :\n                task\n            ))\n        }\n    };\n\n    /////////////////////////////////////////////////////////////////\n    ////////////////////////////////////////////////////////////////////\n\n\n    const handleEventProps = {\n        createBoard: handleCreateNewBoard2,\n        createTask: handleCreateNewTask2,\n        moveTask: handleMoveTaskBetweenBoards2,\n        dragTask: handleDragAndDrop2,\n        deleteTask: handleDeleteTaskItem2,\n        hideTask: handleShowTaskItem2,\n        showTask: handleShowTaskItem2,\n        submitNewTaskItems: handleSubmitNewTaskItems2,\n        deleteBoard: handleDeleteBoard2,\n        validateInput: handleValidateUserInput2,\n        resetErrors: handleResetAllErrors2,\n        swapTasks: handleSwapTasksWithinBoard2,\n        filterPriorityTasks: handleGeneratePriorityTasksList2,\n        toggleEditModal: handleToggleEditTaskModal,\n        findTaskForEdit: handleFindForEditTaskModal\n    };\n\n    const handleStateProps = {\n        boards: boards,\n        boardMessage: note,\n        errors: inputErrors,\n        boardsSchema: boardsSchema,\n        priorityTasks: priorityTasks,\n        searchEditTask: searchEditTask,\n        modalButtonClick: modalButtonClick\n    };\n\n    return <Main {...handleEventProps} {...handleStateProps} />\n\n}\n\nexport default App;\n","import { transitions, positions } from 'react-alert';\r\n\r\nexport const options = {\r\n    position: positions.TOP_CENTER,\r\n    timeout: 5000,\r\n    offset: '20px',\r\n    containerStyle: {\r\n        zIndex: 9999,\r\n    },\r\n    transition: transitions.SCALE\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider as AlertProvider } from 'react-alert';\nimport App from './App';\nimport { options } from './helpers/AlertOptions';\nimport AlertTemplate from 'react-alert-template-basic';\n\nReactDOM.render(\n    <AlertProvider template={AlertTemplate} {...options}>\n        <App/>\n    </AlertProvider>, document.getElementById('root'));\n\n"],"sourceRoot":""}