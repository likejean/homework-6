{"version":3,"sources":["components/task_modal/InputForm.js","components/task_modal/DescriptionTaskInput.js","components/board_modal/ErrorMessage.js","helpers/ValidateUserBlankInput.js","components/task_modal/ModalPage.js","components/board_modal/OrderInput.js","components/board_modal/InsertionBoardSchema.js","components/board_modal/ModalPage.js","components/main/ButtonGroup.js","components/main/TaskItem.js","components/main/NewKanbanDashboard.js","components/edit_modal/ModalPage.js","components/main/index.js","helpers/EmptyObject.js","helpers/ValidateUserInputChange.js","App.js","helpers/AlertOptions.js","index.js"],"names":["handleDelegateNameChange","fullname","style","marginBottom","prepend","inputs","noTag","name","value","first_name","onChange","e","target","getAttribute","type","last_name","description","descriptionInputChange","className","label","outline","error","color","arr","some","input","createTask","resetErrors","validateInput","errors","taskTitleError","taskDescriptionError","firstNameError","lastNameError","useState","modalButtonClick","setModalButtonClick","taskTitle","setTaskTitle","taskDescription","setTaskDescription","delegateName","setDelegateName","createNewTask","setCreateNewTask","alert","useAlert","stableDispatch","useCallback","useEffect","handleToggleModal","onClick","zIndex","isOpen","toggle","size","ErrorMessage","DescriptionTaskInput","id","InputForm","attribute","disabled","inputStatus","ValidateUserBlankInput","fontSize","timeout","onOpen","console","log","onClose","title","boardOrderChange","order","newBoardPlaceOrder","boardsSchema","isNaN","marginRight","map","block","idx","key","createBoard","boardOrderError","boardTitleError","boardTitle","setBoardTitle","boardOrder","setBoardOrder","createNewBoard","setCreateNewBoard","setNewBoardPlaceOrder","InsertionBoardSchema","OrderInput","task","board","handleToggleEditTaskModal","boardLength","moveTask","deleteTask","hideTask","direction","aria-hidden","index","editTask","toggleModal","setToggleModal","DescriptionModal","handleToggleDescriptionModal","draggable","onDragStart","dataTransfer","setData","onDragOver","stopPropagation","onMouseOver","document","getElementById","querySelector","innerHTML","onMouseLeave","ButtonGroup","boards","showTask","dragTask","deleteBoard","boardMessage","dropTask","preventDefault","task_id","getData","dragTaskOver","onDrop","md","tasks","length","list","visibility","TaskItem","autoFocus","textAlign","submitNewTaskItems","editTaskItems","setEditTaskItems","handleEditTaskItemChange","props","setEditTask","find","listProps","eventProps","NewKanbanDashboard","obj","hasOwnProperty","call","titleFormat","personNameFormat","parseInt","match","initialBoards","uuid","initialErrors","App","note","setNote","setBoards","inputErrors","setInputErrors","Array","keys","setBoardsSchema","handleShowTaskItem2","visible","split","handleEventProps","isEmpty","slice","Object","assign","toLowerCase","concat","movingTask","filter","board_name","task_name","revised_task","old_task","elem","ValidateUserInput","handleStateProps","options","position","positions","TOP_CENTER","offset","containerStyle","transition","transitions","SCALE","ReactDOM","render","template","AlertTemplate"],"mappings":"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","file":"static/js/main.7f7b59b3.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { MDBInputGroup, MDBInput } from \"mdbreact\";\r\nexport default ( { handleDelegateNameChange, fullname } ) => {\r\n\r\n    const handleFirstNameInputChange = e => handleDelegateNameChange(e.target.getAttribute('name'), e.target.value);\r\n    const handleLastNameInputChange  = e => handleDelegateNameChange(e.target.getAttribute('name'), e.target.value);\r\n\r\n    return (\r\n        <MDBInputGroup style={{ marginBottom: 10 }}\r\n            prepend=\"Delegated to: \"\r\n            inputs={\r\n                <>\r\n                    <MDBInput noTag name=\"first\" value={fullname.first_name} onChange={handleFirstNameInputChange} type=\"text\" />\r\n                    <MDBInput noTag name=\"last\" value={fullname.last_name} onChange={handleLastNameInputChange} type=\"text\" />\r\n                </>\r\n            }\r\n        />\r\n    );\r\n}","import React from 'react';\r\nimport { MDBInput, MDBContainer } from 'mdbreact';\r\n\r\nexport default ({ description, descriptionInputChange }) =>\r\n    <MDBContainer className='task-description'>\r\n        <MDBInput\r\n            value={description}\r\n            name='task-description'\r\n            onChange={descriptionInputChange}\r\n            type=\"textarea\"\r\n            label=\"Task Description\"\r\n            outline\r\n        />\r\n    </MDBContainer>\r\n","import React from 'react';\r\nimport { MDBContainer, MDBAlert } from 'mdbreact';\r\n\r\nexport default ({ error }) => (\r\n        <MDBContainer>\r\n            <MDBAlert color=\"danger\" >\r\n                {error}\r\n            </MDBAlert>\r\n        </MDBContainer>\r\n    );\r\n\r\n","export default arr => arr.some(input => input === \" \" || input === \"\" || input == null);","import React, {useState, useEffect, useCallback} from 'react';\r\nimport {MDBContainer, MDBBtn, MDBModal, MDBModalBody, MDBModalHeader, MDBModalFooter, MDBInput} from 'mdbreact';\r\nimport InputForm from './InputForm';\r\nimport DescriptionTaskInput from \"./DescriptionTaskInput\";\r\nimport ErrorMessage from \"../board_modal/ErrorMessage\";\r\nimport ValidateUserBlankInput from '../../helpers/ValidateUserBlankInput';\r\nimport { useAlert } from 'react-alert';\r\n\r\n\r\n\r\nexport default ({createTask, resetErrors, validateInput, errors: {taskTitleError, taskDescriptionError, firstNameError, lastNameError}}) => {\r\n    const [modalButtonClick, setModalButtonClick] = useState(false);\r\n    const [taskTitle, setTaskTitle] = useState(\"\");\r\n    const [taskDescription, setTaskDescription] = useState(\"\");\r\n    const [delegateName, setDelegateName] = useState({\r\n        first_name: \"\",\r\n        last_name: \"\"\r\n    });\r\n    const [createNewTask, setCreateNewTask] = useState({});\r\n\r\n    const handleTaskTitleChange = e => {\r\n        const {value, name} = e.target;\r\n        validateInput(value, name);\r\n        setTaskTitle(value);\r\n    }\r\n    const handleTaskDescriptionChange = e => {\r\n        const {value, name} = e.target;\r\n        validateInput(value, name);\r\n        setTaskDescription(value);\r\n    }\r\n    const handleDelegateNameChange = (attribute, value) => {\r\n        if (attribute === \"first\") {\r\n            validateInput(value, attribute);\r\n            setDelegateName({...delegateName, first_name: value});\r\n        }\r\n        if (attribute === \"last\") {\r\n            validateInput(value, attribute);\r\n            setDelegateName({...delegateName, last_name: value});\r\n        }\r\n    }\r\n\r\n    const alert = useAlert();\r\n\r\n    const handleStoreTaskItem = () => {\r\n        if (ValidateUserBlankInput(\r\n            [\r\n                taskTitle,\r\n                taskDescription,\r\n                delegateName.first_name,\r\n                delegateName.last_name\r\n            ])) {\r\n            alert.error(<div style={{ color: 'red', fontSize: 15 }}>Please, Fill Blank Fields...</div>, {\r\n                timeout: 5000,\r\n                onOpen: () => {\r\n                    console.log('hey')\r\n                },\r\n                onClose: () => {\r\n                    console.log('closed')\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            setCreateNewTask({\r\n                ...createNewTask,\r\n                title: taskTitle,\r\n                description: taskDescription,\r\n                first_name: delegateName.first_name,\r\n                last_name: delegateName.last_name\r\n            });\r\n            setModalButtonClick(!modalButtonClick);\r\n        }\r\n    };\r\n\r\n    const stableDispatch = useCallback(createTask, []);\r\n\r\n    useEffect(() => {\r\n        stableDispatch(createNewTask);\r\n    }, [stableDispatch, createNewTask]);\r\n\r\n\r\n    const handleToggleModal = () => {\r\n        setTaskTitle('');\r\n        setTaskDescription('');\r\n        setDelegateName({\r\n                first_name: \"\",\r\n                last_name: \"\"\r\n            }\r\n        );\r\n        setModalButtonClick(!modalButtonClick);\r\n        resetErrors();\r\n    }\r\n\r\n    return (\r\n        <MDBContainer className=''>\r\n            <div className='start-modal-button-wrapper row align-items-center justify-content-center'>\r\n                <MDBBtn className='start-modal-button' onClick={handleToggleModal}>CREATE TASK</MDBBtn>\r\n            </div>\r\n            <MDBModal style={{ zIndex: 1 }} isOpen={modalButtonClick} toggle={handleToggleModal}>\r\n                <MDBModalHeader toggle={handleToggleModal}>Task Form</MDBModalHeader>\r\n                <MDBModalBody>\r\n                    <MDBInput label=\"Enter Task Title\" name='task-title' type='text' value={taskTitle}\r\n                              onChange={handleTaskTitleChange} size=\"md\"/>\r\n                    {taskTitleError.errors && <ErrorMessage error={taskTitleError.errors}/>}\r\n                    <DescriptionTaskInput\r\n                        id='textArea'\r\n                        description={taskDescription}\r\n                        descriptionInputChange={handleTaskDescriptionChange}\r\n                    />\r\n                    {taskDescriptionError.errors && <ErrorMessage error={taskDescriptionError.errors}/>}\r\n                    <InputForm fullname={delegateName} handleDelegateNameChange={handleDelegateNameChange}/>\r\n                    {firstNameError.errors && <ErrorMessage error={firstNameError.errors}/>}\r\n                    {lastNameError.errors && <ErrorMessage error={lastNameError.errors}/>}\r\n                </MDBModalBody>\r\n                <MDBModalFooter>\r\n                    <MDBBtn className='row' color=\"secondary\" onClick={handleToggleModal}>Close</MDBBtn>\r\n                    <MDBBtn disabled={taskTitleError.inputStatus || taskDescription.inputStatus || firstNameError.inputStatus || lastNameError.inputStatus}\r\n                            className='row'\r\n                            color=\"primary\" onClick={handleStoreTaskItem}>Create Task</MDBBtn>\r\n                </MDBModalFooter>\r\n            </MDBModal>\r\n        </MDBContainer>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { MDBInput } from 'mdbreact';\r\nimport \"./style.css\";\r\n\r\nexport default ({ boardOrderChange, order }) => {\r\n    return (\r\n        <MDBInput label=\"Enter Board Order\" name='board-order' type=\"text\" value={order} onChange={boardOrderChange}/>\r\n    );\r\n}\r\n\r\n","import React from 'react';\r\n\r\nexport default ({ newBoardPlaceOrder, boardsSchema }) => {\r\n    const order = isNaN(newBoardPlaceOrder) || newBoardPlaceOrder === 0 ? 1 : newBoardPlaceOrder;\r\n    return (\r\n        <div className='schema-container'>\r\n            <i style={{color: 'red', order: order, marginRight: 7}} className=\"fas fa-level-down-alt fa-3x\"/>\r\n\r\n            {boardsSchema.map((block, idx) => (\r\n                idx + 1 < order\r\n                    ?\r\n                    <div style={{order: idx + 1}} key={idx} className='block-element'>{idx + 1}</div>\r\n                    :\r\n                    <div style={{order: idx + 2}} key={idx} className='block-element'>{idx + 1}</div>\r\n                )\r\n            )}\r\n        </div>\r\n    );\r\n}","import React, {useState, useEffect, useCallback} from 'react';\r\nimport {MDBContainer, MDBBtn, MDBModal, MDBModalBody, MDBModalHeader, MDBModalFooter, MDBInput} from 'mdbreact';\r\nimport OrderInput from \"./OrderInput\";\r\nimport ErrorMessage from \"./ErrorMessage\";\r\nimport { useAlert } from 'react-alert';\r\nimport ValidateUserBlankInput from '../../helpers/ValidateUserBlankInput';\r\nimport InsertionBoardSchema from \"./InsertionBoardSchema\";\r\n\r\nexport default ({ boardsSchema, createBoard, validateInput, errors: { boardOrderError, boardTitleError } }) => {\r\n    const [modalButtonClick, setModalButtonClick] = useState(false);\r\n    const [boardTitle, setBoardTitle] = useState(\"\");\r\n    const [boardOrder, setBoardOrder] = useState(0);\r\n    const [createNewBoard, setCreateNewBoard] = useState({});\r\n    const [newBoardPlaceOrder, setNewBoardPlaceOrder] = useState(1);\r\n\r\n    const alert = useAlert();\r\n\r\n    const handleStoreBoardItem = () => {\r\n        if(ValidateUserBlankInput([boardTitle])){\r\n            alert.error(<div style={{ color: 'red', fontSize: 15 }}>Please, Fill Blank Fields...</div>, {\r\n                timeout: 5000,\r\n                onOpen: () => {\r\n                    console.log('hey')\r\n                },\r\n                onClose: () => {\r\n                    console.log('closed')\r\n                }\r\n            });\r\n        }\r\n        else{\r\n            setCreateNewBoard({\r\n                ...createNewBoard,\r\n                title: boardTitle,\r\n                order: boardOrder\r\n            });\r\n            setModalButtonClick(!modalButtonClick);\r\n            setNewBoardPlaceOrder(1);\r\n        }\r\n    };\r\n    const handleBoardTitleChange = e => {\r\n        const { value, name } = e.target;\r\n        validateInput(value, name);\r\n        setBoardTitle(e.target.value);\r\n    }\r\n\r\n    const handleBoardOrderChange = e => {\r\n        const { value, name } = e.target;\r\n        validateInput(value, name);\r\n        setBoardOrder(value);\r\n        setNewBoardPlaceOrder(value);\r\n    }\r\n\r\n\r\n    const stableDispatch = useCallback(createBoard, []);\r\n\r\n    useEffect(() => {\r\n        stableDispatch(createNewBoard);\r\n    }, [stableDispatch, createNewBoard]);\r\n\r\n\r\n    const handleToggleModal = () => {\r\n        setBoardTitle('');\r\n        setBoardOrder(1);\r\n        setModalButtonClick(!modalButtonClick);\r\n        setNewBoardPlaceOrder(1);\r\n    }\r\n\r\n    return (\r\n        <MDBContainer className=''>\r\n            <div className='start-modal-button-wrapper row align-items-center justify-content-center'>\r\n                <MDBBtn className='start-modal-button' onClick={handleToggleModal}>CREATE BOARD</MDBBtn>\r\n            </div>\r\n            <MDBModal isOpen={modalButtonClick} toggle={handleToggleModal}>\r\n                <MDBModalHeader toggle={handleToggleModal}>Board Form</MDBModalHeader>\r\n                <MDBModalBody>\r\n                    <div className=\"form-group\">\r\n                        <MDBInput label=\"Enter Board Title\" name='board-title' type='text' value={boardTitle} onChange={handleBoardTitleChange} size=\"md\" />\r\n                        {boardTitleError.errors && <ErrorMessage error={boardTitleError.errors}/>}\r\n                        <InsertionBoardSchema newBoardPlaceOrder={+newBoardPlaceOrder} boardsSchema={boardsSchema}/>\r\n                        <OrderInput order={boardOrder} boardOrderChange={handleBoardOrderChange}/>\r\n                        {boardOrderError.errors && <ErrorMessage error={boardOrderError.errors}/>}\r\n                    </div>\r\n                </MDBModalBody>\r\n                <MDBModalFooter>\r\n                    <MDBBtn className='row' color=\"secondary\" onClick={handleToggleModal}>Close</MDBBtn>\r\n                    <MDBBtn disabled={boardOrderError.inputStatus || boardTitleError.inputStatus} className='row' color=\"primary\" onClick={handleStoreBoardItem}>Create Board</MDBBtn>\r\n                </MDBModalFooter>\r\n            </MDBModal>\r\n        </MDBContainer>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport {MDBBtn, MDBBtnGroup} from \"mdbreact\";\r\n\r\nexport default ({task: { board, id }, boardOrder, handleToggleEditTaskModal, boardLength, moveTask, deleteTask, hideTask}) => {\r\n\r\n    return (\r\n        <MDBBtnGroup size=\"sm\" className=\"mb-4\">\r\n            <MDBBtn\r\n                disabled={boardOrder === 0}\r\n                className='task-button'\r\n                color=\"danger\"\r\n            >\r\n                <span\r\n                    id={id}\r\n                    onClick={moveTask}\r\n                    direction='left'\r\n                    order={boardOrder}\r\n                    name={`left-${board}`}\r\n                    className=\"fa fa-angle-double-left\"\r\n                    aria-hidden=\"true\"\r\n                >\r\n                </span>\r\n            </MDBBtn>\r\n            <MDBBtn className='task-button' color=\"pink\">\r\n                <span id={id} name={board} onClick={hideTask} className=\"hide fas fa-eye-slash\" aria-hidden=\"true\"/>\r\n            </MDBBtn>\r\n            <MDBBtn className='task-button' color=\"pink\">\r\n                <span id={id} name={board} onClick={handleToggleEditTaskModal} className=\"hide fas fa-edit\" aria-hidden=\"true\"/>\r\n            </MDBBtn>\r\n            <MDBBtn className='task-button' color=\"pink\">\r\n                <span id={id} name={board} onClick={deleteTask} className=\"delete fas fa-trash-alt\" aria-hidden=\"true\"/>\r\n            </MDBBtn>\r\n            <MDBBtn\r\n                className='task-button'\r\n                disabled={boardOrder === boardLength - 1}\r\n                color=\"danger\"\r\n            >\r\n                <span\r\n                    id={id}\r\n                    onClick={moveTask}\r\n                    direction='right'\r\n                    order={boardOrder}\r\n                    name={`right-${board}`}\r\n                    className=\"fa fa-angle-double-right\"\r\n                    aria-hidden=\"true\"\r\n                >\r\n                </span>\r\n            </MDBBtn>\r\n        </MDBBtnGroup>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport ButtonGroup from \"./ButtonGroup\";\r\nimport {MDBBtn, MDBContainer, MDBModal, MDBModalBody, MDBModalFooter, MDBModalHeader} from \"mdbreact\";\r\n\r\n\r\nexport default ({task, boardLength, handleToggleEditTaskModal, boardOrder, index, moveTask, editTask, deleteTask, hideTask}) => {\r\n\r\n    const [toggleModal, setToggleModal] = useState(false);\r\n\r\n    const dragTaskStart = e => {\r\n        const target = e.target;\r\n        e.dataTransfer.setData('task', target.id);\r\n    };\r\n\r\n    const DescriptionModal = () =>\r\n        <MDBContainer>\r\n            <MDBModal isOpen={toggleModal} toggle={handleToggleDescriptionModal} size=\"fluid\">\r\n                <MDBModalHeader toggle={handleToggleDescriptionModal}>{task.title}</MDBModalHeader>\r\n                <MDBModalBody>\r\n                    {task.description}\r\n                </MDBModalBody>\r\n                <MDBModalFooter>\r\n                    <MDBBtn color=\"secondary\" onClick={handleToggleDescriptionModal}>Close</MDBBtn>\r\n                </MDBModalFooter>\r\n            </MDBModal>\r\n        </MDBContainer>\r\n\r\n    const dragTaskOver = e => {\r\n        e.stopPropagation();\r\n    };\r\n\r\n    const handleOnMouseOver = e => {\r\n        let id = e.target.id;\r\n        if(id) document.getElementById(id).querySelector(\".task-details\").innerHTML = 'Click Here...';\r\n\r\n    }\r\n    const handleOnMouseOff = e => {\r\n        let id = e.target.id;\r\n        if(id) document.getElementById(id).querySelector(\".task-details\").innerHTML = 'Details...';\r\n    }\r\n\r\n    const handleToggleDescriptionModal = () => setToggleModal(!toggleModal)\r\n\r\n    return (\r\n        <div\r\n            draggable='true'\r\n            name={task.board}\r\n            id={index}\r\n            onDragStart={dragTaskStart}\r\n            onDragOver={dragTaskOver}\r\n            className=\"d-flex flex-column task-card\"\r\n        >\r\n            <h6 className=\"task-title\">{task.title}</h6>\r\n            <span className=\"p-2 col-example text-left task-details\"\r\n                  id={index}\r\n                  onMouseOver={handleOnMouseOver}\r\n                  onMouseLeave={handleOnMouseOff}\r\n                  onClick={handleToggleDescriptionModal}\r\n            >\r\n                <i>Details...</i>\r\n            </span>\r\n            <DescriptionModal/>\r\n            <ButtonGroup\r\n                boardLength={boardLength}\r\n                boardOrder={boardOrder}\r\n                moveTask={moveTask}\r\n                editTask={editTask}\r\n                deleteTask={deleteTask}\r\n                hideTask={hideTask}\r\n                task={task}\r\n                handleToggleEditTaskModal={handleToggleEditTaskModal}\r\n            />\r\n\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport TaskItem from \"./TaskItem\";\r\nimport {MDBCol, MDBContainer, MDBRow} from \"mdbreact\";\r\n\r\nexport default ({\r\n                    boards,\r\n                    moveTask,\r\n                    deleteTask,\r\n                    hideTask,\r\n                    editTask,\r\n                    showTask,\r\n                    dragTask,\r\n                    deleteBoard,\r\n                    boardMessage,\r\n                    handleToggleEditTaskModal\r\n                }) => {\r\n\r\n    const dropTask = e => {\r\n        e.preventDefault();\r\n        const task_id = e.dataTransfer.getData('task');\r\n        const task = document.getElementById(task_id);\r\n        dragTask(e.target.getAttribute('name'), task.getAttribute('name'), task_id);\r\n    };\r\n\r\n    const dragTaskOver = e => {\r\n        e.preventDefault();\r\n    };\r\n\r\n    const boardList = (list, order, length) => list.length\r\n        ? list.map((task, id) => task.visibility\r\n            ? <TaskItem\r\n                boardLength={length}\r\n                boardOrder={order}\r\n                moveTask={moveTask}\r\n                deleteTask={deleteTask}\r\n                hideTask={hideTask}\r\n                editTask={editTask}\r\n                key={id}\r\n                index={task.id}\r\n                task={task}\r\n                handleToggleEditTaskModal={handleToggleEditTaskModal}\r\n\r\n            />\r\n            : <p className='show' key={task.id}>Hidden Task... <span id={task.id} name={task.board} autoFocus\r\n                                                                     onClick={showTask} className='show'>SHOW</span></p>\r\n        )\r\n        : <p style={{color: 'white', textAlign: 'center'}}><i>{boardMessage}</i></p>;\r\n\r\n    return (\r\n        <MDBContainer className=\"dashboard\">\r\n            <MDBRow className=\"kanban-row\">\r\n                {boards.map(board => (\r\n                    <MDBCol\r\n                        key={board.id}\r\n                        onDrop={dropTask}\r\n                        name={board.name}\r\n                        onDragOver={dragTaskOver}\r\n                        className=\"kanban-col\"\r\n                        md=\"3\"\r\n                    >\r\n                        <div className='board-header container'>\r\n                            <div className='row'>\r\n                                <h3 className=\"task-list-title col-10\">{board.title}: ({board.tasks.length})</h3>\r\n                                <div className='col-2'>\r\n                                    <i\r\n                                        id={board.id}\r\n                                        onClick={deleteBoard}\r\n                                        className=\"far fa-calendar-times fa-2x\"/>\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div>\r\n                        {boardList(board.tasks, board.order, boards.length)}\r\n                    </MDBCol>\r\n                ))\r\n                }\r\n            </MDBRow>\r\n        </MDBContainer>\r\n    );\r\n}","import React, {useState} from 'react';\r\nimport {MDBContainer, MDBBtn, MDBModal, MDBInput, MDBModalBody, MDBModalHeader, MDBModalFooter} from 'mdbreact';\r\nimport ErrorMessage from \"../board_modal/ErrorMessage\";\r\n\r\nexport default ({\r\n                    handleToggleEditTaskModal,\r\n                    errors: {\r\n                        taskTitleError,\r\n                        taskDescriptionError,\r\n                        firstNameError,\r\n                        lastNameError\r\n                    },\r\n                    modalButtonClick,\r\n                    validateInput,\r\n                    submitNewTaskItems,\r\n                    editTask\r\n                }) => {\r\n    console.log(editTask.id);\r\n    const [editTaskItems, setEditTaskItems] = useState({\r\n        title: \"\",\r\n        description: \"\",\r\n        first_name: \"\",\r\n        last_name: \"\"\r\n    })\r\n\r\n    const handleEditTaskItemChange = e => {\r\n        setEditTaskItems({\r\n            ...editTaskItems,\r\n            id: editTask.id,\r\n            board: editTask.board,\r\n            [e.target.name]: e.target.value\r\n        });\r\n        validateInput(e.target.id, e.target.name);\r\n    }\r\n    const handleEditTaskItemsSubmit = () => {\r\n        console.log(editTask)\r\n        submitNewTaskItems(editTaskItems);\r\n    }\r\n\r\n    return (\r\n        <MDBContainer>\r\n            <MDBModal isOpen={modalButtonClick} toggle={handleToggleEditTaskModal}>\r\n                <MDBModalHeader toggle={handleToggleEditTaskModal}>Task Edit Form</MDBModalHeader>\r\n                <MDBModalBody>\r\n                    <MDBInput type='text' name='title' label=\"Edit Task Title\" value={editTaskItems.title}\r\n                              onChange={handleEditTaskItemChange}/>\r\n                    {taskTitleError.errors && <ErrorMessage error={taskTitleError.errors}/>}\r\n                    <MDBInput type='text' name='description' label=\"Edit Description\" value={editTaskItems.description}\r\n                              onChange={handleEditTaskItemChange}/>\r\n                    <MDBInput type='text' name='first_name' label=\"Edit Delegate First Name\"\r\n                              value={editTaskItems.first_name} onChange={handleEditTaskItemChange}/>\r\n                    <MDBInput type='text' name='last_name' label=\"Edit Delegate Last Name\"\r\n                              value={editTaskItems.last_name} onChange={handleEditTaskItemChange}/>\r\n                </MDBModalBody>\r\n                <MDBModalFooter>\r\n                    <MDBBtn color=\"secondary\" onClick={handleToggleEditTaskModal}>Close</MDBBtn>\r\n                    <MDBBtn color=\"primary\" onClick={handleEditTaskItemsSubmit}>Save changes</MDBBtn>\r\n                </MDBModalFooter>\r\n            </MDBModal>\r\n        </MDBContainer>\r\n    );\r\n}","import React, {useState} from 'react';\r\nimport TaskModalPage from '../task_modal/ModalPage';\r\nimport BoardModalPage from '../board_modal/ModalPage'\r\nimport NewKanbanDashboard from \"./NewKanbanDashboard\";\r\nimport EditTaskModalPage from \"../edit_modal/ModalPage\";\r\n\r\nexport default props => {\r\n    const [modalButtonClick, setModalButtonClick] = useState(false);\r\n    const [editTask, setEditTask] = useState({});\r\n\r\n    const handleToggleEditTaskModal = e => {\r\n        const name = e.target.getAttribute('name');\r\n        const id = e.target.id;\r\n        if (id) setEditTask(props.boards.find(board => board.name === name).tasks.find(task => task.id === id));\r\n        setModalButtonClick(!modalButtonClick);\r\n    }\r\n\r\n\r\n    const listProps = {\r\n        boards: props.boards,\r\n        boardMessage: props.boardMessage,\r\n        errors: props.errors,\r\n        boardsSchema: props.boardsSchema\r\n    };\r\n    const eventProps = {\r\n        createBoard: props.createBoard,\r\n        createTask: props.createTask,\r\n        moveTask: props.moveTask,\r\n        deleteTask: props.deleteTask,\r\n        deleteBoard: props.deleteBoard,\r\n        hideTask: props.hideTask,\r\n        showTask: props.showTask,\r\n        dragTask: props.dragTask,\r\n        submitNewTaskItems: props.submitNewTaskItems,\r\n        validateInput: props.validateInput,\r\n        resetErrors: props.resetErrors\r\n    };\r\n    return (\r\n        <div>\r\n            <EditTaskModalPage\r\n                errors={listProps.errors}\r\n                validateInput={eventProps.validateInput}\r\n                modalButtonClick={modalButtonClick}\r\n                handleToggleEditTaskModal={handleToggleEditTaskModal}\r\n                boards={listProps.boards}\r\n                editTask={editTask}\r\n                submitNewTaskItems={eventProps.submitNewTaskItems}\r\n            />\r\n            <TaskModalPage\r\n                errors={listProps.errors}\r\n                validateInput={eventProps.validateInput}\r\n                createTask={eventProps.createTask}\r\n                resetErrors={eventProps.resetErrors}/>\r\n            <BoardModalPage\r\n                errors={listProps.errors}\r\n                boardsSchema={listProps.boardsSchema}\r\n                validateInput={eventProps.validateInput}\r\n                createBoard={eventProps.createBoard}\r\n                deleteBoard={eventProps.deleteBoard}\r\n                resetErrors={eventProps.resetErrors}/>\r\n            <NewKanbanDashboard\r\n                boardMessage={listProps.boardMessage}\r\n                handleToggleEditTaskModal={handleToggleEditTaskModal}\r\n                {...listProps}\r\n                {...eventProps}/>\r\n        </div>\r\n    )\r\n}","export default (obj) => {\r\n\r\n    // null and undefined are \"empty\"\r\n    if (obj == null) return true;\r\n\r\n    // Assume if it has a length property with a non-zero value\r\n    // that that property is correct.\r\n    if (obj.length > 0)    return false;\r\n    if (obj.length === 0)  return true;\r\n\r\n    // If it isn't an object at this point\r\n    // it is empty, but it can't be anything *but* empty\r\n    // Is it empty?  Depends on your application.\r\n    if (typeof obj !== \"object\") return true;\r\n\r\n    // Otherwise, does it have any properties of its own?\r\n    // Note that this doesn't handle\r\n    // toString and valueOf enumeration bugs in IE < 9\r\n    for (var key in obj) {\r\n        if (hasOwnProperty.call(obj, key)) return false;\r\n    }\r\n\r\n    return true;\r\n}","export default (name, value, length) => {\r\n    const titleFormat = /^[0-9a-zA-Z]+$/;\r\n    const personNameFormat = /^[a-zA-Z]+$/;\r\n    switch (name) {\r\n        case 'board-order':\r\n            return {\r\n                errors:\r\n                    isNaN(value) || value === \"\"\r\n                        ? 'Input must be an INTEGER!'\r\n                        : parseInt(value) <= 0\r\n                        ? 'Must be greater than zero!'\r\n                        : parseInt(value) > length + 1\r\n                            ? `Must be less or equal ${length + 1}!`\r\n                            : '',\r\n                inputStatus:\r\n                    isNaN(value) || value === \"\" || parseInt(value) <= 0 || parseInt(value) > length + 1\r\n            };\r\n        case 'board-title':\r\n            return {\r\n                errors:\r\n                    !value.match(titleFormat)\r\n                        ? 'Please, input alphanumeric characters only!'\r\n                        : value.length > 10\r\n                            ? 'This title is too long'\r\n                            : '',\r\n                inputStatus:\r\n                    !value.match(titleFormat) || value.length > 10\r\n            };\r\n        case 'task-title':\r\n            return {\r\n                errors:\r\n                    !value.match(titleFormat)\r\n                        ? 'Please, input alphanumeric characters only!'\r\n                        : value.length > 7\r\n                        ? 'This title is too long'\r\n                        : '',\r\n                inputStatus:\r\n                    !value.match(titleFormat) || value.length > 7\r\n            };\r\n        case 'task-description':\r\n            return {\r\n                errors:\r\n                    value.length >= 100\r\n                        ? 'Description must be less than 100 characters'\r\n                        : '',\r\n                inputStatus:\r\n                    value.length >= 100\r\n            };\r\n        case 'first':\r\n            return {\r\n                errors:\r\n                    !value.match(personNameFormat)\r\n                        ? 'Please, input alphabetical characters only!'\r\n                        : value.length < 3\r\n                        ? 'First name is too short'\r\n                        : '',\r\n                inputStatus:\r\n                    !value.match(personNameFormat) || value.length < 3\r\n            };\r\n        case 'last':\r\n            return {\r\n                errors:\r\n                    !value.match(personNameFormat)\r\n                        ? 'Please, input alphabetical characters only!'\r\n                        : value.length < 3\r\n                        ? 'Last name is too short'\r\n                        : '',\r\n                inputStatus:\r\n                    !value.match(personNameFormat) || value.length < 3\r\n            };\r\n        default:\r\n            return {\r\n                errors : '',\r\n                inputStatus: false\r\n            }\r\n    }\r\n}\r\n","import React, {useState} from 'react';\nimport Main from './components/main';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\nimport uuid from 'react-uuid';\nimport './App.css';\nimport isEmpty from './helpers/EmptyObject';\nimport ValidateUserInput from \"./helpers/ValidateUserInputChange\";\n\n\nconst initialBoards = [\n    {\n        name: 'todo',\n        order: 0,\n        title: 'To-Do',\n        id: uuid(),\n        tasks: []\n    },\n    {\n        name: 'in-progress',\n        order: 1,\n        title: 'In-Progress',\n        id: uuid(),\n        tasks: []\n\n    },\n    {\n        name: 'review',\n        order: 2,\n        title: 'To-Review',\n        id: uuid(),\n        tasks: []\n\n    },\n    {\n        name: 'done',\n        order: 3,\n        title: 'Completed',\n        id: uuid(),\n        tasks: []\n    },\n    {\n        name: 'extra',\n        order: 4,\n        title: 'Extra',\n        id: uuid(),\n        tasks: []\n    }\n];\n\nconst initialErrors = {\n    boardTitleError: {\n        errors: '',\n        inputStatus: false\n    },\n    taskTitleError: {\n        errors: '',\n        inputStatus: false\n    },\n    boardOrderError: {\n        errors: '',\n        inputStatus: false\n    },\n    taskDescriptionError: {\n        errors: '',\n        inputStatus: false\n    },\n    firstNameError: {\n        errors: '',\n        inputStatus: false\n    },\n    lastNameError: {\n        errors: '',\n        inputStatus: false\n    }\n}\n\nfunction App() {\n\n    const [note, setNote] = useState(\"\");\n    const [boards, setBoards] = useState(initialBoards);\n    const [inputErrors, setInputErrors] = useState(initialErrors);\n    const [boardsSchema, setBoardsSchema] = useState([...Array(initialBoards.length).keys()]);\n\n    const handleCreateNewBoard2 = board => {\n        let index = parseInt(board.order) - 1;\n        if (!isEmpty(board)) {\n            setBoards(boards => [\n                ...boards.slice(0, index),\n                Object.assign({},\n                    {\n                        ...board,\n                        id: uuid(),\n                        name: board.title.toLowerCase(),\n                        tasks: []\n                    }),\n                ...boards.slice(index)\n            ]);\n            setBoards(boards => boards.map((board, id) => ({...board, order: id })));\n            setBoardsSchema(boardsSchema => [...boardsSchema].concat(boardsSchema.length));\n        }\n\n    }\n\n\n    const handleValidateUserInput2 = (input, name) => {\n        if (name === 'board-order') setInputErrors(inputErrors => ({ ...inputErrors, boardOrderError: ValidateUserInput(name, input, boards.length)} ));\n        if (name === 'board-title') setInputErrors(inputErrors => ({ ...inputErrors, boardTitleError: ValidateUserInput(name, input, boards.length)} ));\n        if (name === 'task-title') setInputErrors(inputErrors => ({ ...inputErrors, taskTitleError: ValidateUserInput(name, input, boards.length)} ));\n        if (name === 'task-description') setInputErrors(inputErrors => ({ ...inputErrors, taskDescriptionError: ValidateUserInput(name, input, boards.length)} ));\n        if (name === 'first') setInputErrors(inputErrors => ({ ...inputErrors, firstNameError: ValidateUserInput(name, input, boards.length)} ));\n        if (name === 'last') setInputErrors(inputErrors => ({ ...inputErrors, lastNameError: ValidateUserInput(name, input, boards.length)} ));\n    }\n\n    const handleResetAllErrors2 = () => setInputErrors(initialErrors);\n\n    const handleSubmitNewTaskItems2 = revised_task => {\n        console.log(revised_task)\n        setBoards(boards => boards.map(board =>\n                board.name === revised_task.board\n                    ?\n                    {\n                        ...board,\n                        tasks: board.tasks.map(old_task => old_task.id === revised_task.id\n                            ? {...old_task, ...revised_task}\n                            :  old_task\n                        )\n                    }\n                    :\n                    board\n            )\n        )\n    }\n\n    const handleDeleteBoard2 = e => {\n        let id = e.target.id;\n        setBoards(boards => boards.filter(board => board.id !== id));\n        setBoards(boards => boards.map((board, id) => ({...board, order: id })));\n        setBoardsSchema(boardsSchema => [...boardsSchema].filter(elem => elem !== boards.length - 1));\n\n    }\n\n\n    const handleCreateNewTask2 = task => {\n        if (isEmpty(task) !== true) setBoards(boards => boards.map(board =>\n            board.name === 'todo'\n                ?\n                {\n                    ...board,\n                    tasks: board.tasks.concat(\n                        {\n                            ...task,\n                            id: uuid(),\n                            board: \"todo\",\n                            visibility: true\n                        }\n                    )\n                }\n                :\n                board\n            )\n        )\n        else setNote('This list is empty');\n    };\n\n\n    const handleMoveTaskWithinBoard2 = e => {\n        const id = e.target.getAttribute('id');\n        const direction = e.target.getAttribute('direction');\n        const boardOrder = e.target.getAttribute('order');\n        const movingTask = boards.find(board => board.order === parseInt(boardOrder)).tasks.find(task => task.id === id);\n\n        ///remove a task....\n        setBoards(boards => boards.map(board =>\n            board.order === parseInt(boardOrder)\n                ?\n                {\n                    ...board,\n                    tasks: board.tasks.filter(task => task.id !== id)\n                }\n                :\n                board\n            )\n        );\n\n        ////Add a task......\n        setBoards(boards => boards.map(board =>\n            board.order === parseInt(boardOrder) + 1 && direction === 'right'\n                ?\n                {\n                    ...board,\n                    tasks: board.tasks.concat({...movingTask, board: board.name})\n                }\n                : board\n            )\n        );\n        setBoards(boards => boards.map(board =>\n            board.order === parseInt(boardOrder) - 1 && direction === 'left'\n                ?\n                {\n                    ...board,\n                    tasks: board.tasks.concat({...movingTask, board: board.name})\n                }\n                : board\n            )\n        );\n    };\n\n    const handleDragAndDrop2 = (board_name, task_name, id) => {\n        const dragTask = boards.find(board => board.name === task_name).tasks.find(task => task.id === id);\n\n        setBoards(boards => boards.map(board =>\n            board.name === task_name && board_name !== null\n                ?\n                {\n                    ...board,\n                    tasks: board.tasks.filter(task => task.id !== id)\n                }\n                :\n                board\n            )\n        );\n        setBoards(boards => boards.map(board =>\n                board.name === board_name\n                ?\n                {\n                    ...board,\n                    tasks: board.tasks.concat({...dragTask, board: board.name})\n                }\n                : board\n            )\n        );\n    }\n\n    const handleDeleteTaskItem2 = e => {\n        setBoards(boards => boards.map(board =>\n                board.name === e.target.getAttribute('name')\n                    ?\n                    {\n                        ...board,\n                        tasks: board.tasks.filter(task => task.id !== e.target.id)\n                    }\n                    :\n                    board\n            )\n        );\n    };\n\n    const handleShowTaskItem2 = e => {\n        let visible;\n        const id = e.target.getAttribute('id');\n        const name = e.target.getAttribute('name');\n        const className = e.target.getAttribute('class').split(\" \")[0];\n        className === 'show' ? visible = true : visible = false;\n\n        setBoards(boards => boards.map(board =>\n            board.name === name\n                ?\n                {\n                    ...board,\n                    tasks: board.tasks.map(task => task.id === id\n                        ?\n                        {\n                            ...task,\n                            visibility: visible\n                        }\n                        :\n                        task\n                    )\n                }\n                :\n                board\n            )\n        );\n    }\n\n    /////////////////////////////////////////////////////////////////\n    ////////////////////////////////////////////////////////////////////\n\n\n    const handleEventProps = {\n        createBoard: handleCreateNewBoard2,\n        createTask: handleCreateNewTask2,\n        moveTask: handleMoveTaskWithinBoard2,\n        dragTask: handleDragAndDrop2,\n        deleteTask: handleDeleteTaskItem2,\n        hideTask: handleShowTaskItem2,\n        showTask: handleShowTaskItem2,\n        submitNewTaskItems: handleSubmitNewTaskItems2,\n        deleteBoard: handleDeleteBoard2,\n        validateInput: handleValidateUserInput2,\n        resetErrors: handleResetAllErrors2\n    };\n\n    const handleStateProps = {\n        boards: boards,\n        boardMessage: note,\n        errors: inputErrors,\n        boardsSchema: boardsSchema\n    };\n\n    return <Main {...handleEventProps} {...handleStateProps} />\n\n}\n\nexport default App;\n","import { transitions, positions } from 'react-alert';\r\n\r\nexport const options = {\r\n    position: positions.TOP_CENTER,\r\n    timeout: 5000,\r\n    offset: '20px',\r\n    containerStyle: {\r\n        zIndex: 9999,\r\n    },\r\n    transition: transitions.SCALE\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider as AlertProvider } from 'react-alert';\nimport App from './App';\nimport { options } from './helpers/AlertOptions';\nimport AlertTemplate from 'react-alert-template-basic';\n\nReactDOM.render(\n    <AlertProvider template={AlertTemplate} {...options}>\n        <App/>\n    </AlertProvider>, document.getElementById('root'));\n\n"],"sourceRoot":""}