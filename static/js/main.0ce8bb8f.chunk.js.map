{"version":3,"sources":["components/task_modal/InputForm.js","components/task_modal/DescriptionTaskInput.js","components/board_modal/ErrorMessage.js","helpers/ValidateUserBlankInput.js","components/task_modal/ModalPage.js","components/board_modal/OrderInput.js","components/board_modal/ModalPage.js","components/main/ButtonGroup.js","components/main/TaskItem.js","components/main/NewKanbanDashboard.js","components/main/index.js","helpers/EmptyObject.js","helpers/ValidateUserInputChange.js","App.js","helpers/AlertOptions.js","index.js"],"names":["handleDelegateNameChange","fullname","style","marginBottom","prepend","inputs","noTag","name","value","first_name","onChange","e","target","getAttribute","type","last_name","description","descriptionInputChange","label","outline","error","color","arr","some","input","createTask","resetErrors","validateInput","errors","taskTitleError","taskDescriptionError","firstNameError","lastNameError","useState","modalButtonClick","setModalButtonClick","taskTitle","setTaskTitle","taskDescription","setTaskDescription","delegateName","setDelegateName","createNewTask","setCreateNewTask","alert","useAlert","stableDispatch","useCallback","useEffect","handleToggleModal","className","onClick","zIndex","isOpen","toggle","size","ErrorMessage","DescriptionTaskInput","id","InputForm","attribute","disabled","inputStatus","ValidateUserBlankInput","fontSize","timeout","onOpen","console","log","onClose","title","boardOrderChange","order","createBoard","boardOrderError","boardTitleError","boardTitle","setBoardTitle","boardOrder","setBoardOrder","createNewBoard","setCreateNewBoard","OrderInput","task","board","boardLength","moveTask","deleteTask","hideTask","direction","aria-hidden","index","toggleModal","setToggleModal","DescriptionModal","handleToggleDescriptionModal","draggable","onDragStart","dataTransfer","setData","onDragOver","stopPropagation","onMouseOver","document","getElementById","querySelector","innerHTML","onMouseLeave","ButtonGroup","boards","showTask","dragTask","deleteBoard","boardMessage","dropTask","preventDefault","task_id","getData","dragTaskOver","map","key","onDrop","md","tasks","length","list","visibility","TaskItem","autoFocus","textAlign","props","listProps","eventProps","editTask","NewKanbanDashboard","obj","hasOwnProperty","call","titleFormat","personNameFormat","isNaN","parseInt","match","initialBoards","uuid","initialErrors","App","note","setNote","setBoards","inputErrors","setInputErrors","handleShowTaskItem2","visible","split","handleEventProps","isEmpty","slice","Object","assign","toLowerCase","concat","movingTask","find","filter","board_name","task_name","ValidateUserInput","handleStateProps","options","position","positions","TOP_CENTER","offset","containerStyle","transition","transitions","SCALE","ReactDOM","render","template","AlertTemplate"],"mappings":"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","file":"static/js/main.0ce8bb8f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { MDBInputGroup, MDBInput } from \"mdbreact\";\r\nexport default ( { handleDelegateNameChange, fullname } ) => {\r\n\r\n    const handleFirstNameInputChange = e => handleDelegateNameChange(e.target.getAttribute('name'), e.target.value);\r\n    const handleLastNameInputChange  = e => handleDelegateNameChange(e.target.getAttribute('name'), e.target.value);\r\n\r\n    return (\r\n        <MDBInputGroup style={{ marginBottom: 10 }}\r\n            prepend=\"Delegated to: \"\r\n            inputs={\r\n                <>\r\n                    <MDBInput noTag name=\"first\" value={fullname.first_name} onChange={handleFirstNameInputChange} type=\"text\" />\r\n                    <MDBInput noTag name=\"last\" value={fullname.last_name} onChange={handleLastNameInputChange} type=\"text\" />\r\n                </>\r\n            }\r\n        />\r\n    );\r\n}","import React from 'react';\r\nimport { MDBInput, MDBContainer } from 'mdbreact';\r\n\r\nexport default ({ description, descriptionInputChange }) =>\r\n    <MDBContainer>\r\n        <MDBInput\r\n            value={description}\r\n            name='task-description'\r\n            onChange={descriptionInputChange}\r\n            type=\"textarea\"\r\n            label=\"Task Description\"\r\n            outline\r\n        />\r\n    </MDBContainer>\r\n","import React from 'react';\r\nimport { MDBContainer, MDBAlert } from 'mdbreact';\r\n\r\nexport default ({ error }) => (\r\n        <MDBContainer>\r\n            <MDBAlert color=\"danger\" >\r\n                {error}\r\n            </MDBAlert>\r\n        </MDBContainer>\r\n    );\r\n\r\n","export default arr => arr.some(input => input === \" \" || input === \"\" || input == null);","import React, {useState, useEffect, useCallback} from 'react';\r\nimport {MDBContainer, MDBBtn, MDBModal, MDBModalBody, MDBModalHeader, MDBModalFooter, MDBInput} from 'mdbreact';\r\nimport InputForm from './InputForm';\r\nimport DescriptionTaskInput from \"./DescriptionTaskInput\";\r\nimport ErrorMessage from \"../board_modal/ErrorMessage\";\r\nimport ValidateUserBlankInput from '../../helpers/ValidateUserBlankInput';\r\nimport { useAlert } from 'react-alert';\r\n\r\n\r\n\r\nexport default ({createTask, resetErrors, validateInput, errors: {taskTitleError, taskDescriptionError, firstNameError, lastNameError}}) => {\r\n    const [modalButtonClick, setModalButtonClick] = useState(false);\r\n    const [taskTitle, setTaskTitle] = useState(\"\");\r\n    const [taskDescription, setTaskDescription] = useState(\"\");\r\n    const [delegateName, setDelegateName] = useState({\r\n        first_name: \"\",\r\n        last_name: \"\"\r\n    });\r\n    const [createNewTask, setCreateNewTask] = useState({});\r\n\r\n    const handleTaskTitleChange = e => {\r\n        const {value, name} = e.target;\r\n        validateInput(value, name);\r\n        setTaskTitle(value);\r\n    }\r\n    const handleTaskDescriptionChange = e => {\r\n        const {value, name} = e.target;\r\n        validateInput(value, name);\r\n        setTaskDescription(value);\r\n    }\r\n    const handleDelegateNameChange = (attribute, value) => {\r\n        if (attribute === \"first\") {\r\n            validateInput(value, attribute);\r\n            setDelegateName({...delegateName, first_name: value});\r\n        }\r\n        if (attribute === \"last\") {\r\n            validateInput(value, attribute);\r\n            setDelegateName({...delegateName, last_name: value});\r\n        }\r\n    }\r\n\r\n    const alert = useAlert();\r\n\r\n    const handleStoreTaskItem = () => {\r\n        if (ValidateUserBlankInput(\r\n            [\r\n                taskTitle,\r\n                taskDescription,\r\n                delegateName.first_name,\r\n                delegateName.last_name\r\n            ])) {\r\n            alert.error(<div style={{ color: 'red', fontSize: 15 }}>Please, Fill Blank Fields...</div>, {\r\n                timeout: 5000,\r\n                onOpen: () => {\r\n                    console.log('hey')\r\n                },\r\n                onClose: () => {\r\n                    console.log('closed')\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            setCreateNewTask({\r\n                ...createNewTask,\r\n                title: taskTitle,\r\n                description: taskDescription,\r\n                first_name: delegateName.first_name,\r\n                last_name: delegateName.last_name\r\n            });\r\n            setModalButtonClick(!modalButtonClick);\r\n        }\r\n    };\r\n\r\n    const stableDispatch = useCallback(createTask, []);\r\n\r\n    useEffect(() => {\r\n        stableDispatch(createNewTask);\r\n    }, [stableDispatch, createNewTask]);\r\n\r\n\r\n    const handleToggleModal = () => {\r\n        setTaskTitle('');\r\n        setTaskDescription('');\r\n        setDelegateName({\r\n                first_name: \"\",\r\n                last_name: \"\"\r\n            }\r\n        );\r\n        setModalButtonClick(!modalButtonClick);\r\n        resetErrors();\r\n    }\r\n\r\n    return (\r\n        <MDBContainer className=''>\r\n            <div className='start-modal-button-wrapper row align-items-center justify-content-center'>\r\n                <MDBBtn className='start-modal-button' onClick={handleToggleModal}>CREATE TASK</MDBBtn>\r\n            </div>\r\n            <MDBModal style={{ zIndex: 1 }} isOpen={modalButtonClick} toggle={handleToggleModal}>\r\n                <MDBModalHeader toggle={handleToggleModal}>Task Form</MDBModalHeader>\r\n                <MDBModalBody>\r\n                    <MDBInput label=\"Enter Task Title\" name='task-title' type='text' value={taskTitle}\r\n                              onChange={handleTaskTitleChange} size=\"md\"/>\r\n                    {taskTitleError.errors && <ErrorMessage error={taskTitleError.errors}/>}\r\n                    <DescriptionTaskInput\r\n                        id='textArea'\r\n                        description={taskDescription}\r\n                        descriptionInputChange={handleTaskDescriptionChange}\r\n                    />\r\n                    {taskDescriptionError.errors && <ErrorMessage error={taskDescriptionError.errors}/>}\r\n                    <InputForm fullname={delegateName} handleDelegateNameChange={handleDelegateNameChange}/>\r\n                    {firstNameError.errors && <ErrorMessage error={firstNameError.errors}/>}\r\n                    {lastNameError.errors && <ErrorMessage error={lastNameError.errors}/>}\r\n                </MDBModalBody>\r\n                <MDBModalFooter>\r\n                    <MDBBtn className='row' color=\"secondary\" onClick={handleToggleModal}>Close</MDBBtn>\r\n                    <MDBBtn disabled={taskTitleError.inputStatus || taskDescription.inputStatus || firstNameError.inputStatus || lastNameError.inputStatus}\r\n                            className='row'\r\n                            color=\"primary\" onClick={handleStoreTaskItem}>Create Task</MDBBtn>\r\n                </MDBModalFooter>\r\n            </MDBModal>\r\n        </MDBContainer>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { MDBInput } from 'mdbreact';\r\nimport \"./style.css\";\r\n\r\nexport default ({ boardOrderChange, order }) => {\r\n        return (\r\n            <MDBInput label=\"Enter Board Order\" name='board-order' type=\"text\" value={order} onChange={boardOrderChange} />\r\n        );\r\n    }\r\n\r\n","import React, {useState, useEffect, useCallback} from 'react';\r\nimport {MDBContainer, MDBBtn, MDBModal, MDBModalBody, MDBModalHeader, MDBModalFooter, MDBInput} from 'mdbreact';\r\nimport OrderInput from \"./OrderInput\";\r\nimport ErrorMessage from \"./ErrorMessage\";\r\nimport { useAlert } from 'react-alert';\r\nimport ValidateUserBlankInput from '../../helpers/ValidateUserBlankInput';\r\n\r\nexport default ({ createBoard, validateInput, errors: { boardOrderError, boardTitleError } }) => {\r\n    const [modalButtonClick, setModalButtonClick] = useState(false);\r\n    const [boardTitle, setBoardTitle] = useState(\"\");\r\n    const [boardOrder, setBoardOrder] = useState(0);\r\n    const [createNewBoard, setCreateNewBoard] = useState({});\r\n\r\n    const alert = useAlert();\r\n\r\n    const handleStoreBoardItem = () => {\r\n        if(ValidateUserBlankInput([boardTitle])){\r\n            alert.error(<div style={{ color: 'red', fontSize: 15 }}>Please, Fill Blank Fields...</div>, {\r\n                timeout: 5000,\r\n                onOpen: () => {\r\n                    console.log('hey')\r\n                },\r\n                onClose: () => {\r\n                    console.log('closed')\r\n                }\r\n            });\r\n        }\r\n        else{\r\n            setCreateNewBoard({\r\n                ...createNewBoard,\r\n                title: boardTitle,\r\n                order: boardOrder\r\n            });\r\n            setModalButtonClick(!modalButtonClick);\r\n        }\r\n    };\r\n    const handleBoardTitleChange = e => {\r\n        const { value, name } = e.target;\r\n        validateInput(value, name);\r\n        setBoardTitle(e.target.value);\r\n    }\r\n\r\n    const handleBoardOrderChange = e => {\r\n        const { value, name } = e.target;\r\n        validateInput(value, name);\r\n        setBoardOrder(value);\r\n    }\r\n\r\n\r\n    const stableDispatch = useCallback(createBoard, []);\r\n\r\n    useEffect(() => {\r\n        stableDispatch(createNewBoard);\r\n    }, [stableDispatch, createNewBoard]);\r\n\r\n\r\n    const handleToggleModal = () => {\r\n        setBoardTitle('');\r\n        setBoardOrder(1);\r\n        setModalButtonClick(!modalButtonClick);\r\n    }\r\n\r\n    return (\r\n        <MDBContainer className=''>\r\n            <div className='start-modal-button-wrapper row align-items-center justify-content-center'>\r\n                <MDBBtn className='start-modal-button' onClick={handleToggleModal}>CREATE BOARD</MDBBtn>\r\n            </div>\r\n            <MDBModal isOpen={modalButtonClick} toggle={handleToggleModal}>\r\n                <MDBModalHeader toggle={handleToggleModal}>Board Form</MDBModalHeader>\r\n                <MDBModalBody>\r\n                    <div className=\"form-group\">\r\n                        <MDBInput label=\"Enter Board Title\" name='board-title' type='text' value={boardTitle} onChange={handleBoardTitleChange} size=\"md\" />\r\n                        {boardTitleError.errors && <ErrorMessage error={boardTitleError.errors}/>}\r\n                        <OrderInput order={boardOrder} boardOrderChange={handleBoardOrderChange}/>\r\n                        {boardOrderError.errors && <ErrorMessage error={boardOrderError.errors}/>}\r\n                    </div>\r\n                </MDBModalBody>\r\n                <MDBModalFooter>\r\n                    <MDBBtn className='row' color=\"secondary\" onClick={handleToggleModal}>Close</MDBBtn>\r\n                    <MDBBtn disabled={boardOrderError.inputStatus || boardTitleError.inputStatus} className='row' color=\"primary\" onClick={handleStoreBoardItem}>Create Board</MDBBtn>\r\n                </MDBModalFooter>\r\n            </MDBModal>\r\n        </MDBContainer>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport {MDBBtn, MDBBtnGroup} from \"mdbreact\";\r\n\r\nexport default ({task: { board, id }, boardOrder, boardLength, moveTask, deleteTask, hideTask}) => {\r\n    console.log('length', boardLength)\r\n    return (\r\n        <MDBBtnGroup size=\"sm\" className=\"mb-4\">\r\n            <MDBBtn\r\n                disabled={boardOrder === 0}\r\n                className='task-button'\r\n                color=\"danger\"\r\n            >\r\n                <span\r\n                    id={id}\r\n                    onClick={moveTask}\r\n                    direction='left'\r\n                    order={boardOrder}\r\n                    name={`left-${board}`}\r\n                    className=\"fa fa-angle-double-left\"\r\n                    aria-hidden=\"true\"\r\n                >\r\n                </span>\r\n            </MDBBtn>\r\n            <MDBBtn className='task-button' color=\"pink\">\r\n                <span id={id} name={board} onClick={hideTask} className=\"hide fas fa-eye-slash\" aria-hidden=\"true\"/>\r\n            </MDBBtn>\r\n            <MDBBtn className='task-button' color=\"pink\">\r\n                <span id={id} name={board} className=\"hide fas fa-edit\" aria-hidden=\"true\"/>\r\n            </MDBBtn>\r\n            <MDBBtn className='task-button' color=\"pink\">\r\n                <span id={id} name={board} onClick={deleteTask} className=\"delete fas fa-trash-alt\" aria-hidden=\"true\"/>\r\n            </MDBBtn>\r\n            <MDBBtn\r\n                className='task-button'\r\n                disabled={boardOrder === boardLength - 1}\r\n                // disabled={`right-${board}` === 'right-done'}\r\n                color=\"danger\"\r\n            >\r\n                <span\r\n                    id={id}\r\n                    onClick={moveTask}\r\n                    direction='right'\r\n                    order={boardOrder}\r\n                    name={`right-${board}`}\r\n                    className=\"fa fa-angle-double-right\"\r\n                    aria-hidden=\"true\"\r\n                >\r\n                </span>\r\n            </MDBBtn>\r\n        </MDBBtnGroup>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport ButtonGroup from \"./ButtonGroup\";\r\nimport {MDBBtn, MDBContainer, MDBModal, MDBModalBody, MDBModalFooter, MDBModalHeader} from \"mdbreact\";\r\n\r\n\r\nexport default ({task, boardLength, boardOrder, index, moveTask, deleteTask, hideTask}) => {\r\n\r\n    const [toggleModal, setToggleModal] = useState(false);\r\n\r\n    const dragTaskStart = e => {\r\n        const target = e.target;\r\n        e.dataTransfer.setData('task', target.id);\r\n    };\r\n\r\n    const DescriptionModal = () =>\r\n        <MDBContainer>\r\n            <MDBModal isOpen={toggleModal} toggle={handleToggleDescriptionModal} size=\"fluid\">\r\n                <MDBModalHeader toggle={handleToggleDescriptionModal}>{task.title}</MDBModalHeader>\r\n                <MDBModalBody>\r\n                    {task.description}\r\n                </MDBModalBody>\r\n                <MDBModalFooter>\r\n                    <MDBBtn color=\"secondary\" onClick={handleToggleDescriptionModal}>Close</MDBBtn>\r\n                </MDBModalFooter>\r\n            </MDBModal>\r\n        </MDBContainer>\r\n\r\n    const dragTaskOver = e => {\r\n        e.stopPropagation();\r\n    };\r\n\r\n    const handleOnMouseOver = e => {\r\n        let id = e.target.id;\r\n        document.getElementById(id).querySelector(\".task-details\").innerHTML = 'Click Here...';\r\n    }\r\n    const handleOnMouseOff = e => {\r\n        let id = e.target.id;\r\n        document.getElementById(id).querySelector(\".task-details\").innerHTML = 'Details...';\r\n    }\r\n\r\n    const handleToggleDescriptionModal = () => setToggleModal(!toggleModal)\r\n\r\n    return (\r\n        <div\r\n            draggable='true'\r\n            name={task.board}\r\n            id={index}\r\n            onDragStart={dragTaskStart}\r\n            onDragOver={dragTaskOver}\r\n            className=\"d-flex flex-column task-card\"\r\n        >\r\n            <h6 className=\"task-title\">{task.title}</h6>\r\n            <span className=\"p-2 col-example text-left task-details\"\r\n                  id={index}\r\n                  onMouseOver={handleOnMouseOver}\r\n                  onMouseLeave={handleOnMouseOff}\r\n                  onClick={handleToggleDescriptionModal}\r\n            >\r\n                <i>Details...</i>\r\n            </span>\r\n            <DescriptionModal/>\r\n            <ButtonGroup boardLength={boardLength} boardOrder={boardOrder} moveTask={moveTask} deleteTask={deleteTask} hideTask={hideTask} task={task}/>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport TaskItem from \"./TaskItem\";\r\nimport {MDBCol, MDBContainer, MDBRow} from \"mdbreact\";\r\n\r\nexport default ({\r\n                    boards,\r\n                    moveTask,\r\n                    deleteTask,\r\n                    hideTask,\r\n                    showTask,\r\n                    dragTask,\r\n                    deleteBoard,\r\n                    boardMessage\r\n                }) => {\r\n\r\n    const dropTask = e => {\r\n        e.preventDefault();\r\n        const task_id = e.dataTransfer.getData('task');\r\n        const task = document.getElementById(task_id);\r\n        dragTask(e.target.getAttribute('name'), task.getAttribute('name'), task_id);\r\n    };\r\n\r\n    const dragTaskOver = e => {\r\n        e.preventDefault();\r\n    };\r\n\r\n    const boardList = (list, order, length) => list.length\r\n        ? list.map((task, id) => task.visibility\r\n            ? <TaskItem boardLength={length} boardOrder={order} moveTask={moveTask} deleteTask={deleteTask}\r\n                        hideTask={hideTask} key={id} index={task.id} task={task}/>\r\n            : <p className='show' key={task.id}>Hidden Task... <span id={task.id} name={task.board} autoFocus\r\n                                                                     onClick={showTask} className='show'>SHOW</span></p>\r\n        )\r\n        : <p style={{color: 'white', textAlign: 'center'}}><i>{boardMessage}</i></p>;\r\n\r\n    return (\r\n        <MDBContainer className=\"dashboard\">\r\n            <MDBRow className=\"kanban-row\">\r\n                {boards.map(board => (\r\n                    <MDBCol\r\n                        key={board.id}\r\n                        onDrop={dropTask}\r\n                        name={board.name}\r\n                        onDragOver={dragTaskOver}\r\n                        className=\"kanban-col\"\r\n                        md=\"3\"\r\n                    >\r\n                        <div className='board-header container'>\r\n                            <div className='row'>\r\n                                <h3 className=\"task-list-title col-10\">{board.title}: ({board.tasks.length})</h3>\r\n                                <div className='col-2'><i id={board.id} onClick={deleteBoard}\r\n                                                          className=\"far fa-calendar-times fa-2x\"/></div>\r\n                            </div>\r\n                        </div>\r\n                        {boardList(board.tasks, board.order, boards.length)}\r\n                    </MDBCol>\r\n                ))\r\n                }\r\n            </MDBRow>\r\n        </MDBContainer>\r\n    );\r\n}","import React from 'react';\r\nimport TaskModalPage from '../task_modal/ModalPage';\r\nimport BoardModalPage from '../board_modal/ModalPage'\r\nimport NewKanbanDashboard from \"./NewKanbanDashboard\";\r\n\r\nexport default props => {\r\n    const listProps = {\r\n        boards: props.boards,\r\n        boardMessage: props.boardMessage,\r\n        errors: props.errors\r\n    };\r\n    const eventProps = {\r\n        createBoard: props.createBoard,\r\n        createTask: props.createTask,\r\n        moveTask: props.moveTask,\r\n        deleteTask: props.deleteTask,\r\n        deleteBoard: props.deleteBoard,\r\n        hideTask: props.hideTask,\r\n        showTask: props.showTask,\r\n        dragTask: props.dragTask,\r\n        editTask: props.editTask,\r\n        validateInput: props.validateInput,\r\n        resetErrors: props.resetErrors\r\n    };\r\n    return (\r\n        <div>\r\n            <TaskModalPage\r\n                errors={listProps.errors}\r\n                validateInput={eventProps.validateInput}\r\n                createTask={eventProps.createTask}\r\n                resetErrors={eventProps.resetErrors}/>\r\n            <BoardModalPage\r\n                errors={listProps.errors}\r\n                validateInput={eventProps.validateInput}\r\n                createBoard={eventProps.createBoard}\r\n                resetErrors={eventProps.resetErrors}/>\r\n            <NewKanbanDashboard\r\n                boardMessage={listProps.boardMessage}\r\n                {...listProps}\r\n                {...eventProps}/>\r\n        </div>\r\n    )\r\n}","export default (obj) => {\r\n\r\n    // null and undefined are \"empty\"\r\n    if (obj == null) return true;\r\n\r\n    // Assume if it has a length property with a non-zero value\r\n    // that that property is correct.\r\n    if (obj.length > 0)    return false;\r\n    if (obj.length === 0)  return true;\r\n\r\n    // If it isn't an object at this point\r\n    // it is empty, but it can't be anything *but* empty\r\n    // Is it empty?  Depends on your application.\r\n    if (typeof obj !== \"object\") return true;\r\n\r\n    // Otherwise, does it have any properties of its own?\r\n    // Note that this doesn't handle\r\n    // toString and valueOf enumeration bugs in IE < 9\r\n    for (var key in obj) {\r\n        if (hasOwnProperty.call(obj, key)) return false;\r\n    }\r\n\r\n    return true;\r\n}","export default (name, value, length) => {\r\n    const titleFormat = /^[0-9a-zA-Z]+$/;\r\n    const personNameFormat = /^[a-zA-Z]+$/;\r\n    switch (name) {\r\n        case 'board-order':\r\n            return {\r\n                errors:\r\n                    isNaN(value) || value === \"\"\r\n                        ? 'Input must be an INTEGER!'\r\n                        : parseInt(value) <= 0\r\n                        ? 'Must be greater than zero!'\r\n                        : parseInt(value) > length\r\n                            ? `Must be less or equal ${length}!`\r\n                            : '',\r\n                inputStatus:\r\n                    isNaN(value) || value === \"\" || parseInt(value) <= 0 || parseInt(value) > length\r\n            };\r\n        case 'board-title':\r\n            return {\r\n                errors:\r\n                    !value.match(titleFormat)\r\n                        ? 'Please, input alphanumeric characters only!'\r\n                        : value.length > 10\r\n                            ? 'This title is too long'\r\n                            : '',\r\n                inputStatus:\r\n                    !value.match(titleFormat) || value.length > 10\r\n            };\r\n        case 'task-title':\r\n            return {\r\n                errors:\r\n                    !value.match(titleFormat)\r\n                        ? 'Please, input alphanumeric characters only!'\r\n                        : value.length > 7\r\n                        ? 'This title is too long'\r\n                        : '',\r\n                inputStatus:\r\n                    !value.match(titleFormat) || value.length > 7\r\n            };\r\n        case 'task-description':\r\n            return {\r\n                errors:\r\n                    value.length >= 100\r\n                        ? 'Description must be less than 100 characters'\r\n                        : '',\r\n                inputStatus:\r\n                    value.length >= 100\r\n            };\r\n        case 'first':\r\n            return {\r\n                errors:\r\n                    !value.match(personNameFormat)\r\n                        ? 'Please, input alphabetical characters only!'\r\n                        : value.length < 3\r\n                        ? 'First name is too short'\r\n                        : '',\r\n                inputStatus:\r\n                    !value.match(personNameFormat) || value.length < 3\r\n            };\r\n        case 'last':\r\n            return {\r\n                errors:\r\n                    !value.match(personNameFormat)\r\n                        ? 'Please, input alphabetical characters only!'\r\n                        : value.length < 3\r\n                        ? 'Last name is too short'\r\n                        : '',\r\n                inputStatus:\r\n                    !value.match(personNameFormat) || value.length < 3\r\n            };\r\n        default:\r\n            return {\r\n                errors : '',\r\n                inputStatus: false\r\n            }\r\n    }\r\n}\r\n","import React, {useState} from 'react';\nimport Main from './components/main';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\nimport uuid from 'react-uuid';\nimport './App.css';\nimport isEmpty from './helpers/EmptyObject';\nimport ValidateUserInput from \"./helpers/ValidateUserInputChange\";\n\n\nconst initialBoards = [\n    {\n        name: 'todo',\n        order: 0,\n        title: 'To-Do',\n        id: uuid(),\n        tasks: []\n    },\n    {\n        name: 'in-progress',\n        order: 1,\n        title: 'In-Progress',\n        id: uuid(),\n        tasks: []\n\n    },\n    {\n        name: 'review',\n        order: 2,\n        title: 'To-Review',\n        id: uuid(),\n        tasks: []\n\n    },\n    {\n        name: 'done',\n        order: 3,\n        title: 'Completed',\n        id: uuid(),\n        tasks: []\n    },\n    {\n        name: 'extra',\n        order: 4,\n        title: 'Extra',\n        id: uuid(),\n        tasks: []\n    }\n];\n\nconst initialErrors = {\n    boardTitleError: {\n        errors: '',\n        inputStatus: false\n    },\n    taskTitleError: {\n        errors: '',\n        inputStatus: false\n    },\n    boardOrderError: {\n        errors: '',\n        inputStatus: false\n    },\n    taskDescriptionError: {\n        errors: '',\n        inputStatus: false\n    },\n    firstNameError: {\n        errors: '',\n        inputStatus: false\n    },\n    lastNameError: {\n        errors: '',\n        inputStatus: false\n    }\n}\n\nfunction App() {\n\n    const [note, setNote] = useState(\"\");\n    const [boards, setBoards] = useState(initialBoards);\n    const [inputErrors, setInputErrors] = useState(initialErrors);\n\n    const handleCreateNewBoard2 = board => {\n        let index = parseInt(board.order) - 1;\n        if (isEmpty(board) !== true) {\n            setBoards(boards => [\n                ...boards.slice(0, index),\n                Object.assign({},\n                    {\n                        ...board,\n                        id: uuid(),\n                        name: board.title.toLowerCase(),\n                        tasks: []\n                    }),\n                ...boards.slice(index)\n            ]);\n            setBoards(boards => boards.map((board, id) => ({...board, order: id })));\n\n        }\n    }\n\n\n    const handleValidateUserInput2 = (input, name) => {\n        if (name === 'board-order') setInputErrors(inputErrors => ({ ...inputErrors, boardOrderError: ValidateUserInput(name, input, boards.length)} ));\n        if (name === 'board-title') setInputErrors(inputErrors => ({ ...inputErrors, boardTitleError: ValidateUserInput(name, input, boards.length)} ));\n        if (name === 'task-title') setInputErrors(inputErrors => ({ ...inputErrors, taskTitleError: ValidateUserInput(name, input, boards.length)} ));\n        if (name === 'task-description') setInputErrors(inputErrors => ({ ...inputErrors, taskDescriptionError: ValidateUserInput(name, input, boards.length)} ));\n        if (name === 'first') setInputErrors(inputErrors => ({ ...inputErrors, firstNameError: ValidateUserInput(name, input, boards.length)} ));\n        if (name === 'last') setInputErrors(inputErrors => ({ ...inputErrors, lastNameError: ValidateUserInput(name, input, boards.length)} ));\n    }\n\n    const handleResetAllErrors2 = () => setInputErrors(initialErrors);\n\n    const handleEditTaskItem2 = e => {\n        console.log(e.target.id);\n    }\n\n    const handleDeleteBoard2 = e => {\n        let id = e.target.id;\n        setBoards(boards => boards.filter(board => board.id !== id));\n        setBoards(boards => boards.map((board, id) => ({...board, order: id })));\n    }\n\n\n    const handleCreateNewTask2 = task => {\n        if (isEmpty(task) !== true) setBoards(boards => boards.map(board =>\n            board.name === 'todo'\n                ?\n                {\n                    ...board,\n                    tasks: board.tasks.concat(\n                        {\n                            ...task,\n                            id: uuid(),\n                            board: \"todo\",\n                            visibility: true\n                        }\n                    )\n                }\n                :\n                board\n            )\n        )\n        else setNote('This list is empty');\n    };\n\n\n    const handleMoveTaskWithinBoard2 = e => {\n        const id = e.target.getAttribute('id');\n        const direction = e.target.getAttribute('direction');\n        const boardOrder = e.target.getAttribute('order');\n        const movingTask = boards.find(board => board.order === parseInt(boardOrder)).tasks.find(task => task.id === id);\n\n        ///remove a task....\n        setBoards(boards => boards.map(board =>\n            board.order === parseInt(boardOrder)\n                ?\n                {\n                    ...board,\n                    tasks: board.tasks.filter(task => task.id !== id)\n                }\n                :\n                board\n            )\n        );\n\n        ////Add a task......\n        setBoards(boards => boards.map(board =>\n            board.order === parseInt(boardOrder) + 1 && direction === 'right'\n                ?\n                {\n                    ...board,\n                    tasks: board.tasks.concat({...movingTask, board: board.name})\n                }\n                : board\n            )\n        );\n        setBoards(boards => boards.map(board =>\n            board.order === parseInt(boardOrder) - 1 && direction === 'left'\n                ?\n                {\n                    ...board,\n                    tasks: board.tasks.concat({...movingTask, board: board.name})\n                }\n                : board\n            )\n        );\n    };\n\n    const handleDragAndDrop2 = (board_name, task_name, id) => {\n        const dragTask = boards.find(board => board.name === task_name).tasks.find(task => task.id === id);\n\n        setBoards(boards => boards.map(board =>\n            board.name === task_name && board_name !== null\n                ?\n                {\n                    ...board,\n                    tasks: board.tasks.filter(task => task.id !== id)\n                }\n                :\n                board\n            )\n        );\n        setBoards(boards => boards.map(board =>\n                board.name === board_name\n                ?\n                {\n                    ...board,\n                    tasks: board.tasks.concat({...dragTask, board: board.name})\n                }\n                : board\n            )\n        );\n    }\n\n    const handleDeleteTaskItem2 = e => {\n        setBoards(boards => boards.map(board =>\n                board.name === e.target.getAttribute('name')\n                    ?\n                    {\n                        ...board,\n                        tasks: board.tasks.filter(task => task.id !== e.target.id)\n                    }\n                    :\n                    board\n            )\n        );\n    };\n\n    const handleShowTaskItem2 = e => {\n        let visible;\n        const id = e.target.getAttribute('id');\n        const name = e.target.getAttribute('name');\n        const className = e.target.getAttribute('class').split(\" \")[0];\n        className === 'show' ? visible = true : visible = false;\n\n        setBoards(boards => boards.map(board =>\n            board.name === name\n                ?\n                {\n                    ...board,\n                    tasks: board.tasks.map(task => task.id === id\n                        ?\n                        {\n                            ...task,\n                            visibility: visible\n                        }\n                        :\n                        task\n                    )\n                }\n                :\n                board\n            )\n        );\n    }\n\n    /////////////////////////////////////////////////////////////////\n    ////////////////////////////////////////////////////////////////////\n\n\n    const handleEventProps = {\n        createBoard: handleCreateNewBoard2,\n        createTask: handleCreateNewTask2,\n        moveTask: handleMoveTaskWithinBoard2,\n        dragTask: handleDragAndDrop2,\n        deleteTask: handleDeleteTaskItem2,\n        hideTask: handleShowTaskItem2,\n        showTask: handleShowTaskItem2,\n        editTask: handleEditTaskItem2,\n        deleteBoard: handleDeleteBoard2,\n        validateInput: handleValidateUserInput2,\n        resetErrors: handleResetAllErrors2\n    };\n\n    const handleStateProps = {\n        boards: boards,\n        boardMessage: note,\n        errors: inputErrors\n    };\n\n    return <Main {...handleEventProps} {...handleStateProps} />\n\n}\n\nexport default App;\n","import { transitions, positions } from 'react-alert';\r\n\r\nexport const options = {\r\n    position: positions.TOP_CENTER,\r\n    timeout: 5000,\r\n    offset: '20px',\r\n    containerStyle: {\r\n        zIndex: 9999,\r\n    },\r\n    transition: transitions.SCALE\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider as AlertProvider } from 'react-alert';\nimport App from './App';\nimport { options } from './helpers/AlertOptions';\nimport AlertTemplate from 'react-alert-template-basic';\n\nReactDOM.render(\n    <AlertProvider template={AlertTemplate} {...options}>\n        <App/>\n    </AlertProvider>, document.getElementById('root'));\n\n"],"sourceRoot":""}